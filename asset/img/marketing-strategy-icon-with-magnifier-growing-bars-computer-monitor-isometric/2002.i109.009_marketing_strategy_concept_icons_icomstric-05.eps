%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 2002.i109.009.P.m004.c33.marketing strategy concept icons icomstric-05.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: MSI
%%CreationDate: 4/24/2021
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 5 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">2002.i109.009.P.m004.c33.marketing strategy concept icons icomstric</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2021-04-24T18:46:40+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2021-04-24T18:46:40+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2021-04-24T18:46:40+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qk3mldVWwW40y9Wyu&#xA;Ldw/7yP1I5Qfh9OQD4gpJ6ruMjLLGAuXJqywmR6TRS7S/PcInjsfMEH6KvnPGKVjytJiOvpTdAf8&#xA;lqEZYAJC4mw0x1NHhyDhP2H4sqBBAINQehyLluxV2KuxV2KuxV2KuxVIfOPnXRfKWmpfaqZCsziK&#xA;3hhQu8kh6IvRQfmRleTIIDdytLpJZiRGtudp9ljiuxV2KuxV2KuxV2KuxVK4fNHl6ae7gj1CEy2D&#xA;+neLyp6b7ggk7bFCDgtNFE6Tq+mavZJfabcJdWrllWVOlVPEjeh6jCCpFIvFDsVdirsVdirsVUby&#xA;6S0s57pwWS3jeVlXdiEUsQPfbIylQJ7leJ/mDrtvqOv22q2NzdWyxwILe8R2X0ZKtyUqteFdqneu&#xA;OnnjyjY+ru6uBqNXPFPl6E28ufnHdWMkFn5qVZbeVlSHWoAAu7cazKPg2/aZDt4ZIghzMWWMxtse&#xA;565izSjzJrFxp0EItfSa6meiJMWClEHJ6cd606ZGRNbMo1e6U6vqmp6x5AbU9HdIb6WH1o14C4Ut&#xA;GfjjApvXiVrSo8MhliZRpswmAn6hcUnu9ZtLoalZ2oiubyG2aWO1nFYyiTmOI/EV3Che9QT1BzBl&#xA;AiByY/VE7V9/2LhGM5RDIaHVkHkrSbjT7eVnnn9O5WKUWEzc47aQ8/UWAn4hGxpQNuMz8WUziJHm&#xA;WvJijCRjH6RsGS5YxdirsVdirsVdiqR+b/N2neWNNS7ukkuJ7iVbeysoAGmnmf7KID+JyrNmGONl&#xA;ydLpjmlQ2A5nufO3n/X/ADHr3mjSb3Wo0s2iuYbeDTYiXWNGl3Z3JIMhr1UfTmmhrBmye56vT4IY&#xA;sMhDcVd/B9B+XPO+k6zZS3Dulk8d49kIJZF5s4lMUVAQu8pHwgd9t6ZuoZQQ8tn0koSob7X9ln5M&#xA;iyxxHYq7FXYq7FXYq8Z/PTznrFtoNt9RkudHgF0rC6CyLcSkRy0UxBR6cZI6u3KvE8crOQXw9f0N&#xA;kYSBvav0qGiRa5beZvN8zR2qm5uYLqC1ikR19cpIkjV2ZGc8asQMBJSBsLSDQ9Q1Dy+n5baI9+1k&#xA;RqFxHdw2DpcQzJPeoYxK8TcULCQhqsfh+ZAkCpHN9GAggEGoPQ5NqdirsVdirsVdiqncQR3FvLBJ&#xA;X05kaN6bHiwocEhYpXlGueTIdFuHkDvdWyywBIzxAKMWaRJQKEgqvVT9GafUY/y44weu3v8ANYYv&#xA;EPD06+55fqmja7Fqmo21jbldNujcTQxF09P0F5SUDOVXmiDbv4ZDBq5SJMeu5D1wwabLhhGe5gIx&#xA;B/iHT5fZ3vqLTLmW6020uZVCSzwxySIu4DOoYgV7VObsGw8nONSISzzVBZz2givNPW9gNas6h1Tb&#xA;qR1pUD/OmVZc3h70a7x0/SmGMT2+zvYXcfXNN8vQtaXdtAtmhX125R20IUEhPRUq8bAGnIKz0ygZ&#xA;JS9cTGQ95/Ud/i3Swco2R8BflvyRWn/UfM2nBby19O6uYo5ElUK4ljR1n9SFh+6mQu1WFFkA+0tc&#xA;tnDiiYg8JPUIFRlcgJR7jv8AjyZroqJHAIkk9URRonKlCKctivUUHY5PBjMICJN0GrJISkSExy1g&#xA;7FXYq7FXYqlHmjzLa+XdKN/cQT3RLiKC2tY2llklYEqoC9K06nK8uTgFt+nwHLKrA62XjE+t6v5j&#xA;8zprmrQLb/V+NtpumlvUFssoJeQsKD1XApXsPw5vWaiWo2jvbuMWXFjgYwPpG8pd/wCxJNa8s6lq&#xA;F2724CXmmwQ6rDBJt6sQmCBhuNgxBPt07Zb2foMsZEEerucw9pYY4RMn93Kxfw/SzXRvy1eDzdaa&#xA;ezPJpNqhkLfWIlm42831i1nEdSzK8kkimi8eo2IzdnBESAHKvtdTHtHJPFOUhUjM1ttwkd/y83sm&#xA;ZDqnYq7FXYq7FWnLBSVFW7DFXnX5o+U9Y816fDYLcGC2jnjmlRFVpBwJoV5FB3r9odOhOYeUZeK9&#xA;jCuXn73LweGRRPDLv6MZ0Tyte6T5w8zTX1pbWdhrPprpcdxNCn1qSNWBiiDN/u0uCeI+e9MOOE4w&#xA;A2uvx16fimMpCRs2xz8tPKFtrM2m6RNI1rqHlu8nupRbILmGZJJBQTXAdlR2X4O9VXb3ThEibHMc&#xA;2XHwgEHcPoXTdPWxtlgSR5FWtDIxc7kt9pqk9aZfix8Easn3tGXIZy4j9iKyxrdirsVdirsVdirA&#xA;PNfnLStM81nRtQ4gXMEUiK1PiBLLsG+FunTY4JQjMcJaZTnjlxAXHy5h5v5zg1UazdQ6Skkukays&#xA;NuET4kZyEog5bo/qIKV3+YzL02mxDFwEDa/lzcHNqsni8eMnevm9v8oavJq/lyyv5bQWMkiujWg6&#xA;RmKRoqAUFB8FadumUZICMqDsMWQziJHmU0uITLGUDlK9fce+QbGA3P5VaXNrkN4beJ4frD3V7BOr&#xA;TJO7rT4ubFaAjoVPjmN4BEgQdnPjrB4coSjZNUeVV8GeW9qkIFOo2AGwA9hmQA4NqoRAxYKAzUDN&#xA;Tc06VwobxV2KuxV2KuxVbJGkkbRuKo4KsOlQRQ9MBAIoqx7S/IHl2wlnl9Jrl5jUGchuApx+CgWm&#xA;x69cxdPoseLcc/PoniNEdCmQ8uaF6Xp/UYT+4+q+oVrL6FQ3p+qf3nHkAftdd8zL34urGvRwfwdy&#xA;nH5bsI/Mf6fR5Rd/U/qHpcgYfSEgkB4kV5Ar1rkOAcXF1b/Hl4fh/wAN2muSaXYq7FXYq7FXYq0y&#xA;IxBZQSpqpIrQ+2KoTU9F0nVEVNQs4roIHWNpUDMgkHF/Tb7SEjupBwGIPNnjyygbia/Yv0/TNO02&#xA;2Frp9rFaW4JYQwIsacm3JooAqe5xArkiUjI2TZROFi7FXYq7FXYq7FXYqxPz3+W2gecIo2vg0d9A&#xA;vG2u03Kb1oVOxFcBFpEqeQax5M/MvQZ30lUGoaZej0LW5jYrweo4fEx+DcVoxoO2GM5DZqnp8cjx&#xA;cj976D07TrLTrOOzsohDaxV9OIEkDkxY9ST1JwykSbLKMREUERgZOxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVxNBXFV&#xA;K1u7a6hWa3kWWJujKa4oBB5L/Vi9T0ua+rTlwqOXGtK060w0atNrsCuxV2KuxV2KuxV2KuxVD3Oo&#xA;2NrIkdxOkTyfYVyBXKcmohAgSNWzjjlLkERlzB2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xVZHNHIKqajtgtaW293a3PqfV5km9J2il4MG4uhoytToQeoyVMYyB5KuBkgNe1L9G6Pd3wXm0MZK&#xA;J4sfhUGn+UcjOVBEjQt5noeuy2jGJGkjuYqc54lBjau4WRSafT+OCGT1mEyNuTjYcMpQ44D8e7qj&#xA;dT81Nql1aywzpDdWkUrOilqSLUENGw3Ugpvv075b4soj0EEWL/qtkscr/eRlGW4j0uWx6+X382Q+&#xA;UvN1xqlyLORPV4qxef7LLTpUUCvWnVafLvkpmJ3GycZlXq5/D7e7oy3K212KuxV2KuxV2KuJAFSa&#xA;AdScVeQeevzM8py61NYWjT3N/YLJBcLHG1GYGvFOVOTIQemaTtPD4pBj0+Tn6eRx7S5FlfkHz5Za&#xA;9BDaQo3OJGR3kJEgeKg4uhUcTQ/zHMnSao8QxSHTnfNhqNPQ4gdizTNk4bsVdirsVdirsVad1RS7&#xA;kKiglmJoAB1JOAkAWVY9dzK0c2t2GpC7sWCA26MJIi6yKKo6n4fcZgylw8WWMuIVy6X5dzaZjh4a&#xA;370HYec7fVU42lx9WaGakjsolBCfaU14Hif5vatcqGslKr/d7+/bu/HJkYxid97HuTzSY9VSS4F3&#xA;cx3VuWBt5AOMgqKlXWgUe1MzNPHJG+M8Q6MchgQOEUeqZZkNTsVdirsVdiqB1LWbLTnhW6LATcqO&#xA;q8goWgJanQVYZjajVRxVxXu2Y8RlyefS+c7nTtfs9OVW/wBOdxFurRsq78q1ruOlOnh4p1MZSAju&#xA;CmGmnwTmduAjb3se17zTqcPnS9ksPS065hhgleQyMqziVDQ+qQYj8cLL6ci7hfhoSSLcmqGIiMgS&#xA;D3c/9Lz+IceGjOe54zUo89jXxPL5j4h6V5G82XHmK2u3lgWM2cghMyn7b0PJSm/Fl2rRmU12OWDk&#xA;D3gFGOfEEBPY3+q+abmWWaJNFtybe7h51lmUJ8KUTlxUSbkmjdcxjjMpWfp+9ss8ujAtd0PXPL1/&#xA;Ne6RE0llJIW+oSsrbUI/dT8R7USRT9+WDHECqBHmojX0kxPeHeXdZ07XPMiesDHOYxFLDKTHLF9o&#xA;PyRySQwZfiBI+WWQFfSdu47n5tWTiNRlH+Imxy3FVXTk9J0HyhJo2tyXaT+rbyxiJUI+JeJYip7j&#xA;4qb1PvjW5PUs4x4YiI+mN/bX6mU4WTsVdirsVdiqjd3cFpbvPM1I0FTQEk+wA65GUhEWVY7day1/&#xA;EVhnNs9TwDbcqdKMD+o+1c1+TUyltHb8fj9bbGL5c8+K1j5r1D6vwk/fuwkJblSQB6EoQDTlTIRn&#xA;tTt44BOIMhuz/wDKgXr+UG1Cenq3dxNIkzdo0CxihNWPxIe5OantCxkHuYgAbB9EWsyzW0Mynksi&#xA;K4bxDCtc6jHLiiD3h00hRpUyaHYq7FXYqtkcpGzBS5UVCDqfvxKsN8warcX8Uln9a+oCRfTNu49O&#xA;VnaoHxs3Fl3HJVFfcdM12fMMkDAHhl3Hb9Bu/JvGIjc7x/H43Cp5c02203S5NKuJklFzK0xXjwHx&#xA;BdlqWO3Drlum0/Bj4Tuwkd1lx5euLKQz6aRxL85ISF+LkxZuVevLkeu/vlObSy5wPwKeMnnun3ly&#xA;WWWxeSVSshlaqtWooAAN/bMrSmRgOLnv97WU1zIQ7FXYq7FXYqk/mjS5r2w9S1Fb21rJbitORFG4&#xA;bgg8io65janTeLVHhIPP8c2zHl4L2t5HFr1nd38EDW/GJnjgL0+KG4krFwmt3r9vh8RHTxGXaPQS&#xA;wwPFV3YruobjuLiZ9YMswBfDy+O+xHctOm2Ws3ep2NypJgtoZm1CZOELRyiYqhkBMkRTgzJQMPiP&#xA;JfCnEIwNSuRlIkbcr3+W3k5mbxYAygRERjwSoijWxvz38/uZ7+WVhDo8d5pLAxXEhS7ih4UBh4LF&#xA;yWRSySbr8TKdya0FcyAKFbmu/wB5/A8mgTMiSRRkbr5Jn5gsfNUJa60U297WQO9pcKIpOPQokiFF&#xA;I93Ukf5X2cqkJiVjePd+r9vzbBXVbaS3V3buL7TpbOVaLPBMA6Vb+WRapIvyPzAyYSRSS3n5daZq&#xA;Wo29/BbRM9pLHNGJuXAPGwYFXQhtmFeNaYQGNvQl5cRypypvTpXJIdirsVdirsVdiqldWlvdRGKd&#xA;A6Hsfv8A174CLUMQ1zRNX05zd6ZZJq1qVPrWTMEmBLbGOoKOApoVbwrXsaTio2A3Y+Eg2SJdO79H&#xA;zY5YaSuqXcNnqWkSQXSxm5toLiFUjWVSPjRyeRK8qig2rQ06Zpz2bKJlwmzIbdA5kdRceI7UaO9n&#xA;9VfimS2Hkmee2lXUJDbl3rHFFxNBShJoKVPthwdkXH94aPkwnq6PpZdbW6W9tFbx1KQosaE9aKKC&#xA;v3ZvIREQAOQcGRs2qZJDsVdirsVdiqA1nRLLV7KS0ugVWSn7xOPIFSCPtBlO46MCPbIygJcxalj2&#xA;k+Sb+1SaC8vRdxJw+pyHkGpQ8gwPJl7dHYew6ZGGPh2HJIO2+5Tm2sdRqY3PowrtyJDsf9X+37sk&#xA;ApKZ29vHBGI0rTqSxqSfHJIVMVdirsVdirsVdirwzzv5F83aJ5puvNNpZR+ZNJmle5exUMtxAzNz&#xA;+DiamjdDRvlkhlkBQ5NZwQlLiI3TL8rdVg8wXOuNo0JFnBZ2cYsr+MgrJK9ys0DHcMAkMfj13yjJ&#xA;xmjE7hyBQBEh6SST8avm9D8rwTRRM9zaizvZfiuoVrwEnBFPCpPw/DTY5TpYGPFYr1NmoyCRqJuM&#xA;dh7k+zLcd2KuAAFBsB0GKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxVRt7Gzt5JpYIUiknIaZkAXmw7tTqcVVqCte+KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpV5jl1u&#xA;KzEmlIJHUkyqAC/HrVQevSmYetlmELxc/wAcm/AIGVTQdv5oH6ES6nUw3TDiiTIV5OBXj2p4VyEt&#xA;aBiEz6ZHoe9lLTnjMQbrqhoNbvNVv4JNOnEJgXleWU4YJwrQusgXruKK1DTfKsWeeWYlE0B9UT9/&#xA;6rpkcQhEiY58iGSw3VtOWEMqyFPtBSDTNlGYlyNuKQRzVckh2KuxV2KuxV2KsSsNS1Cx1yGzvLpp&#xA;IrkztPHPsYfTBcOjkAemQBTemajDknDKImRPFxWD0rqPJkBewZFfapbWli95R7iNELhbdTKzClfh&#xA;C5tZTAFs8eEzmI7A+ezEvJP5t+X/ADXqk+l26Nb3sYLxIzBllQdSrADcdx+JyjBqRkNcnY9odkz0&#xA;wEr4on7CzjMl1LsVdirsVdirsVQupx6jJaMNOmSC6DKyNKvNCAQWQ+HIbV7YCyiQOYtg+seZINSa&#xA;LRtZguvL/mCK4VtOkErRLLRuDSW1whMUh9JifTeo3AYHKzkANHZvOmkYmcPUBV+XKzXOue/lypEa&#xA;f521PTXeDXEN/aQisup20LR3MKgD4ruyFWAG9ZYeS+yjDHICubSygLPI9eY+bM7C/sdQtIryxuI7&#xA;q0mHKKeJg6MPZhtljjK+KuxV2KuxV2KrZG4Rs9K8QTT5DASoS6LX7C5srqe0lWSW1DiWKvxLJGvI&#xA;ow6gjuOuC0hIZPNd7phtZdQnhkhvAHhjdvSmKMzEcYnSFw3p8WKtuDVe1TTLPwzET1bBjsWGXwyx&#xA;zRJNG3KORQ6MO6sKg5kNTHfOvmOXSra3s7S1F7f6mZI4YGcRoEROUrsxDbKCO3U4OKVjh5tsIQ4T&#xA;KZqA8r5vILD8w9SuLG0stcb1Imb/AEO7jBblVvSo0Yq6ksOgqK9AozF1XhayFfTMfLzv4ddnNOhy&#xA;6YyIqUImvPflX6kXH+Z9joXmEaHqkhitbyFGmEiqpWGSqlUkDMpNAW6r248swcWkywjRlceUh5eT&#xA;LixT/oy6Hof1fjk9L8saa8d211pmoR3WkyUJVlKzIx3KMpFQaEHenyy/RaU4pHhleM/O2jU5AYgE&#xA;VMdehDLc2ThOxV2KuxV2Kpdr1g97YemoLlHEnpDbnxB+GvJP15javD4kK59a7/ubMU+EvPfzIttW&#xA;uPIkLXKTR2lnqsT3Rapk+oCoJda1YBnG3tXtmLAS8P1A0JdefC7TQkeKRE+swNf1kBojaj5b1+20&#xA;tWluNI1i3aWxilk5elNDuzJWlI5Ff7/bfMjHHhlQ+ko1GTxsPHL+8gaPmD3+YXeR/L/lzy951v8A&#xA;WJxN+kb55Y4+LKbeMTy8iEjChvAfaPyzCjqhjzmEh12I8+9GfPkzYgL2FfY9gzcOpdirsVdirsVW&#xA;TzwwRNNM4jiQVd2NAB4k4QLRKQAsoXR9XttVs/rVuCE5shBoTVTTsT164Zw4TTXhyicbDHtV8w2F&#xA;3DqtreWgdNPl4xTFC6RuEcpLI1KRANGf3hIA7kY5cQoX1Rh1EiZVzjsxKPUxHGTFZRrO6ohYj96v&#xA;NJQj8n5Hk3EEkULA9ehFE9OACR3Obg7XnPJGEhtxAc+8/igzzylp+mpafpK1tUtbi/RXu/SqqyP/&#xA;ADso2Ln+Y7++HEbjbLVw4Mko9xT/ACxxnYq7FXYq7FVC9uIYYH9RwpZWCAkAsQpNBXqchkmIjcso&#xA;RJ5MA1OyvtPRJi4LXjyzXXohlVXcI3Jzxaq9f2N1+XLMeIlGJAHFv7qvvZzPFkHQHb5BJbvR9Xu9&#xA;Yj1uyQX8rWS2xuYyJ5KPPJI7jkn2QkoCbbhaZd4cMkPWO4j3/jvaswnDIBE8ibv9O9/Lk9P8uWl1&#xA;aaHZW10ONxHEBIleXE9eNfbplgUsKj+s/mHeXV5ZPJpmjaa0lro+roAZbh3UpcuiMKelUCjeI8ag&#xA;URkZmxsHZ5ccdPEQmBORoyj0Hd8f1pnd/lp5Vg0m1jS2DHS4aQyTMKtwUmsjMKbsSxqOPtkzjHDQ&#xA;F/jvccavIZmV0Zc/7GM6j+W2k+anF1DCbHVba3EMWpcVJkQKY/TlRgySLwbxP+xwRyQzDbcfjkxi&#xA;Z4SJR9Mu7n8wmf5I+RtZ8m6HqWmau6zXBvOVtOpLVtfSTgoruoWQyfD2JPjloAaDMkUXo2Fi7FXY&#xA;q7FXYqpXaTSWk0cDcJnjZYn/AJWIIU/QcMebGYJBrm88/TvmCDSdcNxZia1tI5nuLK6R3pCoB4fF&#xA;8LFlY1BNKCuYmLLOUJHINxI9Ocf0+9yo4Y+NCOKX1AdfplfzHuYHpEmnTXKvZxT22pmJZba2bm8k&#xA;UU1HBtkbkOLc6rx64dL4Zlyouf2qNRGG8hKN1YrmO/zZ15JsrV/MNxZTXElw8cC3atzBNJJPsTGv&#xA;IU+EqKLt+yvTMrNp4EA11dHh1EiSCen4t6VgbXYq7FXYq7FUJqunrqGnT2TSGITLx9RdyN69D8sl&#xA;CXCba8uMTiYnq8i1a2mOlXmiw3JiuU+sxCN/USjiQLERGoY0mjVmMnFtxTkozAy8eQn8ddnpNGcG&#xA;ljCqFgfH03Pf+if4bHuKt5c1q/0aDStNguvX1i7FpbvaqTIZ6RFbiYq1WVYnHwykKCOvLrjiJjMR&#xA;Pf8A2rq4wy4pZAB9MiD5/wAIvrfUb15cnXs+jLeaXDdXkGlyvaX1zfGVT6Yube6t1hNE4rGXWeRm&#xA;KU5NQuHpQ5+SrNcnmsESYxMh6x+h6J5Se7jsRZ3UJRohWGVP3kLxH7LJMCQ9ST1CtTcouVxiAKDk&#xA;ZMkpyMpcyn2SYOxV2KuxV2Ksf83W19cQwraDkycywYjjuNmKn7XGnTK8sBKJBFt2nkBIXsPt+fT7&#xA;WC2EvmuWGXVUkmX6vPLAFLBwI0o0a1PP4WVlJ+7dsceMcIjZ2/HPms8oEyTEEH37fCwD9m6GvvMb&#xA;aZqnqsnoXF4zNHdL6iozjYJxQSANsQNhXIY9SABE86v8bM46LxLmLG4HT3XZlEfjueh+VtZ1i/iI&#xA;vrWioNrsUVXNOy5kEOMa6G/x+OSfRxxxII41CIuyooAA+QGBJNrmVWUqwBUihB3BGKELZ6XZWTOb&#xA;WP0lcszRr9nk55MQO1TkIYoxvhFWylMyNk2ismxdirsVdirsVdirsVadEdGR1DIwKsrCoIOxBBxS&#xA;DTGbX8uvL1r5lg1+Ezie1i9G1tXlL28S0KgRo/IoFDHiqtxHYZSMERLiDmT1+SWI4zVE2TW59/4t&#xA;kaW9ukskyRIsstPVkCgM3HYciNzTL7cGgqYEuxV2KuxV2KuxVJtf8rafrb2zXRZTbty+AL8XhUkH&#xA;7Lbr4ZOE+Fpy4ROtyKv7ebtD8p6Lo9pJDb20XrXClby6EarJNWv94QKt175GVEk97bCxERJJEWJz&#xA;fkton6Wtr60nW2it2ZjB6CsWDCgHLkoUq1CCFyNM+Is/srSKztIrWKpjiXipY1NPfCxVsVdirsVd&#xA;irsVWyRRyoY5FDowoVIqDiqmbS3+ri2VPTgA4iOP4AF8BxptgItNoOfy3oM86Ty2MLSxqUDcQKqe&#xA;qsB9oezYRsKQe9MURUUIgCooAVQKAAdABireKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVBapJq8SJLp0MVzw5Ga2kY&#xA;xu4p8IjfdVNf5hT3GRkSBszgInY7MXi/MSmrSWl3ZyWgjA9S2nQxzpsQTv8ABIlVJDRllp3GYx1J&#xA;jKpDb8fi3Kno/TcSJfj8bFl9neQXlrHcwNyilFVP4EH3B2OZGPJGY4omw4k4GJoiirZNi7FXYq7F&#xA;XYq7FXYq7FVkztHC8iRtKyKWWJOIZiBUKvIqtT7kDFUs0LzRo+tCRLSUpeQf702Ew9O4iNafHGd6&#xA;V25LVT2JwA2ylEjmm2Fi7FXYq7FXYq7FUNeahb2nASk85K8FHU06n5CuY2p1UMIBl1bIYzLk3Z38&#xA;F3zEZ+KOnNT1FemOm1UMwPD0RPGY80RmSwdirsVdirsVdirsVdirsVQtjqEd5JeIilTZzm3evdgi&#xA;PUfRIMjGQLKUapFZJi7FWJ6o2knXpZPrMcciofrKujE8ol+Eq3QcVJHTfMM6/FCZiTWzecE5xjV8&#xA;9vceY+JrrsxnzH5zudPGmW2mXohRQQYlWplmqSarwkeRQKEqvHrUsKZTi1MZxrGeTtIaeIJOUfUd&#xA;vd8/113Mw8h+aX8x6F9bnjWO9t5WtrxUBEZkQK4ePlvxeN0cV6VpmbhycUbdfrdOMWShyO4/HkyL&#xA;LXEdirsVdirsVdirsVYxqH5h+XrHUDaSNJJEsfNryBRLEGNfg+Alz7kKQO565WM0TyNtnhyHNid/&#xA;e6AdNS4tbY3LGdXs7yGQK8KSyqkn1aeIpIG+NUO48GrxoccylCHFW1+Xf+ObnYIDUZCCend3Dr8u&#xA;n9nSNKS4jsIknumvZBWt0yorOOR4kiMKlaeAFcywdnXEbovCh2KuxV2KuxVi/nqRLG2t9Wdwkds/&#xA;pzVNBwk7/QVGaftfSyyREoc49HM0mSIuMuqC8ma7ptxYXWufWVa3nlaCEAmhEBox3/yieg6b4ex9&#xA;HOIMpfVLox12eEQBew6sutbyK5hSRQV9QVUMCD9FaZtzsacSJsWFfFLsVdirsVdirsVUjd2wi9US&#xA;K0ZBYMp5AgdSKYLCaYvF5w/TSTSaCxmsrcos8yxyCYl619JJURTx23NR1rSgrDitNILyp5k9LVdb&#xA;iv1YtPdRXBlC0K0soInDxirfA0NCQOtahcEJbn8dGUxsPx1ZxFLFNGssTh43FVdTUEZa1sR/MPXt&#xA;T0aG1mtbxLKORvT9SZAImlY/ArTEMkff+8ovvXMbUCe3AaSIk8kLo+l6X+nYLS8Jv7xrf6zNcPIH&#xA;jeSQBmIA2YfF8Ptvmuhp4HUESHF6b+LlxnOOKwerEvNdnpb+Sr/V47ULHDcejcfEfXYHgUVJDXig&#xA;9Q1FN6L4ZRoTxYzKAoCVfdX3+928cR8eMJH6o3t8f1PRPy+0nTtP8rWctkjINSjiv5+ZUn1JoU2A&#xA;RURQqKqgKoFB0ze4o1F02symeQ302+TI8scV2KuxV2KuxVQuLn0wwReTgdD0FfxyMiQNkgMJ81aj&#xA;d3v+49kkV2/eKq1VCB0HIUD7/sipr22rmknqM8pGMwBHu611rvcyOH08Q6ff7v1seXSbjUrdJYni&#xA;iW2kMCW5ZYzI7MqheT8qKu53FWYbZk4CDknKIqMiKHLkN9mIhwxjGR9VGzz9yUX/AJmt4vM1j5fh&#xA;052+oq9jM0JVVkmEkDwyLUTtKI1SThz+L4jQq24y5SjEVI2Cf07NeLj5jYj39272nR4JINNt4JHR&#xA;2iXhzjUqpC7Ciszkbf5R+eXwjQADVORkSTzKMyTF2KuxV2KqdzcwWsD3Fw4jhjFXdugHiT2GAmkg&#xA;Wxnz+bK68sXdvfK/1GdQrvER6i1Pwla1qa4YwE9mvJkMNwLY35R0nTNIsbKPTbeW+sVBNubmiTHk&#xA;7NI6rWhoxPUfKgFTMcUY0Ds1nw5zsj1dLTW61/QNCgLvdG3W7lDxQyOFkldiFIk9fZQTtyanzplc&#xA;skQPx+P0NoxyJ57fj8d6deW/M1jql3e2KX9tdX1oQ01valpBCjVChpT8Lsab06HbBEtkgn+SYuxV&#xA;2KuxV2KsA80aVc6NrLa1p9nLHZz1e9nsiZFV/hq9xZll5V47ywsGpXkD1yjLHlt+Px3OVgEZAgnf&#xA;uPX4/rFIF007zEtxBp93c6WHdmt7mwmVPrkbD4pngj+GTkOrU59K+GVDIbr8ft+HyZ5NOYxEuffs&#xA;dj3JaljLoMdrc61dySQpJ6UUxWRraM0PEyM4Lv1XiZCF7b0yZJrZopPNN1fX7u+Y6RK8tNvSkIlj&#xA;PKhEkrA8FQ9gGVyN15UII00pkniFe/8AX1+QHc2ajHjjEUbl5cvd3s51XTYdS0+exmZ0inQozIQD&#xA;RhToQVPyYEZkTjxAhxgaYLo/l/UvJ2qrJ6fraHR/UntYebAEGimAVeIcjyJiJTanEZjYsUoSs+rz&#xA;6/H9jbx8Xp/Sh/zB8uT6Z+Weq2duZL6Se4ScCKI8gCUWnFS/Th1zGw6LwMRiDxXK/u/U7XT6wZdR&#xA;GR9NRrn72beUIZoPKeiwzxtFNFYWqSxOCrqywqGVlO4IPUZsocg6nObnIjvKbZJqdirsVdirsVWv&#xA;GjijCtOh7j5HFUgvvLl891JeQzxzXbkR2zXCkJbRkHk6qn949ad1+Y74sdKBMzJuXTyHk3HL6eEb&#xA;fpKS3P5ZNdXb3V1qU0spVlEiExu3qKA/KhCheXL4EC7faZt6iGkELMT6z/FQLCREiOKyB0s7so0/&#xA;QLC1htlaGJpLaNYo3WNEACrTYKFArvsAB7ZkRhXPcplkO4G0e5M8m1uxV2KuxV2KuxVKrnQkU+pY&#xA;FYSCW+rOKwE7fZXrEduqbb1KscjRHLZJqX1C0PBpuqz1jamm2oJ9T0mEk8h3BKvTiimikGlSOynC&#xA;SZc0RjGPJDt+XHk+S+lvJ7ATzSoqfvWZwvEU5CprzI6uSWptWmQhjEZWOaZEkUU40fRdK0axSx0u&#xA;1jtLWP7McYpU0pyYndm23JNcsAQjcVdirsVdirsVcyqwIYAg9QdxiqQap5Rs7iNzYs1hctJ6v1i2&#xA;okoYmrlWIO71PLx7nKJ4BLlsXKwaqWM7gSHceX4HRE2OgW8Ub+sA5mFJwwBMlRQ86bGvgNsljwxh&#xA;yHNqyZTLmmFnY2VjbJbWVvHa20deEEKLGi1NTRVAA3y1qf/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:29a5291a-5e70-8b4b-9eaf-8d6f8563afe8</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:29a5291a-5e70-8b4b-9eaf-8d6f8563afe8</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:70032a24-6e4e-43d1-9de7-9c2301eacf5c</stRef:instanceID>
            <stRef:documentID>xmp.did:411f7e51-2974-8a42-a607-b0e6505c2e8b</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:144F1319E84EEA11B323A4278262D9AD</stEvt:instanceID>
                  <stEvt:when>2020-02-14T10:08:54+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:15136D65BB5AEA11BBC8FFC4AF564C39</stEvt:instanceID>
                  <stEvt:when>2020-02-29T11:52:21+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:031fe34c-3e36-cd4f-a0de-ebaf3f3c076e</stEvt:instanceID>
                  <stEvt:when>2021-04-24T00:37:17+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:29a5291a-5e70-8b4b-9eaf-8d6f8563afe8</stEvt:instanceID>
                  <stEvt:when>2021-04-24T18:46:40+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
385.142 154.941 mo
382.207 156.632 li
270.994 92.4247 li
273.929 90.7252 li
385.142 154.941 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.694118 .768627 .952941 rgb
f
385.142 165.391 mo
382.207 167.076 li
382.207 156.632 li
385.142 154.941 li
385.142 165.391 li
cp
.337255 .423529 .631373 rgb
f
385.142 264.729 mo
382.207 266.433 li
382.207 167.076 li
385.142 165.391 li
385.142 264.729 li
cp
.772549 .772549 .772549 rgb
f
382.207 156.632 mo
270.994 92.4247 li
270.994 102.874 li
382.207 167.076 li
382.207 156.632 li
cp
.505882 .635294 .952941 rgb
f
360.148 149.202 mo
358.509 146.364 li
356.187 145.026 li
354.552 145.979 li
354.552 148.658 li
356.187 151.491 li
358.509 152.829 li
360.148 151.89 li
360.148 149.202 li
cp
.662745 .717647 .243137 rgb
f
358.509 146.364 mo
356.187 145.026 li
357.413 144.321 li
359.734 145.658 li
358.82 146.396 li
358.509 146.364 li
cp
.819608 .854902 .341176 rgb
f
360.148 149.202 mo
358.509 146.364 li
359.734 145.658 li
361.374 148.505 li
360.445 149.345 li
360.148 149.202 li
cp
.811765 .780392 .266667 rgb
f
360.148 151.89 mo
360.148 149.202 li
361.374 148.505 li
361.374 151.18 li
360.148 151.89 li
cp
.533333 .584314 .25098 rgb
f
367.913 153.687 mo
366.273 150.85 li
363.961 149.513 li
362.321 150.455 li
362.321 153.13 li
363.961 155.972 li
366.273 157.324 li
367.913 156.367 li
367.913 153.687 li
cp
.466667 .780392 .843137 rgb
f
366.273 150.85 mo
363.961 149.513 li
365.173 148.802 li
367.504 150.135 li
366.58 150.883 li
366.273 150.85 li
cp
.694118 .905882 .952941 rgb
f
367.913 153.687 mo
366.273 150.85 li
367.504 150.135 li
369.139 152.982 li
368.219 153.822 li
367.913 153.687 li
cp
.505882 .635294 .952941 rgb
f
367.913 156.367 mo
367.913 153.687 li
369.139 152.982 li
369.139 155.661 li
367.913 156.367 li
cp
.34902 .584314 .631373 rgb
f
375.686 158.174 mo
374.043 155.322 li
371.725 153.994 li
370.081 154.941 li
370.081 157.626 li
371.725 160.454 li
374.043 161.801 li
375.686 160.844 li
375.686 158.174 li
cp
.552941 .168627 .137255 rgb
f
374.043 155.322 mo
371.725 153.994 li
372.942 153.284 li
375.268 154.635 li
374.344 155.373 li
374.043 155.322 li
cp
.933333 .345098 .305882 rgb
f
375.686 158.174 mo
374.043 155.322 li
375.268 154.635 li
376.908 157.468 li
375.975 158.299 li
375.686 158.174 li
cp
.701961 .137255 .0980392 rgb
f
375.686 160.844 mo
375.686 158.174 li
376.908 157.468 li
376.908 160.142 li
375.686 160.844 li
cp
.552941 .109804 .0784314 rgb
f
270.994 202.217 mo
382.207 266.433 li
382.207 167.076 li
270.994 102.874 li
270.994 202.217 li
cp
.980392 .968627 .952941 rgb
f
375.872 240.901 mo
277.319 184.003 li
277.319 111.697 li
375.872 168.599 li
375.872 240.901 li
cp
.513726 .752941 .74902 rgb
f
304.119 172.147 mo
302.703 169.667 li
300.673 168.502 li
299.238 169.333 li
299.238 171.664 li
300.673 174.144 li
302.703 175.305 li
304.119 174.488 li
304.119 172.147 li
cp
.933333 .345098 .305882 rgb
f
320.563 179.782 mo
319.123 177.297 li
317.103 176.127 li
315.668 176.954 li
315.668 179.303 li
317.103 181.779 li
319.123 182.945 li
320.563 182.122 li
320.563 179.782 li
cp
f
341.762 181.723 mo
340.328 179.248 li
338.293 178.082 li
336.872 178.904 li
336.872 181.235 li
338.293 183.715 li
340.328 184.886 li
341.762 184.059 li
341.762 181.723 li
cp
f
348.561 176.754 mo
347.127 174.279 li
345.102 173.113 li
343.671 173.935 li
343.671 176.276 li
345.102 178.76 li
347.127 179.926 li
348.561 179.095 li
348.561 176.754 li
cp
f
365.841 175.56 mo
364.068 172.487 li
361.551 171.023 li
359.767 172.059 li
359.767 174.962 li
361.551 178.054 li
364.068 179.494 li
365.841 178.468 li
365.841 175.56 li
cp
f
282.761 183.488 mo
281.962 182.09 li
301.444 171.144 li
317.832 178.779 li
339.013 180.739 li
345.919 176.011 li
362.521 174.525 li
363.092 175.993 li
346.555 177.451 li
339.566 182.206 li
318.023 180.186 li
301.955 172.695 li
282.761 183.488 li
cp
f
296.025 140.55 mo
296.025 146.276 li
299.526 152.341 li
301.862 153.687 li
301.862 158.684 li
297.738 156.307 li
291.696 145.849 li
291.696 135.985 li
296.025 140.55 li
cp
.87451 .345098 .254902 rgb
f
291.696 135.985 mo
297.738 132.497 li
306.283 137.424 li
304.481 141.391 li
299.526 138.539 li
296.025 140.55 li
291.696 135.985 li
cp
.952941 .529412 .105882 rgb
f
301.862 153.687 mo
304.481 155.197 li
307.978 153.177 li
307.978 147.465 li
304.481 141.391 li
306.283 137.424 li
312.325 147.897 li
312.325 157.751 li
306.283 161.239 li
301.862 158.684 li
301.862 153.687 li
cp
.952941 .741176 .313726 rgb
f
303.469 143.624 mo
300.543 141.929 li
298.463 143.127 li
298.463 146.508 li
300.543 150.126 li
303.469 151.816 li
305.554 150.613 li
305.554 147.223 li
303.469 143.624 li
cp
f
368.795 228.84 mo
341.489 213.065 li
341.489 212.698 li
368.795 228.46 li
368.795 228.84 li
cp
.243137 .501961 .611765 rgb
f
347.456 208.69 mo
342.696 205.936 li
342.696 213.39 li
347.456 216.144 li
347.456 208.69 li
cp
.952941 .882353 .454902 rgb
f
353.902 204.966 mo
349.151 202.217 li
349.151 217.11 li
353.902 219.859 li
353.902 204.966 li
cp
.952941 .741176 .313726 rgb
f
360.348 201.241 mo
355.597 198.497 li
355.597 220.839 li
360.348 223.588 li
360.348 201.241 li
cp
.945098 .654902 .309804 rgb
f
366.798 191.336 mo
362.052 188.582 li
362.052 224.563 li
366.798 227.308 li
366.798 191.336 li
cp
.866667 .301961 .321569 rgb
f
282.715 182.48 mo
282.715 118.18 li
281.638 117.562 li
281.638 183.093 li
371.614 235.04 li
371.614 233.795 li
282.715 182.48 li
cp
.243137 .501961 .611765 rgb
f
374.874 246.372 mo
278.327 190.63 li
277.319 191.215 li
277.319 192.474 li
278.327 194.192 li
374.874 249.933 li
375.872 249.362 li
375.872 248.103 li
374.874 246.372 li
cp
.772549 .772549 .772549 rgb
f
350.66 238.477 mo
278.327 196.714 li
277.319 197.303 li
277.319 198.562 li
278.327 200.276 li
350.66 242.043 li
351.664 241.462 li
351.664 240.218 li
350.66 238.477 li
cp
f
305.749 339.44 mo
264.856 315.829 li
265.199 315.631 li
265.198 315.719 li
289.95 301.336 li
330.844 324.947 li
305.749 339.44 li
175.821 264.42 mo
142.454 245.155 li
167.545 230.665 li
200.883 249.913 li
175.821 264.42 li
.698039 .698039 .698039 rgb
f
260.215 318.515 mo
257.8 312.417 li
296.628 293.493 li
296.628 297.441 li
260.215 318.515 li
.772549 .772549 .772549 rgb
f
260.215 318.515 mo
174.59 269.076 li
174.59 265.133 li
222.181 281.688 li
260.215 314.563 li
260.215 318.515 li
.909804 .890196 .866667 rgb
f
260.215 314.563 mo
174.59 265.133 li
211.003 244.054 li
296.628 293.493 li
260.215 314.563 li
.980392 .968627 .952941 rgb
f
272.577 285.886 mo
268.212 288.403 li
207.883 225.427 li
212.238 222.91 li
260.35 250.686 li
272.577 285.886 li
.772549 .772549 .772549 rgb
f
268.212 288.403 mo
220.105 260.628 li
207.883 225.427 li
255.989 253.203 li
268.212 288.403 li
.909804 .890196 .866667 rgb
f
289.95 301.336 mo
289.924 301.321 li
296.362 297.595 li
296.375 297.603 li
289.95 301.336 li
.698039 .698039 .698039 rgb
f
265.198 315.719 mo
265.199 315.631 li
289.924 301.321 li
289.95 301.336 li
265.198 315.719 li
.486275 .486275 .486275 rgb
f
265.199 315.631 mo
265.226 311.679 li
265.212 311.671 li
292.947 295.623 li
296.362 297.595 li
289.924 301.321 li
265.199 315.631 li
.541176 .541176 .541176 rgb
f
265.212 311.671 mo
179.596 262.235 li
207.32 246.188 li
217.04 251.8 li
220.105 260.628 li
268.212 288.403 li
272.577 285.886 li
271.698 283.356 li
292.947 295.623 li
265.212 311.671 li
.686274 .67451 .666667 rgb
f
268.212 288.403 mo
268.212 288.403 li
265.146 279.573 li
271.698 283.356 li
272.577 285.886 li
268.212 288.403 li
.541176 .541176 .541176 rgb
f
268.212 288.403 mo
220.105 260.628 li
217.04 251.8 li
265.146 279.573 li
268.212 288.403 li
.635294 .619608 .603922 rgb
f
312.887 275.368 mo
305.73 279.501 li
142.459 185.229 li
149.61 181.101 li
312.887 275.368 li
.909804 .890196 .866667 rgb
f
312.887 298.876 mo
305.73 303.004 li
300.808 289.184 li
305.73 279.501 li
312.887 275.368 li
312.887 298.876 li
cp
.203922 .168627 .156863 rgb
f
305.73 279.501 mo
142.459 185.229 li
142.459 208.742 li
305.73 303.004 li
305.73 279.501 li
.360784 .301961 .278431 rgb
f
312.887 170.229 mo
305.73 174.367 li
142.459 80.0997 li
149.61 75.9716 li
312.887 170.229 li
cp
.980392 .968627 .952941 rgb
f
312.887 275.368 mo
305.73 279.501 li
305.73 174.367 li
312.887 170.229 li
312.887 275.368 li
cp
.772549 .772549 .772549 rgb
f
305.73 174.367 mo
142.459 80.0997 li
142.459 185.234 li
305.73 279.501 li
305.73 174.367 li
.909804 .890196 .866667 rgb
f
303.246 273.719 mo
303.246 275.187 li
144.948 183.803 li
144.948 84.4095 li
146.23 85.1433 li
146.23 183.051 li
303.246 273.719 li
.592157 .564706 .545098 rgb
f
303.246 175.793 mo
303.246 273.719 li
146.23 183.051 li
146.23 85.1433 li
303.246 175.793 li
.513726 .752941 .74902 rgb
f
157.746 180.112 mo
258.065 238.031 li
258.065 166.022 li
157.746 108.103 li
157.746 180.112 li
.980392 .968627 .952941 rgb
f
258.218 237.295 mo
258.065 237.206 li
258.065 231.093 li
258.144 231.139 li
258.144 230.963 li
258.065 230.917 li
258.065 223.863 li
258.144 223.908 li
258.144 223.732 li
258.065 223.686 li
258.065 216.632 li
258.144 216.678 li
258.144 216.497 li
258.065 216.451 li
258.065 209.402 li
258.144 209.447 li
258.144 209.266 li
258.065 209.221 li
258.065 202.176 li
258.144 202.221 li
258.144 202.035 li
258.065 201.99 li
258.065 194.941 li
258.144 194.986 li
258.144 194.805 li
258.065 194.759 li
258.065 187.705 li
258.144 187.751 li
258.144 187.574 li
258.065 187.529 li
258.065 180.479 li
258.144 180.525 li
258.144 180.344 li
258.065 180.298 li
258.065 173.253 li
258.144 173.299 li
258.144 173.113 li
258.065 173.068 li
258.065 166.022 li
251.958 162.496 li
251.958 162.409 li
251.805 162.316 li
251.805 162.407 li
245.694 158.879 li
245.694 158.791 li
245.536 158.698 li
245.536 158.788 li
239.434 155.265 li
239.434 155.174 li
239.276 155.086 li
239.276 155.174 li
233.174 151.65 li
233.174 151.556 li
233.016 151.468 li
233.016 151.559 li
226.914 148.036 li
226.914 147.938 li
226.756 147.855 li
226.756 147.945 li
220.654 144.422 li
220.654 144.325 li
220.496 144.242 li
220.496 144.331 li
214.384 140.802 li
214.384 140.712 li
214.226 140.624 li
214.226 140.711 li
208.129 137.19 li
208.129 137.099 li
207.971 137.007 li
207.971 137.099 li
201.864 133.573 li
201.864 133.487 li
201.706 133.389 li
201.706 133.482 li
195.599 129.956 li
195.599 129.869 li
195.446 129.776 li
195.446 129.868 li
189.339 126.342 li
189.339 126.251 li
189.181 126.163 li
189.181 126.251 li
183.075 122.725 li
183.075 122.638 li
182.921 122.545 li
182.921 122.636 li
176.815 119.11 li
176.815 119.021 li
176.657 118.928 li
176.657 119.019 li
170.555 115.496 li
170.555 115.408 li
170.397 115.31 li
170.397 115.405 li
164.295 111.882 li
164.295 111.79 li
164.137 111.697 li
164.137 111.791 li
158.337 108.442 li
158.337 108.261 li
258.218 165.929 li
258.218 237.295 li
.431373 .678431 .705882 rgb
f
251.958 233.68 mo
251.805 233.592 li
251.805 227.479 li
251.958 227.568 li
251.958 233.68 li
251.958 227.391 mo
251.805 227.302 li
251.805 220.248 li
251.958 220.337 li
251.958 227.391 li
251.958 220.16 mo
251.805 220.072 li
251.805 213.018 li
251.958 213.107 li
251.958 220.16 li
251.958 212.926 mo
251.805 212.837 li
251.805 206.58 li
251.958 206.651 li
251.958 212.926 li
251.958 205.196 mo
251.805 205.126 li
251.805 198.561 li
251.958 198.65 li
251.958 205.196 li
251.958 198.464 mo
251.805 198.376 li
251.805 191.326 li
251.958 191.415 li
251.958 198.464 li
251.958 191.234 mo
251.805 191.145 li
251.805 184.406 li
251.958 184.441 li
251.958 191.234 li
251.958 182.926 mo
251.805 182.891 li
251.805 176.865 li
251.958 176.954 li
251.958 182.926 li
251.958 176.773 mo
251.805 176.684 li
251.805 170.996 li
251.958 171.032 li
251.958 176.773 li
.756863 .827451 .85098 rgb
f
251.958 162.496 mo
251.805 162.408 li
251.805 162.407 li
251.805 162.316 li
251.958 162.409 li
251.958 162.496 li
251.958 162.496 li
.431373 .678431 .705882 rgb
f
251.958 169.525 mo
251.906 169.512 li
251.805 169.454 li
251.805 162.408 li
251.958 162.496 li
251.958 169.525 li
.756863 .827451 .85098 rgb
f
245.694 230.064 mo
245.536 229.972 li
245.536 223.86 li
245.694 223.951 li
245.694 230.064 li
245.694 223.774 mo
245.536 223.683 li
245.536 216.629 li
245.694 216.72 li
245.694 223.774 li
245.694 216.543 mo
245.536 216.452 li
245.536 209.399 li
245.694 209.49 li
245.694 216.543 li
245.694 209.309 mo
245.536 209.218 li
245.536 204.592 li
245.694 204.521 li
245.694 209.309 li
245.536 202.649 mo
245.536 202.168 li
245.694 202.259 li
245.694 202.578 li
245.536 202.649 li
245.694 202.078 mo
245.536 201.987 li
245.536 194.942 li
245.694 195.033 li
245.694 202.078 li
245.694 194.847 mo
245.536 194.756 li
245.536 187.707 li
245.694 187.799 li
245.694 194.847 li
245.694 187.617 mo
245.536 187.526 li
245.536 182.99 li
245.694 183.025 li
245.694 187.617 li
245.694 181.511 mo
245.536 181.476 li
245.536 180.472 li
245.694 180.563 li
245.694 181.511 li
245.694 180.386 mo
245.536 180.295 li
245.536 173.246 li
245.694 173.337 li
245.694 180.386 li
245.694 173.156 mo
245.536 173.065 li
245.536 169.508 li
245.694 169.546 li
245.694 173.156 li
245.694 168.039 mo
245.536 168.002 li
245.536 166.019 li
245.694 166.11 li
245.694 168.039 li
f
245.694 158.879 mo
245.536 158.788 li
245.536 158.788 li
245.536 158.698 li
245.694 158.791 li
245.694 158.879 li
245.694 158.879 li
.431373 .678431 .705882 rgb
f
245.694 165.926 mo
245.536 165.835 li
245.536 158.788 li
245.694 158.879 li
245.694 165.926 li
.756863 .827451 .85098 rgb
f
239.434 226.449 mo
239.276 226.358 li
239.276 220.246 li
239.434 220.337 li
239.434 226.449 li
239.434 220.16 mo
239.276 220.068 li
239.276 213.015 li
239.434 213.106 li
239.434 220.16 li
239.434 212.929 mo
239.276 212.838 li
239.276 207.439 li
239.434 207.367 li
239.434 212.929 li
239.276 205.495 mo
239.276 198.554 li
239.434 198.645 li
239.434 205.423 li
239.276 205.495 li
239.434 198.464 mo
239.276 198.373 li
239.276 191.327 li
239.434 191.418 li
239.434 198.464 li
239.434 191.233 mo
239.276 191.142 li
239.276 184.603 li
239.434 184.535 li
239.434 191.233 li
239.276 182.684 mo
239.276 176.858 li
239.434 176.949 li
239.434 182.616 li
239.276 182.684 li
239.434 176.772 mo
239.276 176.681 li
239.276 169.632 li
239.434 169.723 li
239.434 176.772 li
239.434 169.542 mo
239.276 169.451 li
239.276 168.022 li
239.434 168.06 li
239.434 169.542 li
239.434 166.555 mo
239.276 166.517 li
239.276 162.405 li
239.434 162.496 li
239.434 166.555 li
f
239.434 155.265 mo
239.276 155.174 li
239.276 155.174 li
239.276 155.086 li
239.434 155.174 li
239.434 155.265 li
239.434 155.265 li
.431373 .678431 .705882 rgb
f
239.434 162.312 mo
239.276 162.221 li
239.276 155.174 li
239.434 155.265 li
239.434 162.312 li
.756863 .827451 .85098 rgb
f
233.174 222.835 mo
233.016 222.744 li
233.016 216.632 li
233.174 216.723 li
233.174 222.835 li
233.174 216.545 mo
233.016 216.454 li
233.016 209.401 li
233.174 209.492 li
233.174 216.545 li
233.174 209.315 mo
233.016 209.224 li
233.016 205.577 li
233.174 205.712 li
233.174 209.315 li
233.174 204.22 mo
233.016 204.085 li
233.016 202.17 li
233.174 202.262 li
233.174 204.22 li
233.174 202.082 mo
233.016 201.991 li
233.016 194.94 li
233.174 195.031 li
233.174 202.082 li
233.174 194.85 mo
233.016 194.759 li
233.016 187.713 li
233.174 187.804 li
233.174 194.85 li
233.174 187.619 mo
233.016 187.528 li
233.016 185.055 li
233.174 185.087 li
233.174 187.619 li
233.174 183.568 mo
233.016 183.535 li
233.016 180.48 li
233.174 180.571 li
233.174 183.568 li
233.174 180.389 mo
233.016 180.298 li
233.016 173.245 li
233.174 173.336 li
233.174 180.389 li
233.174 173.158 mo
233.016 173.067 li
233.016 167.211 li
233.174 167.175 li
233.174 173.158 li
233.016 165.451 mo
233.016 158.79 li
233.174 158.881 li
233.174 165.415 li
233.016 165.451 li
f
233.174 151.651 mo
233.016 151.56 li
233.016 151.559 li
233.016 151.468 li
233.174 151.556 li
233.174 151.65 li
233.174 151.651 li
.431373 .678431 .705882 rgb
f
233.174 158.698 mo
233.016 158.607 li
233.016 151.56 li
233.174 151.651 li
233.174 158.698 li
.756863 .827451 .85098 rgb
f
226.914 219.221 mo
226.756 219.13 li
226.756 213.017 li
226.914 213.109 li
226.914 219.221 li
226.914 212.931 mo
226.756 212.84 li
226.756 205.787 li
226.914 205.878 li
226.914 212.931 li
226.914 205.7 mo
226.756 205.609 li
226.756 200.212 li
226.914 200.347 li
226.914 205.7 li
226.914 198.857 mo
226.756 198.722 li
226.756 198.556 li
226.914 198.647 li
226.914 198.857 li
226.914 198.468 mo
226.756 198.377 li
226.756 191.326 li
226.914 191.417 li
226.914 198.468 li
226.914 191.236 mo
226.756 191.145 li
226.756 184.098 li
226.914 184.19 li
226.914 191.236 li
226.914 184.005 mo
226.756 183.914 li
226.756 183.771 li
226.914 183.804 li
226.914 184.005 li
226.914 182.284 mo
226.756 182.251 li
226.756 176.866 li
226.914 176.957 li
226.914 182.284 li
226.914 176.775 mo
226.756 176.683 li
226.756 169.631 li
226.914 169.722 li
226.914 176.775 li
226.914 169.544 mo
226.756 169.453 li
226.756 168.635 li
226.914 168.599 li
226.914 169.544 li
226.756 166.874 mo
226.756 162.404 li
226.914 162.495 li
226.914 166.838 li
226.756 166.874 li
226.914 162.315 mo
226.756 162.224 li
226.756 155.176 li
226.914 155.267 li
226.914 162.315 li
f
226.914 148.037 mo
226.756 147.945 li
226.756 147.945 li
226.756 147.855 li
226.914 147.938 li
226.914 148.036 li
226.914 148.037 li
.431373 .678431 .705882 rgb
f
226.914 155.084 mo
226.756 154.993 li
226.756 147.945 li
226.914 148.037 li
226.914 155.084 li
.756863 .827451 .85098 rgb
f
220.649 215.604 mo
220.496 215.516 li
220.496 209.403 li
220.649 209.492 li
220.649 215.604 li
220.649 209.314 mo
220.496 209.225 li
220.496 202.173 li
220.65 202.262 li
220.649 209.314 li
220.65 202.084 mo
220.496 201.995 li
220.496 197.274 li
220.65 197.275 li
220.65 202.084 li
220.65 195.661 mo
220.496 195.659 li
220.496 194.942 li
220.65 195.031 li
220.65 195.661 li
220.65 194.852 mo
220.496 194.763 li
220.496 187.712 li
220.651 187.801 li
220.65 194.852 li
220.651 187.62 mo
220.496 187.531 li
220.496 182.488 li
220.651 182.52 li
220.651 187.62 li
220.651 180.999 mo
220.496 180.967 li
220.496 180.484 li
220.651 180.574 li
220.651 180.999 li
220.651 180.39 mo
220.496 180.3 li
220.496 173.252 li
220.652 173.342 li
220.651 180.39 li
220.652 173.159 mo
220.496 173.069 li
220.496 170.06 li
220.652 170.024 li
220.652 173.159 li
220.496 168.296 mo
220.496 166.017 li
220.652 166.107 li
220.652 168.261 li
220.496 168.296 li
220.652 165.929 mo
220.496 165.839 li
220.496 158.789 li
220.653 158.88 li
220.652 165.929 li
220.653 158.701 mo
220.496 158.61 li
220.496 151.562 li
220.653 151.652 li
220.653 158.701 li
f
220.654 144.422 mo
220.496 144.331 li
220.496 144.331 li
220.496 144.242 li
220.654 144.325 li
220.654 144.422 li
220.654 144.422 li
.431373 .678431 .705882 rgb
f
220.653 151.47 mo
220.496 151.379 li
220.496 144.331 li
220.654 144.422 li
220.653 151.47 li
.756863 .827451 .85098 rgb
f
214.384 211.987 mo
214.226 211.896 li
214.226 205.784 li
214.384 205.875 li
214.384 211.987 li
214.384 205.697 mo
214.226 205.605 li
214.226 198.553 li
214.384 198.644 li
214.384 205.697 li
214.384 198.466 mo
214.226 198.375 li
214.226 197.22 li
214.384 197.221 li
214.384 198.466 li
214.384 195.606 mo
214.226 195.605 li
214.226 191.323 li
214.384 191.414 li
214.384 195.606 li
214.384 191.235 mo
214.226 191.144 li
214.226 184.092 li
214.384 184.183 li
214.384 191.235 li
214.384 184.002 mo
214.226 183.911 li
214.226 181.203 li
214.384 181.235 li
214.384 184.002 li
214.384 179.714 mo
214.226 179.681 li
214.226 176.864 li
214.384 176.955 li
214.384 179.714 li
214.384 176.771 mo
214.226 176.68 li
214.226 170.136 li
214.384 170.222 li
214.384 176.771 li
214.384 168.772 mo
214.226 168.686 li
214.226 162.398 li
214.384 162.489 li
214.384 168.772 li
214.384 162.31 mo
214.226 162.219 li
214.226 155.17 li
214.384 155.261 li
214.384 162.31 li
214.384 155.082 mo
214.226 154.991 li
214.226 147.942 li
214.384 148.033 li
214.384 155.082 li
f
214.384 140.803 mo
214.226 140.712 li
214.226 140.711 li
214.226 140.624 li
214.384 140.712 li
214.384 140.802 li
214.384 140.803 li
.431373 .678431 .705882 rgb
f
214.384 147.851 mo
214.226 147.76 li
214.226 140.712 li
214.384 140.803 li
214.384 147.851 li
.756863 .827451 .85098 rgb
f
208.129 208.376 mo
207.971 208.285 li
207.971 202.172 li
208.129 202.264 li
208.129 208.376 li
208.129 202.085 mo
207.971 201.994 li
207.971 197.165 li
208.129 197.167 li
208.129 202.085 li
208.129 195.552 mo
207.971 195.55 li
207.971 194.942 li
208.129 195.033 li
208.129 195.552 li
208.129 194.854 mo
207.971 194.763 li
207.971 187.711 li
208.129 187.802 li
208.129 194.854 li
208.129 187.624 mo
207.971 187.533 li
207.971 180.481 li
208.129 180.572 li
208.129 187.624 li
208.129 180.391 mo
207.971 180.3 li
207.971 179.921 li
208.129 179.953 li
208.129 180.391 li
208.129 178.431 mo
207.971 178.398 li
207.971 173.253 li
208.129 173.344 li
208.129 178.431 li
208.129 173.16 mo
207.971 173.069 li
207.971 166.732 li
208.129 166.818 li
208.129 173.16 li
208.129 165.367 mo
207.971 165.281 li
207.971 158.787 li
208.129 158.878 li
208.129 165.367 li
208.129 158.699 mo
207.971 158.608 li
207.971 151.558 li
208.129 151.65 li
208.129 158.699 li
208.129 151.471 mo
207.971 151.38 li
207.971 144.33 li
208.129 144.421 li
208.129 151.471 li
f
208.129 137.191 mo
207.971 137.1 li
207.971 137.099 li
207.971 137.007 li
208.129 137.099 li
208.129 137.19 li
208.129 137.191 li
.431373 .678431 .705882 rgb
f
208.129 144.24 mo
207.971 144.149 li
207.971 137.1 li
208.129 137.191 li
208.129 144.24 li
.756863 .827451 .85098 rgb
f
201.864 204.759 mo
201.706 204.668 li
201.706 198.556 li
201.864 198.647 li
201.864 204.759 li
201.864 198.468 mo
201.706 198.377 li
201.706 196.399 li
201.864 196.549 li
201.864 198.468 li
201.864 195.03 mo
201.706 194.88 li
201.706 191.325 li
201.864 191.416 li
201.864 195.03 li
201.864 191.237 mo
201.706 191.146 li
201.706 184.094 li
201.864 184.186 li
201.864 191.237 li
201.864 184.007 mo
201.706 183.916 li
201.706 176.864 li
201.864 176.955 li
201.864 184.007 li
201.864 175.369 mo
201.706 175.248 li
201.706 169.635 li
201.864 169.727 li
201.864 175.369 li
201.864 169.543 mo
201.706 169.452 li
201.706 163.323 li
201.864 163.409 li
201.864 169.543 li
201.864 161.957 mo
201.706 161.871 li
201.706 155.17 li
201.864 155.261 li
201.864 161.957 li
201.864 155.082 mo
201.706 154.991 li
201.706 147.942 li
201.864 148.033 li
201.864 155.082 li
201.864 147.854 mo
201.706 147.763 li
201.706 140.713 li
201.864 140.804 li
201.864 147.854 li
f
201.864 133.574 mo
201.706 133.483 li
201.706 133.482 li
201.706 133.389 li
201.864 133.487 li
201.864 133.573 li
201.864 133.574 li
.431373 .678431 .705882 rgb
f
201.864 140.624 mo
201.706 140.533 li
201.706 133.483 li
201.864 133.574 li
201.864 140.624 li
.756863 .827451 .85098 rgb
f
195.599 201.142 mo
195.446 201.054 li
195.446 194.941 li
195.599 195.03 li
195.599 201.142 li
195.599 194.851 mo
195.446 194.762 li
195.446 190.458 li
195.599 190.603 li
195.599 194.851 li
195.599 189.084 mo
195.446 188.939 li
195.446 187.711 li
195.599 187.799 li
195.599 189.084 li
195.599 187.62 mo
195.446 187.532 li
195.446 180.48 li
195.599 180.569 li
195.599 187.62 li
195.599 180.391 mo
195.446 180.302 li
195.446 173.25 li
195.599 173.338 li
195.599 180.391 li
195.599 173.157 mo
195.446 173.069 li
195.446 171.911 li
195.599 172.028 li
195.599 173.157 li
195.599 170.563 mo
195.446 170.445 li
195.446 166.021 li
195.599 166.109 li
195.599 170.563 li
195.599 165.926 mo
195.446 165.838 li
195.446 159.916 li
195.599 160 li
195.599 165.926 li
195.599 158.547 mo
195.446 158.463 li
195.446 151.556 li
195.599 151.645 li
195.599 158.547 li
195.599 151.465 mo
195.446 151.377 li
195.446 144.328 li
195.599 144.416 li
195.599 151.465 li
195.599 144.238 mo
195.446 144.149 li
195.446 137.099 li
195.599 137.187 li
195.599 144.238 li
f
195.599 129.957 mo
195.446 129.869 li
195.446 129.868 li
195.446 129.776 li
195.599 129.869 li
195.599 129.956 li
195.599 129.957 li
.431373 .678431 .705882 rgb
f
195.599 137.007 mo
195.446 136.919 li
195.446 129.869 li
195.599 129.957 li
195.599 137.007 li
.756863 .827451 .85098 rgb
f
189.339 197.528 mo
189.186 197.439 li
189.186 191.327 li
189.339 191.416 li
189.339 197.528 li
189.339 191.236 mo
189.186 191.148 li
189.185 185.04 li
189.339 185.094 li
189.339 191.236 li
189.339 183.619 mo
189.185 183.565 li
189.185 176.865 li
189.339 176.955 li
189.339 183.619 li
189.339 176.777 mo
189.185 176.688 li
189.184 169.635 li
189.339 169.724 li
189.339 176.777 li
189.339 169.543 mo
189.184 169.453 li
189.184 168.069 li
189.339 168.127 li
189.339 169.543 li
189.339 166.653 mo
189.184 166.596 li
189.184 162.405 li
189.339 162.495 li
189.339 166.653 li
189.339 162.312 mo
189.184 162.223 li
189.184 157.891 li
189.339 157.931 li
189.339 162.312 li
189.339 156.441 mo
189.183 156.401 li
189.183 155.176 li
189.339 155.266 li
189.339 156.441 li
189.339 155.082 mo
189.183 154.992 li
189.183 147.941 li
189.339 148.031 li
189.339 155.082 li
189.339 147.851 mo
189.183 147.761 li
189.182 140.711 li
189.339 140.802 li
189.339 147.851 li
189.339 140.624 mo
189.182 140.533 li
189.182 133.482 li
189.339 133.573 li
189.339 140.624 li
f
189.339 126.343 mo
189.181 126.252 li
189.181 126.251 li
189.181 126.163 li
189.339 126.251 li
189.339 126.342 li
189.339 126.343 li
.431373 .678431 .705882 rgb
f
189.339 133.393 mo
189.182 133.302 li
189.181 126.252 li
189.339 126.343 li
189.339 133.393 li
.756863 .827451 .85098 rgb
f
183.075 193.911 mo
182.921 193.823 li
182.921 187.711 li
183.075 187.799 li
183.075 193.911 li
183.075 187.619 mo
182.921 187.531 li
182.921 182.849 li
183.075 182.902 li
183.075 187.619 li
183.075 181.428 mo
182.921 181.375 li
182.921 180.48 li
183.075 180.568 li
183.075 181.428 li
183.075 180.389 mo
182.921 180.3 li
182.921 173.249 li
183.075 173.338 li
183.075 180.389 li
183.075 173.16 mo
182.921 173.072 li
182.921 166.019 li
183.075 166.107 li
183.075 173.16 li
183.075 165.926 mo
182.921 165.838 li
182.921 165.746 li
183.075 165.802 li
183.075 165.926 li
183.075 164.33 mo
182.921 164.274 li
182.921 158.789 li
183.075 158.878 li
183.075 164.33 li
183.075 158.695 mo
182.921 158.607 li
182.921 156.261 li
183.075 156.3 li
183.075 158.695 li
183.075 154.804 mo
182.921 154.764 li
182.921 151.561 li
183.075 151.65 li
183.075 154.804 li
183.075 151.465 mo
182.921 151.377 li
182.921 144.326 li
183.075 144.414 li
183.075 151.465 li
183.075 144.234 mo
182.921 144.146 li
182.921 137.097 li
183.075 137.185 li
183.075 144.234 li
183.075 137.007 mo
182.921 136.919 li
182.921 129.867 li
183.075 129.955 li
183.075 137.007 li
f
183.075 122.726 mo
182.921 122.638 li
182.921 122.636 li
182.921 122.545 li
183.075 122.638 li
183.075 122.725 li
183.075 122.726 li
.431373 .678431 .705882 rgb
f
183.075 129.777 mo
182.921 129.688 li
182.921 122.638 li
183.075 122.726 li
183.075 129.777 li
.756863 .827451 .85098 rgb
f
176.815 190.297 mo
176.657 190.206 li
176.657 184.094 li
176.815 184.185 li
176.815 190.297 li
176.815 184.005 mo
176.657 183.914 li
176.657 180.491 li
176.815 180.607 li
176.815 184.005 li
176.815 179.148 mo
176.657 179.032 li
176.657 176.863 li
176.815 176.954 li
176.815 179.148 li
176.815 176.774 mo
176.657 176.683 li
176.657 169.633 li
176.815 169.724 li
176.815 176.774 li
176.815 169.546 mo
176.657 169.455 li
176.657 163.421 li
176.815 163.48 li
176.815 169.546 li
176.815 162.009 mo
176.657 161.951 li
176.657 155.172 li
176.815 155.263 li
176.815 162.009 li
176.815 155.081 mo
176.657 154.99 li
176.657 152.826 li
176.815 152.96 li
176.815 155.081 li
176.815 151.478 mo
176.657 151.344 li
176.657 147.945 li
176.815 148.036 li
176.815 151.478 li
176.815 147.851 mo
176.657 147.76 li
176.657 140.709 li
176.815 140.801 li
176.815 147.851 li
176.815 140.62 mo
176.657 140.529 li
176.657 133.48 li
176.815 133.571 li
176.815 140.62 li
176.815 133.394 mo
176.657 133.302 li
176.657 126.25 li
176.815 126.341 li
176.815 133.394 li
f
176.815 119.112 mo
176.657 119.021 li
176.657 119.019 li
176.657 118.928 li
176.815 119.021 li
176.815 119.11 li
176.815 119.112 li
.431373 .678431 .705882 rgb
f
176.815 126.163 mo
176.657 126.072 li
176.657 119.021 li
176.815 119.112 li
176.815 126.163 li
.756863 .827451 .85098 rgb
f
170.555 186.683 mo
170.397 186.591 li
170.397 181.034 li
170.513 180.547 li
170.555 180.571 li
170.555 186.683 li
170.555 180.391 mo
170.551 180.389 li
170.555 180.374 li
170.555 180.391 li
170.555 146.169 mo
170.397 146.035 li
170.397 144.331 li
170.555 144.422 li
170.555 146.169 li
170.555 144.237 mo
170.397 144.146 li
170.397 137.096 li
170.555 137.187 li
170.555 144.237 li
170.555 137.006 mo
170.397 136.915 li
170.397 129.866 li
170.555 129.957 li
170.555 137.006 li
170.555 129.78 mo
170.397 129.689 li
170.397 122.636 li
170.555 122.727 li
170.555 129.78 li
f
170.555 115.498 mo
170.397 115.406 li
170.397 115.405 li
170.397 115.31 li
170.555 115.408 li
170.555 115.496 li
170.555 115.498 li
.431373 .678431 .705882 rgb
f
170.555 122.549 mo
170.397 122.458 li
170.397 115.406 li
170.555 115.498 li
170.555 122.549 li
.756863 .827451 .85098 rgb
f
164.295 137.895 mo
164.137 137.891 li
164.137 133.482 li
164.295 133.573 li
164.295 137.895 li
164.295 133.392 mo
164.137 133.301 li
164.137 126.252 li
164.295 126.343 li
164.295 133.392 li
164.295 126.166 mo
164.137 126.075 li
164.137 119.021 li
164.295 119.112 li
164.295 126.166 li
f
164.295 111.883 mo
164.137 111.792 li
164.137 111.791 li
164.137 111.697 li
164.295 111.79 li
164.295 111.882 li
164.295 111.883 li
.431373 .678431 .705882 rgb
f
164.295 118.935 mo
164.137 118.844 li
164.137 111.792 li
164.295 111.883 li
164.295 118.935 li
.756863 .827451 .85098 rgb
f
258.065 173.253 mo
254.455 171.169 li
254.407 170.956 li
258.065 173.068 li
258.065 173.253 li
251.906 169.512 mo
251.363 169.383 li
245.694 166.11 li
245.536 166.019 li
239.434 162.496 li
239.276 162.405 li
233.174 158.881 li
233.016 158.79 li
226.914 155.267 li
226.756 155.176 li
220.653 151.652 li
220.496 151.562 li
214.384 148.033 li
214.226 147.942 li
208.129 144.421 li
207.971 144.33 li
201.864 140.804 li
201.706 140.713 li
195.599 137.187 li
195.446 137.099 li
189.339 133.573 li
189.182 133.482 li
183.075 129.955 li
182.921 129.867 li
176.815 126.341 li
176.657 126.25 li
170.555 122.727 li
170.397 122.636 li
164.295 119.112 li
164.137 119.021 li
158.337 115.672 li
158.337 115.496 li
164.137 118.844 li
164.295 118.935 li
170.397 122.458 li
170.555 122.549 li
176.657 126.072 li
176.815 126.163 li
182.921 129.688 li
183.075 129.777 li
189.182 133.302 li
189.339 133.393 li
195.446 136.919 li
195.599 137.007 li
201.706 140.533 li
201.864 140.624 li
207.971 144.149 li
208.129 144.24 li
214.226 147.76 li
214.384 147.851 li
220.496 151.379 li
220.653 151.47 li
226.756 154.993 li
226.914 155.084 li
233.016 158.607 li
233.174 158.698 li
239.276 162.221 li
239.434 162.312 li
245.536 165.835 li
245.694 165.926 li
251.805 169.454 li
251.906 169.512 li
f
258.144 173.299 mo
258.065 173.253 li
258.065 173.068 li
258.144 173.113 li
258.144 173.299 li
.431373 .678431 .705882 rgb
f
258.065 180.479 mo
251.958 176.954 li
251.805 176.865 li
245.694 173.337 li
245.536 173.246 li
239.434 169.723 li
239.276 169.632 li
234.543 166.899 li
235.073 167.025 li
239.276 169.451 li
239.434 169.542 li
245.536 173.065 li
245.694 173.156 li
251.805 176.684 li
251.958 176.773 li
258.065 180.298 li
258.065 180.479 li
232.312 165.611 mo
226.914 162.495 li
226.756 162.404 li
220.653 158.88 li
220.496 158.789 li
214.384 155.261 li
214.226 155.17 li
208.129 151.65 li
207.971 151.558 li
201.864 148.033 li
201.706 147.942 li
195.599 144.416 li
195.446 144.328 li
189.339 140.802 li
189.182 140.711 li
183.075 137.185 li
182.921 137.097 li
176.815 133.571 li
176.657 133.48 li
170.555 129.957 li
170.397 129.866 li
164.295 126.343 li
164.137 126.252 li
158.337 122.903 li
158.337 122.727 li
164.137 126.075 li
164.295 126.166 li
170.397 129.689 li
170.555 129.78 li
176.657 133.302 li
176.815 133.394 li
182.921 136.919 li
183.075 137.007 li
189.182 140.533 li
189.339 140.624 li
195.446 144.149 li
195.599 144.238 li
201.706 147.763 li
201.864 147.854 li
207.971 151.38 li
208.129 151.471 li
214.226 154.991 li
214.384 155.082 li
220.496 158.61 li
220.653 158.701 li
226.756 162.224 li
226.914 162.315 li
232.535 165.56 li
232.312 165.611 li
.756863 .827451 .85098 rgb
f
258.144 180.525 mo
258.065 180.479 li
258.065 180.298 li
258.144 180.344 li
258.144 180.525 li
.431373 .678431 .705882 rgb
f
258.065 187.705 mo
252.701 184.609 li
253.204 184.722 li
258.065 187.529 li
258.065 187.705 li
248.894 182.234 mo
248.391 182.12 li
245.694 180.563 li
245.536 180.472 li
239.434 176.949 li
239.276 176.858 li
233.174 173.336 li
233.016 173.245 li
226.914 169.722 li
226.756 169.631 li
225.519 168.917 li
225.74 168.866 li
226.756 169.453 li
226.914 169.544 li
233.016 173.067 li
233.174 173.158 li
239.276 176.681 li
239.434 176.772 li
245.536 180.295 li
245.694 180.386 li
248.894 182.234 li
223.329 167.653 mo
220.652 166.107 li
220.496 166.017 li
214.384 162.489 li
214.226 162.398 li
208.129 158.878 li
207.971 158.787 li
201.864 155.261 li
201.706 155.17 li
195.599 151.645 li
195.446 151.556 li
189.339 148.031 li
189.183 147.941 li
183.075 144.414 li
182.921 144.326 li
176.815 140.801 li
176.657 140.709 li
170.555 137.187 li
170.397 137.096 li
164.295 133.573 li
164.137 133.482 li
158.337 130.133 li
158.337 129.952 li
164.137 133.301 li
164.295 133.392 li
170.397 136.915 li
170.555 137.006 li
176.657 140.529 li
176.815 140.62 li
182.921 144.146 li
183.075 144.234 li
189.183 147.761 li
189.339 147.851 li
195.446 151.377 li
195.599 151.465 li
201.706 154.991 li
201.864 155.082 li
207.971 158.608 li
208.129 158.699 li
214.226 162.219 li
214.384 162.31 li
220.496 165.839 li
220.652 165.929 li
223.55 167.602 li
223.329 167.653 li
.756863 .827451 .85098 rgb
f
258.144 187.751 mo
258.065 187.705 li
258.065 187.529 li
258.144 187.574 li
258.144 187.751 li
.431373 .678431 .705882 rgb
f
258.065 194.941 mo
251.958 191.415 li
251.805 191.326 li
245.694 187.799 li
245.536 187.707 li
239.782 184.386 li
239.963 184.308 li
245.536 187.526 li
245.694 187.617 li
251.805 191.145 li
251.958 191.234 li
258.065 194.759 li
258.065 194.941 li
237.875 183.285 mo
233.174 180.571 li
233.016 180.48 li
226.914 176.957 li
226.756 176.866 li
220.652 173.342 li
220.496 173.252 li
216.529 170.963 li
216.757 170.911 li
220.496 173.069 li
220.652 173.159 li
226.756 176.683 li
226.914 176.775 li
233.016 180.298 li
233.174 180.389 li
238.056 183.207 li
237.875 183.285 li
193.643 157.566 mo
193.059 157.414 li
189.339 155.266 li
189.183 155.176 li
183.075 151.65 li
182.921 151.561 li
176.815 148.036 li
176.657 147.945 li
170.555 144.422 li
170.397 144.331 li
169.529 143.83 li
169.462 143.606 li
170.397 144.146 li
170.555 144.237 li
176.657 147.76 li
176.815 147.851 li
182.921 151.377 li
183.075 151.465 li
189.183 154.992 li
189.339 155.082 li
193.643 157.566 li
.756863 .827451 .85098 rgb
f
258.144 194.986 mo
258.065 194.941 li
258.065 194.759 li
258.144 194.805 li
258.144 194.986 li
.431373 .678431 .705882 rgb
f
258.065 202.176 mo
251.958 198.65 li
251.805 198.561 li
245.694 195.033 li
245.536 194.942 li
239.434 191.418 li
239.276 191.327 li
233.174 187.804 li
233.016 187.713 li
226.914 184.19 li
226.756 184.098 li
225.878 183.591 li
226.373 183.693 li
226.756 183.914 li
226.914 184.005 li
233.016 187.528 li
233.174 187.619 li
239.276 191.142 li
239.434 191.233 li
245.536 194.756 li
245.694 194.847 li
251.805 198.376 li
251.958 198.464 li
258.065 201.99 li
258.065 202.176 li
222.289 181.335 mo
221.794 181.233 li
220.651 180.574 li
220.496 180.484 li
214.384 176.955 li
214.226 176.864 li
208.129 173.344 li
207.971 173.253 li
201.864 169.727 li
201.706 169.635 li
195.599 166.109 li
195.446 166.021 li
189.339 162.495 li
189.184 162.405 li
183.075 158.878 li
182.921 158.789 li
176.815 155.263 li
176.657 155.172 li
172.144 152.567 li
172.078 152.347 li
176.657 154.99 li
176.815 155.081 li
182.921 158.607 li
183.075 158.695 li
189.184 162.223 li
189.339 162.312 li
195.446 165.838 li
195.599 165.926 li
201.706 169.452 li
201.864 169.543 li
207.971 173.069 li
208.129 173.16 li
214.226 176.68 li
214.384 176.771 li
220.496 180.3 li
220.651 180.39 li
222.289 181.335 li
.756863 .827451 .85098 rgb
f
258.144 202.221 mo
258.065 202.176 li
258.065 201.99 li
258.144 202.035 li
258.144 202.221 li
.431373 .678431 .705882 rgb
f
258.065 209.402 mo
254.404 207.288 li
254.388 207.097 li
258.065 209.221 li
258.065 209.402 li
247.733 203.256 mo
246.197 202.55 li
245.694 202.259 li
245.536 202.168 li
239.434 198.645 li
239.276 198.554 li
233.174 195.031 li
233.016 194.94 li
226.914 191.417 li
226.756 191.326 li
220.651 187.801 li
220.496 187.712 li
214.384 184.183 li
214.226 184.092 li
208.129 180.572 li
207.971 180.481 li
206.467 179.612 li
206.953 179.712 li
207.971 180.3 li
208.129 180.391 li
214.226 183.911 li
214.384 184.002 li
220.496 187.531 li
220.651 187.62 li
226.756 191.145 li
226.914 191.236 li
233.016 194.759 li
233.174 194.85 li
239.276 198.373 li
239.434 198.464 li
245.536 201.987 li
245.694 202.078 li
247.733 203.256 li
202.49 177.316 mo
201.864 176.955 li
201.706 176.864 li
195.599 173.338 li
195.446 173.25 li
189.339 169.724 li
189.184 169.635 li
183.075 166.107 li
182.921 166.019 li
181.597 165.254 li
182.475 165.58 li
182.921 165.838 li
183.075 165.926 li
189.184 169.453 li
189.339 169.543 li
195.446 173.069 li
195.599 173.157 li
201.537 176.585 li
202.49 177.316 li
175.348 161.466 mo
174.741 161.24 li
174.695 161.088 li
175.348 161.466 li
.756863 .827451 .85098 rgb
f
258.144 209.447 mo
258.065 209.402 li
258.065 209.221 li
258.144 209.266 li
258.144 209.447 li
.431373 .678431 .705882 rgb
f
258.065 216.632 mo
251.958 213.107 li
251.805 213.018 li
245.694 209.49 li
245.536 209.399 li
240.879 206.71 li
241.053 206.631 li
245.536 209.218 li
245.694 209.309 li
251.805 212.837 li
251.958 212.926 li
258.065 216.451 li
258.065 216.632 li
238.995 205.623 mo
233.174 202.262 li
233.016 202.17 li
226.914 198.647 li
226.756 198.556 li
226.162 198.214 li
225.519 197.663 li
226.756 198.377 li
226.914 198.468 li
233.016 201.991 li
233.174 202.082 li
239.17 205.543 li
238.995 205.623 li
222.072 195.673 mo
221.757 195.67 li
220.65 195.031 li
220.496 194.942 li
214.384 191.414 li
214.226 191.323 li
208.129 187.802 li
207.971 187.711 li
201.864 184.186 li
201.706 184.094 li
195.599 180.569 li
195.446 180.48 li
189.339 176.955 li
189.185 176.865 li
183.075 173.338 li
182.921 173.249 li
176.815 169.724 li
176.657 169.633 li
173.552 167.84 li
173.589 167.684 li
176.657 169.455 li
176.815 169.546 li
182.921 173.072 li
183.075 173.16 li
189.185 176.688 li
189.339 176.777 li
195.446 180.302 li
195.599 180.391 li
201.706 183.916 li
201.864 184.007 li
207.971 187.533 li
208.129 187.624 li
214.226 191.144 li
214.384 191.235 li
220.496 194.763 li
220.65 194.852 li
222.072 195.673 li
.756863 .827451 .85098 rgb
f
258.144 216.678 mo
258.065 216.632 li
258.065 216.451 li
258.144 216.497 li
258.144 216.678 li
.431373 .678431 .705882 rgb
f
258.065 223.863 mo
251.958 220.337 li
251.805 220.248 li
245.694 216.72 li
245.536 216.629 li
239.434 213.106 li
239.276 213.015 li
233.174 209.492 li
233.016 209.401 li
226.914 205.878 li
226.756 205.787 li
220.65 202.262 li
220.496 202.173 li
214.384 198.644 li
214.226 198.553 li
211.881 197.199 li
212.195 197.202 li
214.226 198.375 li
214.384 198.466 li
220.496 201.995 li
220.65 202.084 li
226.756 205.609 li
226.914 205.7 li
233.016 209.224 li
233.174 209.315 li
239.276 212.838 li
239.434 212.929 li
245.536 216.452 li
245.694 216.543 li
251.805 220.072 li
251.958 220.16 li
258.065 223.686 li
258.065 223.863 li
209.355 195.562 mo
209.041 195.56 li
208.129 195.033 li
207.971 194.942 li
201.864 191.416 li
201.706 191.325 li
195.599 187.799 li
195.446 187.711 li
192.143 185.804 li
191.661 185.346 li
195.446 187.532 li
195.599 187.62 li
201.706 191.146 li
201.864 191.237 li
207.971 194.763 li
208.129 194.854 li
209.355 195.562 li
187.64 183.025 mo
186.852 182.749 li
183.075 180.568 li
182.921 180.48 li
176.815 176.954 li
176.657 176.863 li
172.032 174.193 li
172.07 174.035 li
176.657 176.683 li
176.815 176.774 li
182.921 180.3 li
183.075 180.389 li
187.64 183.025 li
.756863 .827451 .85098 rgb
f
258.144 223.908 mo
258.065 223.863 li
258.065 223.686 li
258.144 223.732 li
258.144 223.908 li
.431373 .678431 .705882 rgb
f
258.065 231.093 mo
251.958 227.568 li
251.805 227.479 li
245.694 223.951 li
245.536 223.86 li
239.434 220.337 li
239.276 220.246 li
233.174 216.723 li
233.016 216.632 li
226.914 213.109 li
226.756 213.017 li
220.649 209.492 li
220.496 209.403 li
214.384 205.875 li
214.226 205.784 li
208.129 202.264 li
207.971 202.172 li
201.864 198.647 li
201.706 198.556 li
195.599 195.03 li
195.446 194.941 li
189.339 191.416 li
189.186 191.327 li
183.075 187.799 li
182.921 187.711 li
176.815 184.185 li
176.657 184.094 li
170.555 180.571 li
170.513 180.547 li
170.551 180.389 li
170.555 180.391 li
176.657 183.914 li
176.815 184.005 li
182.921 187.531 li
183.075 187.619 li
189.186 191.148 li
189.339 191.236 li
195.446 194.762 li
195.599 194.851 li
201.706 198.377 li
201.864 198.468 li
207.971 201.994 li
208.129 202.085 li
214.226 205.605 li
214.384 205.697 li
220.496 209.225 li
220.649 209.314 li
226.756 212.84 li
226.914 212.931 li
233.016 216.454 li
233.174 216.545 li
239.276 220.068 li
239.434 220.16 li
245.536 223.683 li
245.694 223.774 li
251.805 227.302 li
251.958 227.391 li
258.065 230.917 li
258.065 231.093 li
.756863 .827451 .85098 rgb
f
258.144 231.139 mo
258.065 231.093 li
258.065 230.917 li
258.144 230.963 li
258.144 231.139 li
.431373 .678431 .705882 rgb
f
158.337 179.629 mo
158.337 107.086 li
157.12 106.38 li
157.12 180.334 li
258.641 238.946 li
258.641 237.538 li
158.337 179.629 li
.243137 .501961 .611765 rgb
f
249.102 203.791 mo
247.486 200.996 li
245.206 199.672 li
243.595 200.61 li
243.595 203.248 li
245.206 206.043 li
247.486 207.362 li
249.102 206.433 li
249.102 203.791 li
cp
.945098 .654902 .309804 rgb
f
239.294 207.956 mo
237.678 205.152 li
235.393 203.828 li
233.777 204.771 li
233.777 207.404 li
235.393 210.2 li
237.678 211.523 li
239.294 210.59 li
239.294 207.956 li
cp
f
226.04 197.117 mo
224.424 194.318 li
222.144 192.994 li
220.523 193.932 li
220.523 196.565 li
222.144 199.365 li
224.424 200.684 li
226.04 199.755 li
226.04 197.117 li
cp
f
205.096 196.542 mo
203.485 193.746 li
201.195 192.422 li
199.579 193.356 li
199.579 195.994 li
201.195 198.799 li
203.485 200.113 li
205.096 199.179 li
205.096 196.542 li
cp
f
192.78 185.215 mo
191.164 182.415 li
188.884 181.096 li
187.273 182.034 li
187.273 184.667 li
188.884 187.463 li
191.164 188.782 li
192.78 187.853 li
192.78 185.215 li
cp
f
179.866 180.413 mo
178.25 177.613 li
175.965 176.29 li
174.349 177.228 li
174.349 179.865 li
175.965 182.661 li
178.25 183.976 li
179.866 183.051 li
179.866 180.413 li
cp
f
257.809 207.376 mo
255.804 203.898 li
252.966 202.259 li
250.955 203.415 li
250.955 206.693 li
252.966 210.176 li
255.804 211.816 li
257.809 210.655 li
257.809 207.376 li
cp
f
202.463 197.117 mo
190.059 185.346 li
177.088 180.808 li
158.248 166.951 li
158.424 165.613 li
177.051 179.322 li
190.133 183.896 li
202.361 195.502 li
223.208 195.683 li
236.262 206.865 li
245.977 202.449 li
254.317 206.28 li
254.447 207.794 li
246.511 204.149 li
236.605 208.653 li
223.356 197.299 li
202.463 197.117 li
f
194.471 168.748 mo
192.85 165.948 li
190.57 164.629 li
188.954 165.562 li
188.954 168.2 li
190.57 170.996 li
192.85 172.324 li
194.471 171.386 li
194.471 168.748 li
cp
.933333 .345098 .305882 rgb
f
207.855 178.853 mo
206.239 176.057 li
203.954 174.734 li
202.342 175.667 li
202.342 178.305 li
203.954 181.106 li
206.239 182.424 li
207.855 181.491 li
207.855 178.853 li
cp
f
238.69 185.267 mo
237.079 182.466 li
234.794 181.152 li
233.178 182.081 li
233.178 184.718 li
234.794 187.519 li
237.079 188.837 li
238.69 187.904 li
238.69 185.267 li
cp
f
246.288 182.197 mo
244.672 179.401 li
242.387 178.082 li
240.771 179.011 li
240.771 181.649 li
242.387 184.449 li
244.672 185.768 li
246.288 184.834 li
246.288 182.197 li
cp
f
257.809 184.57 mo
255.804 181.091 li
252.966 179.452 li
250.955 180.613 li
250.955 183.892 li
252.966 187.37 li
255.804 189.014 li
257.809 187.853 li
257.809 184.57 li
cp
f
158.443 156.664 mo
158.23 155.118 li
191.606 167.494 li
191.707 167.577 li
205.026 177.794 li
235.909 184.129 li
243.279 180.966 li
254.201 183.432 li
254.563 185.029 li
243.896 182.619 li
236.54 185.777 li
205.12 179.336 li
204.971 179.22 li
191.615 168.971 li
158.443 156.664 li
f
257.809 171.195 mo
255.804 167.717 li
252.966 166.078 li
250.955 167.234 li
250.96 170.517 li
252.966 173.991 li
255.804 175.635 li
257.809 174.474 li
257.809 171.195 li
cp
.34902 .584314 .631373 rgb
f
236.893 166.579 mo
235.277 163.784 li
232.992 162.464 li
231.381 163.393 li
231.381 166.031 li
232.992 168.836 li
235.277 170.15 li
236.893 169.221 li
236.893 166.579 li
cp
f
218.262 170.285 mo
216.65 167.49 li
214.366 166.166 li
212.75 167.109 li
212.75 169.742 li
214.366 172.537 li
216.65 173.856 li
218.262 172.923 li
218.262 170.285 li
cp
f
196.742 158.856 mo
195.121 156.056 li
192.841 154.733 li
191.225 155.67 li
191.225 158.308 li
192.841 161.104 li
195.121 162.427 li
196.742 161.49 li
196.742 158.856 li
cp
f
182.411 154.918 mo
180.799 152.118 li
178.514 150.804 li
176.903 151.737 li
176.903 154.37 li
178.514 157.17 li
180.799 158.489 li
182.411 157.556 li
182.411 154.918 li
cp
f
179.726 155.429 mo
179.568 155.294 li
158.192 137.174 li
158.48 135.929 li
179.694 153.92 li
193.942 157.644 li
215.568 169.416 li
233.916 165.246 li
254.206 170.057 li
254.563 171.65 li
234.465 166.881 li
215.977 171.088 li
194.053 159.158 li
179.726 155.429 li
f
283.667 185.252 mo
277.908 181.923 li
273.836 184.277 li
273.836 190.927 li
277.908 197.977 li
280.62 199.542 li
280.62 205.36 li
275.818 202.593 li
268.797 190.43 li
268.797 178.955 li
275.818 174.901 li
285.757 180.632 li
283.667 185.252 li
cp
.933333 .345098 .305882 rgb
f
280.62 199.542 mo
283.667 201.307 li
287.74 198.957 li
287.74 192.306 li
283.667 185.252 li
285.757 180.632 li
292.783 192.803 li
292.783 204.269 li
285.757 208.333 li
280.62 205.36 li
280.62 199.542 li
cp
.243137 .501961 .611765 rgb
f
283.667 219.065 mo
277.908 215.731 li
273.836 218.09 li
273.836 224.74 li
277.908 231.789 li
280.62 233.355 li
280.62 239.173 li
275.818 236.401 li
268.797 224.238 li
268.797 212.768 li
275.818 208.709 li
285.757 214.444 li
283.667 219.065 li
cp
.866667 .301961 .321569 rgb
f
292.783 238.082 mo
285.757 242.141 li
280.62 239.173 li
280.62 233.355 li
283.667 235.115 li
287.74 232.764 li
292.783 238.082 li
cp
.952941 .741176 .313726 rgb
f
287.74 232.764 mo
287.74 226.114 li
283.667 219.065 li
285.757 214.444 li
292.783 226.611 li
292.783 238.082 li
287.74 232.764 li
cp
.952941 .882353 .454902 rgb
f
292.737 258.64 mo
268.792 244.815 li
268.792 238.031 li
292.737 251.861 li
292.737 258.64 li
cp
.243137 .501961 .611765 rgb
f
105.786 246.77 mo
91.0321 246.77 li
80.5968 240.747 li
80.5968 232.23 li
91.0321 226.202 li
105.786 226.202 li
116.22 232.23 li
116.22 240.747 li
105.786 246.77 li
.698039 .698039 .698039 rgb
f
115.686 206.814 mo
115.686 198.557 li
105.563 192.711 li
91.2546 192.711 li
81.1309 198.557 li
81.1309 206.814 li
91.2546 212.666 li
105.563 212.666 li
115.686 206.814 li
cp
.980392 .968627 .952941 rgb
f
104.49 194.187 mo
113.137 199.175 li
113.137 206.229 li
111.874 206.963 li
104.49 202.704 li
101.513 197.912 li
104.49 194.187 li
cp
.909804 .890196 .866667 rgb
f
104.49 202.704 mo
92.2671 202.704 li
90.5722 198.947 li
92.2671 194.187 li
104.49 194.187 li
104.49 202.704 li
cp
.8 .772549 .741176 rgb
f
92.2671 202.704 mo
84.8924 206.963 li
83.6246 206.229 li
83.6246 199.175 li
92.2671 194.187 li
92.2671 202.704 li
cp
.592157 .564706 .545098 rgb
f
111.874 206.963 mo
107.072 209.731 li
102.748 210.957 li
93.5767 210.752 li
89.6849 209.731 li
84.8924 206.963 li
92.2671 202.704 li
104.49 202.704 li
111.874 206.963 li
cp
.533333 .282353 .207843 rgb
f
103.756 208.337 mo
103.403 208.532 li
102.902 208.532 li
102.553 208.337 li
102.553 208.05 li
102.902 207.845 li
103.403 207.845 li
103.756 208.05 li
103.756 208.337 li
cp
102.474 207.153 mo
102.688 207.028 li
102.995 207.028 li
103.213 207.153 li
103.213 207.33 li
102.995 207.455 li
102.688 207.455 li
102.474 207.33 li
102.474 207.153 li
cp
102.214 209.935 mo
101.769 210.2 li
101.123 210.2 li
100.663 209.935 li
100.663 209.568 li
101.123 209.303 li
101.769 209.303 li
102.214 209.568 li
102.214 209.935 li
cp
99.5257 208.286 mo
99.5257 207.743 li
100.194 207.358 li
101.142 207.358 li
101.815 207.743 li
101.815 208.286 li
101.142 208.681 li
100.194 208.681 li
99.5257 208.286 li
cp
99.8505 210.07 mo
99.3026 210.381 li
98.5318 210.381 li
97.984 210.07 li
97.984 209.619 li
98.5318 209.303 li
99.3026 209.303 li
99.8505 209.619 li
99.8505 210.07 li
cp
97.1385 209.09 mo
96.7904 208.881 li
96.7904 208.593 li
97.1385 208.393 li
97.6354 208.393 li
97.984 208.593 li
97.984 208.881 li
97.6354 209.09 li
97.1385 209.09 li
cp
96.7067 209.694 mo
96.4884 209.819 li
96.1774 209.819 li
95.9639 209.694 li
95.9639 209.512 li
96.1774 209.392 li
96.4884 209.392 li
96.7067 209.512 li
96.7067 209.694 li
cp
94.5753 208.509 mo
93.9019 208.124 li
93.9019 207.576 li
94.5753 207.186 li
95.5273 207.186 li
96.196 207.576 li
96.196 208.124 li
95.5273 208.509 li
94.5753 208.509 li
cp
95.1883 209.192 mo
94.9282 209.35 li
94.5568 209.35 li
94.2919 209.192 li
94.2919 208.983 li
94.5568 208.83 li
94.9282 208.83 li
95.1883 208.983 li
95.1883 209.192 li
cp
93.9248 209.396 mo
93.5767 209.6 li
93.0797 209.6 li
92.7269 209.396 li
92.7269 209.113 li
93.0797 208.909 li
93.5767 208.909 li
93.9248 209.113 li
93.9248 209.396 li
cp
92.5876 208.31 mo
92.8011 208.184 li
93.1078 208.184 li
93.3261 208.31 li
93.3261 208.49 li
93.1078 208.611 li
92.8011 208.611 li
92.5876 208.49 li
92.5876 208.31 li
cp
96.3353 207.037 mo
96.6881 206.842 li
97.1803 206.842 li
97.5332 207.037 li
97.5332 207.325 li
97.1803 207.529 li
96.6881 207.529 li
96.3353 207.325 li
96.3353 207.037 li
cp
98.1276 207.576 mo
98.3506 207.455 li
98.6526 207.455 li
98.8709 207.576 li
98.8709 207.752 li
98.6526 207.882 li
98.3506 207.882 li
98.1276 207.752 li
98.1276 207.576 li
cp
101.982 206.052 mo
94.7793 206.052 li
89.6849 208.987 li
89.6849 209.731 li
92.2671 211.217 li
104.49 211.217 li
107.072 209.731 li
107.072 208.987 li
101.982 206.052 li
cp
.890196 .733333 .517647 rgb
f
105.563 245.851 mo
91.2546 245.851 li
91.2546 212.666 li
105.563 212.666 li
105.563 245.851 li
cp
.8 .772549 .741176 rgb
f
91.2546 245.851 mo
81.1309 240.009 li
81.1309 206.814 li
91.2546 212.666 li
91.2546 245.851 li
cp
.909804 .890196 .866667 rgb
f
105.563 245.851 mo
115.686 240.009 li
115.686 206.814 li
105.563 212.666 li
105.563 245.851 li
cp
.592157 .564706 .545098 rgb
f
105.563 238.885 mo
91.2546 238.885 li
91.2546 235.105 li
105.563 235.105 li
105.563 238.885 li
cp
.145098 .345098 .443137 rgb
f
91.2546 238.885 mo
81.1309 233.038 li
81.1309 229.258 li
91.2546 235.105 li
91.2546 238.885 li
cp
.243137 .529412 .67451 rgb
f
105.563 238.885 mo
115.686 233.038 li
115.686 229.258 li
105.563 235.105 li
105.563 238.885 li
cp
.0784314 .227451 .313726 rgb
f
83.5181 215.879 mo
79.594 213.608 li
84.0378 211.068 li
87.962 213.339 li
84.9157 215.879 li
83.5181 215.879 li
cp
.980392 .968627 .952941 rgb
f
76.4359 228.144 mo
72.5117 225.878 li
79.594 213.608 li
83.5181 215.879 li
80.4299 223.072 li
76.4359 228.144 li
cp
.909804 .890196 .866667 rgb
f
76.4359 239.712 mo
72.5117 237.446 li
72.5117 225.878 li
76.4359 228.144 li
77.4393 234.316 li
76.4359 239.712 li
cp
.8 .772549 .741176 rgb
f
83.5181 240.845 mo
79.594 238.574 li
84.0378 236.039 li
87.962 238.305 li
84.9157 240.845 li
83.5181 240.845 li
cp
.980392 .968627 .952941 rgb
f
87.962 238.305 mo
84.5861 240.232 li
79.0085 237.004 li
79.0085 227.893 li
84.5861 218.224 li
87.962 216.297 li
87.962 213.339 li
83.5181 215.879 li
76.4359 228.144 li
76.4359 239.712 li
83.5181 243.808 li
87.962 241.263 li
87.962 238.305 li
cp
.592157 .564706 .545098 rgb
f
234.715 374.029 mo
89.6155 290.257 li
143.954 258.887 li
289.063 342.663 li
234.715 374.029 li
.698039 .698039 .698039 rgb
f
234.599 373.42 mo
229.965 364.578 li
288.474 338.632 li
288.474 342.315 li
234.599 373.42 li
cp
.772549 .772549 .772549 rgb
f
234.599 373.42 mo
90.7624 290.373 li
90.7624 286.695 li
101.68 289.337 li
225.409 360.886 li
234.599 369.728 li
234.599 373.42 li
cp
.909804 .890196 .866667 rgb
f
234.599 369.728 mo
90.7624 286.695 li
144.632 255.594 li
288.474 338.632 li
234.599 369.728 li
cp
.980392 .968627 .952941 rgb
f
260.011 329.795 mo
254.276 326.484 li
256.709 325.076 li
262.44 328.393 li
260.011 329.795 li
cp
.909804 .890196 .866667 rgb
f
266.406 333.487 mo
260.67 330.171 li
263.094 328.769 li
268.834 332.08 li
266.406 333.487 li
cp
f
272.795 337.169 mo
267.056 333.863 li
269.484 332.456 li
275.22 335.776 li
272.795 337.169 li
cp
f
259.695 328.62 mo
256.314 326.66 li
257.02 326.252 li
260.405 328.211 li
259.695 328.62 li
cp
.819608 .854902 .341176 rgb
f
266.09 332.312 mo
262.7 330.343 li
263.405 329.944 li
266.8 331.899 li
266.09 332.312 li
cp
f
272.48 335.994 mo
269.085 334.044 li
269.8 333.631 li
273.19 335.591 li
272.48 335.994 li
cp
f
152.03 264.65 mo
152.03 262.918 li
140.671 259.165 li
140.671 260.893 li
149.606 266.052 li
152.03 264.65 li
cp
.772549 .772549 .772549 rgb
f
152.03 262.918 mo
143.1 257.763 li
140.671 259.165 li
149.606 264.315 li
152.03 262.918 li
cp
.980392 .968627 .952941 rgb
f
155.959 269.721 mo
158.392 268.314 li
158.392 266.586 li
150.228 264.673 li
150.228 266.405 li
155.959 269.721 li
cp
.772549 .772549 .772549 rgb
f
155.959 267.984 mo
158.392 266.586 li
152.652 263.275 li
150.228 264.673 li
155.959 267.984 li
cp
.980392 .968627 .952941 rgb
f
162.353 273.408 mo
164.782 272.011 li
164.782 270.278 li
156.614 268.365 li
156.614 270.097 li
162.353 273.408 li
cp
.772549 .772549 .772549 rgb
f
162.353 271.676 mo
164.782 270.278 li
159.042 266.967 li
156.614 268.365 li
162.353 271.676 li
cp
.980392 .968627 .952941 rgb
f
168.739 277.1 mo
171.168 275.698 li
171.168 273.966 li
162.999 272.057 li
162.999 273.789 li
168.739 277.1 li
cp
.772549 .772549 .772549 rgb
f
168.739 275.368 mo
171.168 273.966 li
165.437 270.659 li
162.999 272.057 li
168.739 275.368 li
cp
.980392 .968627 .952941 rgb
f
175.134 280.792 mo
177.562 279.39 li
177.562 277.658 li
169.398 275.749 li
169.398 277.477 li
175.134 280.792 li
cp
.772549 .772549 .772549 rgb
f
175.134 279.055 mo
177.562 277.658 li
171.822 274.337 li
169.398 275.749 li
175.134 279.055 li
cp
.980392 .968627 .952941 rgb
f
181.523 284.479 mo
183.952 283.077 li
183.952 281.345 li
175.784 279.431 li
175.784 281.164 li
181.523 284.479 li
cp
.772549 .772549 .772549 rgb
f
181.523 282.747 mo
183.952 281.345 li
178.213 278.034 li
175.784 279.431 li
181.523 282.747 li
cp
.980392 .968627 .952941 rgb
f
187.909 288.167 mo
190.342 286.769 li
190.342 285.037 li
182.169 283.123 li
182.169 284.855 li
187.909 288.167 li
cp
.772549 .772549 .772549 rgb
f
187.909 286.435 mo
190.342 285.037 li
184.603 281.721 li
182.169 283.123 li
187.909 286.435 li
cp
.980392 .968627 .952941 rgb
f
194.304 291.854 mo
196.733 290.461 li
196.733 288.729 li
188.569 286.815 li
188.569 288.543 li
194.304 291.854 li
cp
.772549 .772549 .772549 rgb
f
194.304 290.122 mo
196.733 288.729 li
190.993 285.418 li
188.569 286.815 li
194.304 290.122 li
cp
.980392 .968627 .952941 rgb
f
200.694 295.551 mo
203.118 294.148 li
203.118 292.416 li
194.958 290.507 li
194.958 292.235 li
200.694 295.551 li
cp
.772549 .772549 .772549 rgb
f
200.694 293.814 mo
203.118 292.416 li
197.383 289.1 li
194.958 290.507 li
200.694 293.814 li
cp
.980392 .968627 .952941 rgb
f
207.079 299.233 mo
209.513 297.831 li
209.513 296.099 li
201.344 294.195 li
201.344 295.927 li
207.079 299.233 li
cp
.772549 .772549 .772549 rgb
f
207.079 297.506 mo
209.513 296.099 li
203.768 292.787 li
201.344 294.195 li
207.079 297.506 li
cp
.980392 .968627 .952941 rgb
f
213.469 302.921 mo
215.902 301.518 li
215.902 299.786 li
207.734 297.882 li
207.734 299.614 li
213.469 302.921 li
cp
.772549 .772549 .772549 rgb
f
213.469 301.193 mo
215.902 299.786 li
210.163 296.475 li
207.734 297.882 li
213.469 301.193 li
cp
.980392 .968627 .952941 rgb
f
219.864 306.612 mo
222.288 305.215 li
222.288 303.482 li
214.129 301.569 li
214.129 303.306 li
219.864 306.612 li
cp
.772549 .772549 .772549 rgb
f
219.864 304.885 mo
222.288 303.482 li
216.553 300.167 li
214.129 301.569 li
219.864 304.885 li
cp
.980392 .968627 .952941 rgb
f
226.249 310.304 mo
228.678 308.902 li
228.678 307.17 li
220.519 305.261 li
220.519 306.993 li
226.249 310.304 li
cp
.772549 .772549 .772549 rgb
f
226.249 308.577 mo
228.678 307.17 li
222.943 303.863 li
220.519 305.261 li
226.249 308.577 li
cp
.980392 .968627 .952941 rgb
f
232.644 313.992 mo
235.073 312.585 li
235.073 310.862 li
226.904 308.948 li
226.904 310.68 li
232.644 313.992 li
cp
.772549 .772549 .772549 rgb
f
232.644 312.259 mo
235.073 310.862 li
229.337 307.546 li
226.904 308.948 li
232.644 312.259 li
cp
.980392 .968627 .952941 rgb
f
145.194 268.592 mo
145.194 266.865 li
130.528 265.021 li
130.528 266.749 li
139.459 271.904 li
145.194 268.592 li
cp
.772549 .772549 .772549 rgb
f
145.194 266.865 mo
136.264 261.706 li
130.528 265.021 li
139.459 270.176 li
145.194 266.865 li
cp
.980392 .968627 .952941 rgb
f
148.556 270.538 mo
145.817 268.955 li
143.081 270.538 li
140.081 270.538 li
140.081 272.266 li
145.817 275.586 li
151.556 272.266 li
151.556 270.538 li
148.556 270.538 li
cp
.772549 .772549 .772549 rgb
f
145.817 267.222 mo
140.081 270.538 li
145.817 273.85 li
151.556 270.538 li
145.817 267.222 li
cp
.980392 .968627 .952941 rgb
f
154.946 274.226 mo
152.211 272.637 li
149.466 274.226 li
146.467 274.226 li
146.467 275.949 li
152.211 279.269 li
157.942 275.949 li
157.942 274.226 li
154.946 274.226 li
cp
.772549 .772549 .772549 rgb
f
152.211 270.91 mo
146.467 274.226 li
152.211 277.537 li
157.942 274.226 li
152.211 270.91 li
cp
.980392 .968627 .952941 rgb
f
161.332 277.908 mo
158.597 276.33 li
155.857 277.908 li
152.856 277.908 li
152.856 279.641 li
158.597 282.956 li
164.332 279.641 li
164.332 277.908 li
161.332 277.908 li
cp
.772549 .772549 .772549 rgb
f
158.597 274.602 mo
152.856 277.908 li
158.597 281.224 li
164.332 277.908 li
158.597 274.602 li
cp
.980392 .968627 .952941 rgb
f
167.722 281.6 mo
164.987 280.021 li
162.251 281.6 li
159.252 281.6 li
159.252 283.328 li
164.987 286.648 li
170.722 283.328 li
170.722 281.6 li
167.722 281.6 li
cp
.772549 .772549 .772549 rgb
f
164.987 278.294 mo
159.252 281.6 li
164.987 284.912 li
170.722 281.6 li
164.987 278.294 li
cp
.980392 .968627 .952941 rgb
f
174.116 285.292 mo
171.377 283.708 li
168.637 285.292 li
165.637 285.292 li
165.637 287.024 li
171.377 290.336 li
177.112 287.024 li
177.112 285.292 li
174.116 285.292 li
cp
.772549 .772549 .772549 rgb
f
171.377 281.977 mo
165.637 285.292 li
171.377 288.608 li
177.112 285.292 li
171.377 281.977 li
cp
.980392 .968627 .952941 rgb
f
180.511 288.975 mo
177.767 287.396 li
175.027 288.975 li
172.036 288.975 li
172.036 290.712 li
177.767 294.023 li
183.502 290.712 li
183.502 288.975 li
180.511 288.975 li
cp
.772549 .772549 .772549 rgb
f
177.767 285.668 mo
172.036 288.975 li
177.767 292.29 li
183.502 288.975 li
177.767 285.668 li
cp
.980392 .968627 .952941 rgb
f
186.892 292.671 mo
184.152 291.088 li
181.422 292.671 li
178.417 292.671 li
178.417 294.399 li
184.152 297.705 li
189.892 294.399 li
189.892 292.671 li
186.892 292.671 li
cp
.772549 .772549 .772549 rgb
f
184.152 289.355 mo
178.417 292.671 li
184.152 295.978 li
189.892 292.671 li
184.152 289.355 li
cp
.980392 .968627 .952941 rgb
f
193.282 296.363 mo
190.547 294.775 li
187.807 296.363 li
184.807 296.363 li
184.807 298.091 li
190.547 301.402 li
196.282 298.091 li
196.282 296.363 li
193.282 296.363 li
cp
.772549 .772549 .772549 rgb
f
190.547 293.052 mo
184.807 296.363 li
190.547 299.674 li
196.282 296.363 li
190.547 293.052 li
cp
.980392 .968627 .952941 rgb
f
199.672 300.05 mo
196.937 298.471 li
194.197 300.05 li
191.202 300.05 li
191.202 301.778 li
196.937 305.089 li
202.672 301.778 li
202.672 300.05 li
199.672 300.05 li
cp
.772549 .772549 .772549 rgb
f
196.937 296.735 mo
191.202 300.05 li
196.937 303.357 li
202.672 300.05 li
196.937 296.735 li
cp
.980392 .968627 .952941 rgb
f
206.067 303.733 mo
203.322 302.154 li
200.587 303.733 li
197.592 303.733 li
197.592 305.465 li
203.322 308.776 li
209.067 305.465 li
209.067 303.733 li
206.067 303.733 li
cp
.772549 .772549 .772549 rgb
f
203.322 300.426 mo
197.592 303.733 li
203.322 307.054 li
209.067 303.733 li
203.322 300.426 li
cp
.980392 .968627 .952941 rgb
f
212.452 307.425 mo
209.721 305.841 li
206.977 307.425 li
203.977 307.425 li
203.977 309.157 li
209.721 312.473 li
215.452 309.157 li
215.452 307.425 li
212.452 307.425 li
cp
.772549 .772549 .772549 rgb
f
209.721 304.11 mo
203.977 307.425 li
209.721 310.736 li
215.452 307.425 li
209.721 304.11 li
cp
.980392 .968627 .952941 rgb
f
218.852 311.117 mo
216.107 309.538 li
213.372 311.117 li
210.367 311.117 li
210.367 312.854 li
216.107 316.16 li
221.847 312.854 li
221.847 311.117 li
218.852 311.117 li
cp
.772549 .772549 .772549 rgb
f
216.107 307.806 mo
210.367 311.117 li
216.107 314.428 li
221.847 311.117 li
216.107 307.806 li
cp
.980392 .968627 .952941 rgb
f
225.242 314.809 mo
222.502 313.226 li
219.757 314.809 li
216.762 314.809 li
216.762 316.536 li
222.502 319.852 li
228.232 316.536 li
228.232 314.809 li
225.242 314.809 li
cp
.772549 .772549 .772549 rgb
f
222.502 311.493 mo
216.762 314.809 li
222.502 318.12 li
228.232 314.809 li
222.502 311.493 li
cp
.980392 .968627 .952941 rgb
f
132.888 268.551 mo
130.152 266.972 li
127.412 268.551 li
124.413 268.551 li
124.413 270.283 li
130.152 273.594 li
135.888 270.283 li
135.888 268.551 li
132.888 268.551 li
cp
.772549 .772549 .772549 rgb
f
130.152 265.239 mo
124.413 268.551 li
130.152 271.862 li
135.888 268.551 li
130.152 265.239 li
cp
.980392 .968627 .952941 rgb
f
139.278 272.238 mo
136.538 270.659 li
133.803 272.238 li
130.798 272.238 li
130.798 273.966 li
136.538 277.282 li
142.269 273.966 li
142.269 272.238 li
139.278 272.238 li
cp
.772549 .772549 .772549 rgb
f
136.538 268.927 mo
130.798 272.238 li
136.538 275.554 li
142.269 272.238 li
136.538 268.927 li
cp
.980392 .968627 .952941 rgb
f
145.668 275.92 mo
142.928 274.337 li
140.188 275.92 li
137.193 275.92 li
137.193 277.658 li
142.928 280.964 li
148.663 277.658 li
148.663 275.92 li
145.668 275.92 li
cp
.772549 .772549 .772549 rgb
f
142.928 272.609 mo
137.193 275.92 li
142.928 279.237 li
148.663 275.92 li
142.928 272.609 li
cp
.980392 .968627 .952941 rgb
f
152.053 279.613 mo
149.313 278.034 li
146.583 279.613 li
143.578 279.613 li
143.578 281.345 li
149.313 284.656 li
155.058 281.345 li
155.058 279.613 li
152.053 279.613 li
cp
.772549 .772549 .772549 rgb
f
149.313 276.301 mo
143.578 279.613 li
149.313 282.929 li
155.058 279.613 li
149.313 276.301 li
cp
.980392 .968627 .952941 rgb
f
158.443 283.3 mo
155.708 281.725 li
152.968 283.3 li
149.968 283.3 li
149.968 285.037 li
155.708 288.353 li
161.443 285.037 li
161.443 283.3 li
158.443 283.3 li
cp
.772549 .772549 .772549 rgb
f
155.708 279.989 mo
149.968 283.3 li
155.708 286.62 li
161.443 283.3 li
155.708 279.989 li
cp
.980392 .968627 .952941 rgb
f
164.838 286.996 mo
162.098 285.418 li
159.358 286.996 li
156.363 286.996 li
156.363 288.729 li
162.098 292.04 li
167.833 288.729 li
167.833 286.996 li
164.838 286.996 li
cp
.772549 .772549 .772549 rgb
f
162.098 283.681 mo
156.363 286.996 li
162.098 290.307 li
167.833 286.996 li
162.098 283.681 li
cp
.980392 .968627 .952941 rgb
f
171.223 290.684 mo
168.488 289.1 li
165.748 290.684 li
162.748 290.684 li
162.748 292.411 li
168.488 295.727 li
174.223 292.411 li
174.223 290.684 li
171.223 290.684 li
cp
.772549 .772549 .772549 rgb
f
168.488 287.368 mo
162.748 290.684 li
168.488 293.995 li
174.223 290.684 li
168.488 287.368 li
cp
.980392 .968627 .952941 rgb
f
177.618 294.366 mo
174.878 292.787 li
172.143 294.366 li
169.143 294.366 li
169.143 296.099 li
174.878 299.41 li
180.618 296.099 li
180.618 294.366 li
177.618 294.366 li
cp
.772549 .772549 .772549 rgb
f
174.878 291.06 mo
169.143 294.366 li
174.878 297.687 li
180.618 294.366 li
174.878 291.06 li
cp
.980392 .968627 .952941 rgb
f
184.008 298.063 mo
181.273 296.48 li
178.528 298.063 li
175.533 298.063 li
175.533 299.786 li
181.273 303.106 li
187.003 299.786 li
187.003 298.063 li
184.008 298.063 li
cp
.772549 .772549 .772549 rgb
f
181.273 294.752 mo
175.533 298.063 li
181.273 301.374 li
187.003 298.063 li
181.273 294.752 li
cp
.980392 .968627 .952941 rgb
f
190.394 301.75 mo
187.663 300.167 li
184.918 301.75 li
181.923 301.75 li
181.923 303.482 li
187.663 306.798 li
193.398 303.482 li
193.398 301.75 li
190.394 301.75 li
cp
.772549 .772549 .772549 rgb
f
187.663 298.439 mo
181.923 301.75 li
187.663 305.071 li
193.398 301.75 li
187.663 298.439 li
cp
.980392 .968627 .952941 rgb
f
196.788 305.442 mo
194.048 303.863 li
191.318 305.442 li
188.313 305.442 li
188.313 307.17 li
194.048 310.481 li
199.788 307.17 li
199.788 305.442 li
196.788 305.442 li
cp
.772549 .772549 .772549 rgb
f
194.048 302.127 mo
188.313 305.442 li
194.048 308.748 li
199.788 305.442 li
194.048 302.127 li
cp
.980392 .968627 .952941 rgb
f
203.178 309.129 mo
200.443 307.546 li
197.703 309.129 li
194.699 309.129 li
194.699 310.862 li
200.443 314.177 li
206.173 310.862 li
206.173 309.129 li
203.178 309.129 li
cp
.772549 .772549 .772549 rgb
f
200.443 305.818 mo
194.699 309.129 li
200.443 312.445 li
206.173 309.129 li
200.443 305.818 li
cp
.980392 .968627 .952941 rgb
f
209.568 312.821 mo
206.828 311.243 li
204.084 312.821 li
201.093 312.821 li
201.093 314.549 li
206.828 317.864 li
212.568 314.549 li
212.568 312.821 li
209.568 312.821 li
cp
.772549 .772549 .772549 rgb
f
206.828 309.51 mo
201.093 312.821 li
206.828 316.133 li
212.568 312.821 li
206.828 309.51 li
cp
.980392 .968627 .952941 rgb
f
222.121 320.066 mo
222.121 318.338 li
207.483 316.509 li
207.483 318.245 li
216.381 323.386 li
222.121 320.066 li
cp
.772549 .772549 .772549 rgb
f
222.121 318.338 mo
213.219 313.207 li
207.483 316.509 li
216.381 321.649 li
222.121 318.338 li
cp
.980392 .968627 .952941 rgb
f
132.656 275.693 mo
132.656 273.966 li
118.245 272.27 li
118.245 273.998 li
126.92 279.009 li
132.656 275.693 li
cp
.772549 .772549 .772549 rgb
f
132.656 273.966 mo
123.985 268.955 li
118.245 272.27 li
126.92 277.272 li
132.656 273.966 li
cp
.980392 .968627 .952941 rgb
f
136.05 277.658 mo
133.306 276.074 li
130.575 277.658 li
127.575 277.658 li
127.575 279.385 li
133.306 282.701 li
139.05 279.385 li
139.05 277.658 li
136.05 277.658 li
cp
.772549 .772549 .772549 rgb
f
133.306 274.337 mo
127.575 277.658 li
133.306 280.964 li
139.05 277.658 li
133.306 274.337 li
cp
.980392 .968627 .952941 rgb
f
142.44 281.345 mo
139.705 279.761 li
136.961 281.345 li
133.965 281.345 li
133.965 283.068 li
139.705 286.383 li
145.44 283.068 li
145.44 281.345 li
142.44 281.345 li
cp
.772549 .772549 .772549 rgb
f
139.705 278.024 mo
133.965 281.345 li
139.705 284.647 li
145.44 281.345 li
139.705 278.024 li
cp
.980392 .968627 .952941 rgb
f
148.826 285.032 mo
146.09 283.439 li
143.35 285.032 li
140.35 285.032 li
140.35 286.759 li
146.09 290.075 li
151.825 286.759 li
151.825 285.032 li
148.826 285.032 li
cp
.772549 .772549 .772549 rgb
f
146.09 281.716 mo
140.35 285.032 li
146.09 288.343 li
151.825 285.032 li
146.09 281.716 li
cp
.980392 .968627 .952941 rgb
f
155.225 288.719 mo
152.48 287.136 li
149.741 288.719 li
146.745 288.719 li
146.745 290.447 li
152.48 293.763 li
158.216 290.447 li
158.216 288.719 li
155.225 288.719 li
cp
.772549 .772549 .772549 rgb
f
152.48 285.408 mo
146.745 288.719 li
152.48 292.03 li
158.216 288.719 li
152.48 285.408 li
cp
.980392 .968627 .952941 rgb
f
161.61 292.402 mo
158.875 290.823 li
156.131 292.402 li
153.135 292.402 li
153.135 294.139 li
158.875 297.454 li
164.61 294.139 li
164.61 292.402 li
161.61 292.402 li
cp
.772549 .772549 .772549 rgb
f
158.875 289.095 mo
153.135 292.402 li
158.875 295.722 li
164.61 292.402 li
158.875 289.095 li
cp
.980392 .968627 .952941 rgb
f
167.996 296.094 mo
165.26 294.515 li
162.53 296.094 li
159.53 296.094 li
159.53 297.831 li
165.26 301.137 li
171.005 297.831 li
171.005 296.094 li
167.996 296.094 li
cp
.772549 .772549 .772549 rgb
f
165.26 292.783 mo
159.53 296.094 li
165.26 299.41 li
171.005 296.094 li
165.26 292.783 li
cp
.980392 .968627 .952941 rgb
f
174.39 299.786 mo
171.651 298.207 li
168.911 299.786 li
165.915 299.786 li
165.915 301.514 li
171.651 304.829 li
177.386 301.514 li
177.386 299.786 li
174.39 299.786 li
cp
.772549 .772549 .772549 rgb
f
171.651 296.47 mo
165.915 299.786 li
171.651 303.097 li
177.386 299.786 li
171.651 296.47 li
cp
.980392 .968627 .952941 rgb
f
180.781 303.477 mo
178.041 301.894 li
175.301 303.477 li
172.306 303.477 li
172.306 305.21 li
178.041 308.521 li
183.776 305.21 li
183.776 303.477 li
180.781 303.477 li
cp
.772549 .772549 .772549 rgb
f
178.041 300.162 mo
172.306 303.477 li
178.041 306.794 li
183.776 303.477 li
178.041 300.162 li
cp
.980392 .968627 .952941 rgb
f
187.166 307.17 mo
184.431 305.591 li
181.695 307.17 li
178.695 307.17 li
178.695 308.897 li
184.431 312.208 li
190.175 308.897 li
190.175 307.17 li
187.166 307.17 li
cp
.772549 .772549 .772549 rgb
f
184.431 303.854 mo
178.695 307.17 li
184.431 310.481 li
190.175 307.17 li
184.431 303.854 li
cp
.980392 .968627 .952941 rgb
f
193.561 310.852 mo
190.821 309.273 li
188.085 310.852 li
185.086 310.852 li
185.086 312.585 li
190.821 315.891 li
196.561 312.585 li
196.561 310.852 li
193.561 310.852 li
cp
.772549 .772549 .772549 rgb
f
190.821 307.541 mo
185.086 310.852 li
190.821 314.173 li
196.561 310.852 li
190.821 307.541 li
cp
.980392 .968627 .952941 rgb
f
199.951 314.544 mo
197.211 312.961 li
194.471 314.544 li
191.475 314.544 li
191.475 316.272 li
197.211 319.587 li
202.946 316.272 li
202.946 314.544 li
199.951 314.544 li
cp
.772549 .772549 .772549 rgb
f
197.211 311.228 mo
191.475 314.544 li
197.211 317.855 li
202.946 314.544 li
197.211 311.228 li
cp
.980392 .968627 .952941 rgb
f
206.341 318.236 mo
203.605 316.657 li
200.865 318.236 li
197.87 318.236 li
197.87 319.968 li
203.605 323.279 li
209.341 319.968 li
209.341 318.236 li
206.341 318.236 li
cp
.772549 .772549 .772549 rgb
f
203.605 314.92 mo
197.87 318.236 li
203.605 321.552 li
209.341 318.236 li
203.605 314.92 li
cp
.980392 .968627 .952941 rgb
f
128.193 280.272 mo
128.193 278.549 li
112.046 275.851 li
112.046 277.583 li
122.457 283.592 li
128.193 280.272 li
cp
.772549 .772549 .772549 rgb
f
128.193 278.549 mo
117.781 272.54 li
112.046 275.851 li
122.457 281.861 li
128.193 278.549 li
cp
.980392 .968627 .952941 rgb
f
131.587 282.232 mo
128.847 280.653 li
126.107 282.232 li
123.112 282.232 li
123.112 283.969 li
128.847 287.275 li
134.583 283.969 li
134.583 282.232 li
131.587 282.232 li
cp
.772549 .772549 .772549 rgb
f
128.847 278.925 mo
123.112 282.232 li
128.847 285.547 li
134.583 282.232 li
128.847 278.925 li
cp
.980392 .968627 .952941 rgb
f
137.977 285.919 mo
135.233 284.345 li
132.493 285.919 li
129.502 285.919 li
129.502 287.646 li
135.233 290.962 li
140.973 287.646 li
140.973 285.919 li
137.977 285.919 li
cp
.772549 .772549 .772549 rgb
f
135.233 282.613 mo
129.502 285.919 li
135.233 289.23 li
140.973 285.919 li
135.233 282.613 li
cp
.980392 .968627 .952941 rgb
f
144.363 289.602 mo
141.628 288.027 li
138.883 289.602 li
135.888 289.602 li
135.888 291.338 li
141.628 294.654 li
147.363 291.338 li
147.363 289.602 li
144.363 289.602 li
cp
.772549 .772549 .772549 rgb
f
141.628 286.3 mo
135.888 289.602 li
141.628 292.917 li
147.363 289.602 li
141.628 286.3 li
cp
.980392 .968627 .952941 rgb
f
150.753 293.298 mo
148.013 291.724 li
145.283 293.298 li
142.278 293.298 li
142.278 295.035 li
148.013 298.346 li
153.753 295.035 li
153.753 293.298 li
150.753 293.298 li
cp
.772549 .772549 .772549 rgb
f
148.013 289.992 mo
142.278 293.298 li
148.013 296.614 li
153.753 293.298 li
148.013 289.992 li
cp
.980392 .968627 .952941 rgb
f
157.148 296.99 mo
154.408 295.416 li
151.668 296.99 li
148.668 296.99 li
148.668 298.718 li
154.408 302.033 li
160.138 298.718 li
160.138 296.99 li
157.148 296.99 li
cp
.772549 .772549 .772549 rgb
f
154.408 293.674 mo
148.668 296.99 li
154.408 300.301 li
160.138 296.99 li
154.408 293.674 li
cp
.980392 .968627 .952941 rgb
f
163.538 300.678 mo
160.797 299.099 li
158.053 300.678 li
155.062 300.678 li
155.062 302.409 li
160.797 305.716 li
166.533 302.409 li
166.533 300.678 li
163.538 300.678 li
cp
.772549 .772549 .772549 rgb
f
160.797 297.366 mo
155.062 300.678 li
160.797 303.993 li
166.533 300.678 li
160.797 297.366 li
cp
.980392 .968627 .952941 rgb
f
169.923 304.369 mo
167.188 302.786 li
164.452 304.369 li
161.448 304.369 li
161.448 306.102 li
167.188 309.413 li
172.923 306.102 li
172.923 304.369 li
169.923 304.369 li
cp
.772549 .772549 .772549 rgb
f
167.188 301.058 mo
161.448 304.369 li
167.188 307.676 li
172.923 304.369 li
167.188 301.058 li
cp
.980392 .968627 .952941 rgb
f
176.313 308.061 mo
173.578 306.478 li
170.843 308.061 li
167.838 308.061 li
167.838 309.789 li
173.578 313.1 li
179.313 309.789 li
179.313 308.061 li
176.313 308.061 li
cp
.772549 .772549 .772549 rgb
f
173.578 304.746 mo
167.838 308.061 li
173.578 311.368 li
179.313 308.061 li
173.578 304.746 li
cp
.980392 .968627 .952941 rgb
f
182.712 311.753 mo
179.968 310.174 li
177.228 311.753 li
174.228 311.753 li
174.228 313.476 li
179.968 316.792 li
185.703 313.476 li
185.703 311.753 li
182.712 311.753 li
cp
.772549 .772549 .772549 rgb
f
179.968 308.433 mo
174.228 311.753 li
179.968 315.06 li
185.703 311.753 li
179.968 308.433 li
cp
.980392 .968627 .952941 rgb
f
189.093 315.436 mo
186.362 313.861 li
183.618 315.436 li
180.618 315.436 li
180.618 317.173 li
186.362 320.484 li
192.098 317.173 li
192.098 315.436 li
189.093 315.436 li
cp
.772549 .772549 .772549 rgb
f
186.362 312.125 mo
180.618 315.436 li
186.362 318.747 li
192.098 315.436 li
186.362 312.125 li
cp
.980392 .968627 .952941 rgb
f
195.483 319.128 mo
192.748 317.554 li
190.008 319.128 li
187.008 319.128 li
187.008 320.865 li
192.748 324.176 li
198.484 320.865 li
198.484 319.128 li
195.483 319.128 li
cp
.772549 .772549 .772549 rgb
f
192.748 315.817 mo
187.008 319.128 li
192.748 322.443 li
198.484 319.128 li
192.748 315.817 li
cp
.980392 .968627 .952941 rgb
f
215.731 323.656 mo
215.731 321.928 li
203.791 323.93 li
193.398 322.815 li
193.398 324.552 li
203.791 330.552 li
215.731 323.656 li
cp
.772549 .772549 .772549 rgb
f
215.731 321.928 mo
209.996 318.612 li
203.791 322.198 li
199.134 319.499 li
193.398 322.815 li
203.791 328.82 li
215.731 321.928 li
cp
.980392 .968627 .952941 rgb
f
118.831 281.972 mo
118.831 280.239 li
105.897 279.394 li
105.897 281.127 li
113.095 285.283 li
118.831 281.972 li
cp
.772549 .772549 .772549 rgb
f
118.831 280.239 mo
111.632 276.088 li
105.897 279.394 li
113.095 283.56 li
118.831 280.239 li
cp
.980392 .968627 .952941 rgb
f
122.239 283.941 mo
119.499 282.357 li
116.764 283.941 li
113.764 283.941 li
113.764 285.673 li
119.499 288.979 li
125.239 285.673 li
125.239 283.941 li
122.239 283.941 li
cp
.772549 .772549 .772549 rgb
f
119.499 280.625 mo
113.764 283.941 li
119.499 287.252 li
125.239 283.941 li
119.499 280.625 li
cp
.980392 .968627 .952941 rgb
f
128.634 287.624 mo
125.889 286.044 li
123.15 287.624 li
120.149 287.624 li
120.149 289.355 li
125.889 292.671 li
131.625 289.355 li
131.625 287.624 li
128.634 287.624 li
cp
.772549 .772549 .772549 rgb
f
125.889 284.317 mo
120.149 287.624 li
125.889 290.935 li
131.625 287.624 li
125.889 284.317 li
cp
.980392 .968627 .952941 rgb
f
135.019 291.315 mo
132.284 289.732 li
129.544 291.315 li
126.544 291.315 li
126.544 293.052 li
132.284 296.363 li
138.019 293.052 li
138.019 291.315 li
135.019 291.315 li
cp
.772549 .772549 .772549 rgb
f
132.284 288 mo
126.544 291.315 li
132.284 294.626 li
138.019 291.315 li
132.284 288 li
cp
.980392 .968627 .952941 rgb
f
141.405 295.007 mo
138.674 293.428 li
135.934 295.007 li
132.934 295.007 li
132.934 296.74 li
138.674 300.05 li
144.409 296.74 li
144.409 295.007 li
141.405 295.007 li
cp
.772549 .772549 .772549 rgb
f
138.674 291.696 mo
132.934 295.007 li
138.674 298.318 li
144.409 295.007 li
138.674 291.696 li
cp
.980392 .968627 .952941 rgb
f
147.8 298.695 mo
145.059 297.116 li
142.324 298.695 li
139.319 298.695 li
139.319 300.426 li
145.059 303.747 li
150.799 300.426 li
150.799 298.695 li
147.8 298.695 li
cp
.772549 .772549 .772549 rgb
f
145.059 295.383 mo
139.319 298.695 li
145.059 302.006 li
150.799 298.695 li
145.059 295.383 li
cp
.980392 .968627 .952941 rgb
f
154.189 302.387 mo
151.449 300.798 li
148.71 302.387 li
145.719 302.387 li
145.719 304.11 li
151.449 307.425 li
157.19 304.11 li
157.19 302.387 li
154.189 302.387 li
cp
.772549 .772549 .772549 rgb
f
151.449 299.076 mo
145.719 302.387 li
151.449 305.697 li
157.19 302.387 li
151.449 299.076 li
cp
.980392 .968627 .952941 rgb
f
160.58 306.069 mo
157.844 304.49 li
155.104 306.069 li
152.099 306.069 li
152.099 307.801 li
157.844 311.112 li
163.579 307.801 li
163.579 306.069 li
160.58 306.069 li
cp
.772549 .772549 .772549 rgb
f
157.844 302.763 mo
152.099 306.069 li
157.844 309.385 li
163.579 306.069 li
157.844 302.763 li
cp
.980392 .968627 .952941 rgb
f
166.97 309.766 mo
164.229 308.182 li
161.499 309.766 li
158.49 309.766 li
158.49 311.493 li
164.229 314.809 li
169.965 311.493 li
169.965 309.766 li
166.97 309.766 li
cp
.772549 .772549 .772549 rgb
f
164.229 306.45 mo
158.49 309.766 li
164.229 313.077 li
169.965 309.766 li
164.229 306.45 li
cp
.980392 .968627 .952941 rgb
f
173.378 313.462 mo
170.643 311.883 li
167.903 313.462 li
164.903 313.462 li
164.903 315.194 li
170.643 318.515 li
176.378 315.194 li
176.378 313.462 li
173.378 313.462 li
cp
.772549 .772549 .772549 rgb
f
170.643 310.147 mo
164.903 313.462 li
170.643 316.778 li
176.378 313.462 li
170.643 310.147 li
cp
.980392 .968627 .952941 rgb
f
179.768 317.154 mo
177.033 315.566 li
174.293 317.154 li
171.288 317.154 li
171.288 318.886 li
177.033 322.198 li
182.764 318.886 li
182.764 317.154 li
179.768 317.154 li
cp
.772549 .772549 .772549 rgb
f
177.033 313.843 mo
171.288 317.154 li
177.033 320.465 li
182.764 317.154 li
177.033 313.843 li
cp
.980392 .968627 .952941 rgb
f
186.158 320.841 mo
183.418 319.263 li
180.678 320.841 li
177.688 320.841 li
177.688 322.579 li
183.418 325.894 li
189.158 322.579 li
189.158 320.841 li
186.158 320.841 li
cp
.772549 .772549 .772549 rgb
f
183.418 317.53 mo
177.688 320.841 li
183.418 324.162 li
189.158 320.841 li
183.418 317.53 li
cp
.980392 .968627 .952941 rgb
f
203.378 330.789 mo
203.378 329.052 li
184.055 324.524 li
184.055 326.252 li
197.643 334.105 li
203.378 330.789 li
cp
.772549 .772549 .772549 rgb
f
203.378 329.052 mo
189.79 321.213 li
184.055 324.524 li
197.643 332.367 li
203.378 329.052 li
cp
.980392 .968627 .952941 rgb
f
99.7344 282.956 mo
99.7344 284.689 li
108.642 289.829 li
114.382 286.514 li
114.382 284.795 li
99.7344 282.956 li
cp
.772549 .772549 .772549 rgb
f
105.47 279.645 mo
99.7344 282.956 li
108.642 288.097 li
114.382 284.795 li
105.47 279.645 li
cp
.980392 .968627 .952941 rgb
f
109.31 288.482 mo
109.31 290.215 li
116.541 294.385 li
122.276 291.069 li
122.276 289.342 li
109.31 288.482 li
cp
.772549 .772549 .772549 rgb
f
115.046 285.171 mo
109.31 288.482 li
116.541 292.653 li
122.276 289.342 li
115.046 285.171 li
cp
.980392 .968627 .952941 rgb
f
117.187 293.034 mo
117.187 294.761 li
126.135 299.934 li
131.875 296.614 li
131.875 294.882 li
117.187 293.034 li
cp
.772549 .772549 .772549 rgb
f
122.926 289.718 mo
117.187 293.034 li
126.135 298.198 li
131.875 294.882 li
122.926 289.718 li
cp
.980392 .968627 .952941 rgb
f
126.79 298.569 mo
126.79 300.306 li
164.481 322.063 li
170.22 318.752 li
170.22 317.029 li
126.79 298.569 li
cp
.772549 .772549 .772549 rgb
f
132.525 295.267 mo
126.79 298.569 li
164.481 320.335 li
170.22 317.029 li
132.525 295.267 li
cp
.980392 .968627 .952941 rgb
f
165.135 320.712 mo
165.135 322.443 li
173.485 327.269 li
179.22 323.962 li
179.22 322.221 li
165.135 320.712 li
cp
.772549 .772549 .772549 rgb
f
170.87 317.405 mo
165.135 320.712 li
173.485 325.536 li
179.22 322.221 li
170.87 317.405 li
cp
.980392 .968627 .952941 rgb
f
174.182 325.936 mo
174.182 327.664 li
181.505 331.894 li
187.24 328.583 li
187.24 326.851 li
174.182 325.936 li
cp
.772549 .772549 .772549 rgb
f
179.917 322.625 mo
174.182 325.936 li
181.505 330.171 li
187.24 326.851 li
179.917 322.625 li
cp
.980392 .968627 .952941 rgb
f
182.123 330.524 mo
182.123 332.251 li
191.48 337.653 li
197.225 334.341 li
197.225 332.609 li
182.123 330.524 li
cp
.772549 .772549 .772549 rgb
f
187.863 327.208 mo
182.123 330.524 li
191.48 335.92 li
197.225 332.609 li
187.863 327.208 li
cp
.980392 .968627 .952941 rgb
f
232.338 318.905 mo
229.602 317.326 li
226.862 318.905 li
223.863 318.905 li
223.863 320.637 li
229.602 323.948 li
235.338 320.637 li
235.338 318.905 li
232.338 318.905 li
cp
.772549 .772549 .772549 rgb
f
229.602 315.594 mo
223.863 318.905 li
229.602 322.216 li
235.338 318.905 li
229.602 315.594 li
cp
.980392 .968627 .952941 rgb
f
226.222 322.439 mo
223.482 320.855 li
220.742 322.439 li
217.746 322.439 li
217.746 324.171 li
223.482 327.477 li
229.226 324.171 li
229.226 322.439 li
226.222 322.439 li
cp
.772549 .772549 .772549 rgb
f
223.482 319.123 mo
217.746 322.439 li
223.482 325.755 li
229.226 322.439 li
223.482 319.123 li
cp
.980392 .968627 .952941 rgb
f
219.92 326.075 mo
217.18 324.496 li
214.444 326.075 li
211.444 326.075 li
211.444 327.808 li
217.18 331.118 li
222.92 327.808 li
222.92 326.075 li
219.92 326.075 li
cp
.772549 .772549 .772549 rgb
f
217.18 322.764 mo
211.444 326.075 li
217.18 329.391 li
222.92 326.075 li
217.18 322.764 li
cp
.980392 .968627 .952941 rgb
f
238.732 322.597 mo
235.988 321.013 li
233.248 322.597 li
230.248 322.597 li
230.248 324.324 li
235.988 327.64 li
241.728 324.324 li
241.728 322.597 li
238.732 322.597 li
cp
.772549 .772549 .772549 rgb
f
235.988 319.281 mo
230.248 322.597 li
235.988 325.904 li
241.728 322.597 li
235.988 319.281 li
cp
.980392 .968627 .952941 rgb
f
232.616 326.131 mo
229.871 324.552 li
227.136 326.131 li
224.136 326.131 li
224.136 327.858 li
229.871 331.17 li
235.616 327.858 li
235.616 326.131 li
232.616 326.131 li
cp
.772549 .772549 .772549 rgb
f
229.871 322.811 mo
224.136 326.131 li
229.871 329.437 li
235.616 326.131 li
229.871 322.811 li
cp
.980392 .968627 .952941 rgb
f
226.31 329.767 mo
223.574 328.179 li
220.834 329.767 li
217.835 329.767 li
217.835 331.504 li
223.574 334.81 li
229.31 331.504 li
229.31 329.767 li
226.31 329.767 li
cp
.772549 .772549 .772549 rgb
f
223.574 326.447 mo
217.835 329.767 li
223.574 333.083 li
229.31 329.767 li
223.574 326.447 li
cp
.980392 .968627 .952941 rgb
f
245.113 326.28 mo
242.378 324.7 li
239.638 326.28 li
236.643 326.28 li
236.643 328.016 li
242.378 331.323 li
248.113 328.016 li
248.113 326.28 li
245.113 326.28 li
cp
.772549 .772549 .772549 rgb
f
242.378 322.968 mo
236.643 326.28 li
242.378 329.595 li
248.113 326.28 li
242.378 322.968 li
cp
.980392 .968627 .952941 rgb
f
239.002 329.818 mo
236.266 328.235 li
233.526 329.818 li
230.522 329.818 li
230.522 331.55 li
236.266 334.857 li
242.001 331.55 li
242.001 329.818 li
239.002 329.818 li
cp
.772549 .772549 .772549 rgb
f
236.266 326.507 mo
230.522 329.818 li
236.266 333.125 li
242.001 329.818 li
236.266 326.507 li
cp
.980392 .968627 .952941 rgb
f
232.7 333.455 mo
229.965 331.875 li
227.225 333.455 li
224.224 333.455 li
224.224 335.182 li
229.965 338.498 li
235.7 335.182 li
235.7 333.455 li
232.7 333.455 li
cp
.772549 .772549 .772549 rgb
f
229.965 330.139 mo
224.224 333.455 li
229.965 336.765 li
235.7 333.455 li
229.965 330.139 li
cp
.980392 .968627 .952941 rgb
f
201.409 336.765 mo
198.669 335.182 li
195.934 336.765 li
192.929 336.765 li
192.929 338.498 li
198.669 341.804 li
204.409 338.498 li
204.409 336.765 li
201.409 336.765 li
cp
.772549 .772549 .772549 rgb
f
198.669 333.45 mo
192.929 336.765 li
198.669 340.072 li
204.409 336.765 li
198.669 333.45 li
cp
.980392 .968627 .952941 rgb
f
213.961 336.896 mo
211.222 335.321 li
208.482 336.896 li
205.486 336.896 li
205.486 338.623 li
211.222 341.943 li
216.957 338.623 li
216.957 336.896 li
213.961 336.896 li
cp
.772549 .772549 .772549 rgb
f
211.222 333.58 mo
205.486 336.896 li
211.222 340.202 li
216.957 336.896 li
211.222 333.58 li
cp
.980392 .968627 .952941 rgb
f
207.799 340.457 mo
205.059 338.869 li
202.319 340.457 li
199.324 340.457 li
199.324 342.185 li
205.059 345.501 li
210.799 342.185 li
210.799 340.457 li
207.799 340.457 li
cp
.772549 .772549 .772549 rgb
f
205.059 337.137 mo
199.324 340.457 li
205.059 343.764 li
210.799 340.457 li
205.059 337.137 li
cp
.980392 .968627 .952941 rgb
f
214.189 344.14 mo
211.449 342.556 li
208.709 344.14 li
205.709 344.14 li
205.709 345.877 li
211.449 349.188 li
217.185 345.877 li
217.185 344.14 li
214.189 344.14 li
cp
.772549 .772549 .772549 rgb
f
211.449 340.829 mo
205.709 344.14 li
211.449 347.451 li
217.185 344.14 li
211.449 340.829 li
cp
.980392 .968627 .952941 rgb
f
252.604 330.612 mo
249.873 329.024 li
247.133 330.612 li
244.129 330.612 li
244.129 332.345 li
249.873 335.656 li
255.608 332.345 li
255.608 330.612 li
252.604 330.612 li
cp
.772549 .772549 .772549 rgb
f
249.873 327.301 mo
244.129 330.612 li
249.873 333.923 li
255.608 330.612 li
249.873 327.301 li
cp
.980392 .968627 .952941 rgb
f
246.492 334.142 mo
243.752 332.563 li
241.017 334.142 li
238.013 334.142 li
238.013 335.874 li
243.752 339.185 li
249.492 335.874 li
249.492 334.142 li
246.492 334.142 li
cp
.772549 .772549 .772549 rgb
f
243.752 330.835 mo
238.013 334.142 li
243.752 337.453 li
249.492 334.142 li
243.752 330.835 li
cp
.980392 .968627 .952941 rgb
f
240.191 337.782 mo
237.455 336.199 li
234.715 337.782 li
231.715 337.782 li
231.715 339.515 li
237.455 342.826 li
243.19 339.515 li
243.19 337.782 li
240.191 337.782 li
cp
.772549 .772549 .772549 rgb
f
237.455 334.467 mo
231.715 337.782 li
237.455 341.094 li
243.19 337.782 li
237.455 334.467 li
cp
.980392 .968627 .952941 rgb
f
233.889 341.414 mo
231.153 339.835 li
228.409 341.414 li
225.409 341.414 li
225.409 343.151 li
231.153 346.462 li
236.893 343.151 li
236.893 341.414 li
233.889 341.414 li
cp
.772549 .772549 .772549 rgb
f
231.153 338.108 mo
225.409 341.414 li
231.153 344.739 li
236.893 341.414 li
231.153 338.108 li
cp
.980392 .968627 .952941 rgb
f
227.712 344.981 mo
224.977 343.402 li
222.232 344.981 li
219.242 344.981 li
219.242 346.722 li
224.977 350.029 li
230.707 346.722 li
230.707 344.981 li
227.712 344.981 li
cp
.772549 .772549 .772549 rgb
f
224.977 341.679 mo
219.242 344.981 li
224.977 348.297 li
230.707 344.981 li
224.977 341.679 li
cp
.980392 .968627 .952941 rgb
f
258.998 334.3 mo
256.259 332.716 li
253.519 334.3 li
250.523 334.3 li
250.523 336.027 li
256.259 339.338 li
261.994 336.027 li
261.994 334.3 li
258.998 334.3 li
cp
.772549 .772549 .772549 rgb
f
256.259 330.984 mo
250.523 334.3 li
256.259 337.606 li
261.994 334.3 li
256.259 330.984 li
cp
.980392 .968627 .952941 rgb
f
252.882 337.829 mo
250.147 336.25 li
247.407 337.829 li
244.407 337.829 li
244.407 339.557 li
250.147 342.877 li
255.882 339.557 li
255.882 337.829 li
252.882 337.829 li
cp
.772549 .772549 .772549 rgb
f
250.147 334.513 mo
244.407 337.829 li
250.147 341.135 li
255.882 337.829 li
250.147 334.513 li
cp
.980392 .968627 .952941 rgb
f
246.585 341.465 mo
243.845 339.886 li
241.105 341.465 li
238.101 341.465 li
238.101 343.206 li
243.845 346.509 li
249.581 343.206 li
249.581 341.465 li
246.585 341.465 li
cp
.772549 .772549 .772549 rgb
f
243.845 338.15 mo
238.101 341.465 li
243.845 344.776 li
249.581 341.465 li
243.845 338.15 li
cp
.980392 .968627 .952941 rgb
f
240.283 345.102 mo
237.543 343.522 li
234.803 345.102 li
231.808 345.102 li
231.808 346.833 li
237.543 350.145 li
243.279 346.833 li
243.279 345.102 li
240.283 345.102 li
cp
.772549 .772549 .772549 rgb
f
237.543 341.795 mo
231.808 345.102 li
237.543 348.417 li
243.279 345.102 li
237.543 341.795 li
cp
.980392 .968627 .952941 rgb
f
234.098 348.677 mo
231.367 347.094 li
228.627 348.677 li
225.627 348.677 li
225.627 350.4 li
231.367 353.716 li
237.102 350.4 li
237.102 348.677 li
234.098 348.677 li
cp
.772549 .772549 .772549 rgb
f
231.367 345.362 mo
225.627 348.677 li
231.367 351.983 li
237.102 348.677 li
231.367 345.362 li
cp
.980392 .968627 .952941 rgb
f
226.393 351.19 mo
218.931 346.88 li
215.396 348.91 li
213.186 348.459 li
213.186 350.186 li
225.33 357.199 li
231.065 353.892 li
231.065 352.156 li
226.393 351.19 li
cp
.772549 .772549 .772549 rgb
f
218.931 345.143 mo
213.186 348.459 li
225.33 355.467 li
231.065 352.156 li
218.931 345.143 li
cp
.980392 .968627 .952941 rgb
f
265.384 337.982 mo
262.648 336.399 li
259.908 337.982 li
256.909 337.982 li
256.909 339.715 li
262.648 343.026 li
268.379 339.715 li
268.379 337.982 li
265.384 337.982 li
cp
.772549 .772549 .772549 rgb
f
262.648 334.671 mo
256.909 337.982 li
262.648 341.298 li
268.379 337.982 li
262.648 334.671 li
cp
.980392 .968627 .952941 rgb
f
259.268 341.521 mo
256.533 339.933 li
253.797 341.521 li
250.802 341.521 li
250.802 343.253 li
256.533 346.56 li
262.272 343.253 li
262.272 341.521 li
259.268 341.521 li
cp
.772549 .772549 .772549 rgb
f
256.533 338.21 mo
250.802 341.521 li
256.533 344.832 li
262.272 341.521 li
256.533 338.21 li
cp
.980392 .968627 .952941 rgb
f
252.975 345.157 mo
250.231 343.578 li
247.491 345.157 li
244.495 345.157 li
244.495 346.885 li
250.231 350.2 li
255.966 346.885 li
255.966 345.157 li
252.975 345.157 li
cp
.772549 .772549 .772549 rgb
f
250.231 341.841 mo
244.495 345.157 li
250.231 348.468 li
255.966 345.157 li
250.231 341.841 li
cp
.980392 .968627 .952941 rgb
f
246.669 348.793 mo
243.929 347.21 li
241.189 348.793 li
238.193 348.793 li
238.193 350.525 li
243.929 353.837 li
249.664 350.525 li
249.664 348.793 li
246.669 348.793 li
cp
.772549 .772549 .772549 rgb
f
243.929 345.478 mo
238.193 348.793 li
243.929 352.104 li
249.664 348.793 li
243.929 345.478 li
cp
.980392 .968627 .952941 rgb
f
240.488 352.36 mo
237.757 350.781 li
235.022 352.36 li
232.012 352.36 li
232.012 354.097 li
237.757 357.398 li
243.488 354.097 li
243.488 352.36 li
240.488 352.36 li
cp
.772549 .772549 .772549 rgb
f
237.757 349.053 mo
232.012 352.36 li
237.757 355.671 li
243.488 352.36 li
237.757 349.053 li
cp
.980392 .968627 .952941 rgb
f
234.455 355.843 mo
231.72 354.264 li
228.98 355.843 li
225.98 355.843 li
225.98 357.584 li
231.72 360.886 li
237.455 357.584 li
237.455 355.843 li
234.455 355.843 li
cp
.772549 .772549 .772549 rgb
f
231.72 352.532 mo
225.98 355.843 li
231.72 359.163 li
237.455 355.843 li
231.72 352.532 li
cp
.980392 .968627 .952941 rgb
f
247.648 356.493 mo
244.142 354.468 li
236.949 358.615 li
232.37 359.535 li
232.37 361.267 li
238.11 364.578 li
249.878 357.784 li
249.878 356.056 li
247.648 356.493 li
cp
.772549 .772549 .772549 rgb
f
271.778 341.679 mo
269.039 340.095 li
266.303 341.679 li
263.303 341.679 li
263.303 343.411 li
269.039 346.722 li
274.778 343.411 li
274.778 341.679 li
271.778 341.679 li
cp
f
269.039 338.368 mo
263.303 341.679 li
269.039 344.99 li
274.778 341.679 li
269.039 338.368 li
cp
.980392 .968627 .952941 rgb
f
265.662 345.208 mo
262.918 343.624 li
260.183 345.208 li
257.183 345.208 li
257.183 346.94 li
262.918 350.252 li
268.658 346.94 li
268.658 345.208 li
265.662 345.208 li
cp
.772549 .772549 .772549 rgb
f
262.918 341.893 mo
257.183 345.208 li
262.918 348.519 li
268.658 345.208 li
262.918 341.893 li
cp
.980392 .968627 .952941 rgb
f
259.356 348.844 mo
256.616 347.266 li
253.885 348.844 li
250.881 348.844 li
250.881 350.576 li
256.616 353.892 li
262.356 350.576 li
262.356 348.844 li
259.356 348.844 li
cp
.772549 .772549 .772549 rgb
f
256.616 345.533 mo
250.881 348.844 li
256.616 352.156 li
262.356 348.844 li
256.616 345.533 li
cp
.980392 .968627 .952941 rgb
f
253.059 352.485 mo
250.319 350.906 li
247.583 352.485 li
244.579 352.485 li
244.579 354.218 li
250.319 357.529 li
256.054 354.218 li
256.054 352.485 li
253.059 352.485 li
cp
.772549 .772549 .772549 rgb
f
250.319 349.169 mo
244.579 352.485 li
250.319 355.792 li
256.054 352.485 li
250.319 349.169 li
cp
.980392 .968627 .952941 rgb
f
232.37 359.535 mo
238.11 362.846 li
249.878 356.056 li
244.142 352.736 li
232.37 359.535 li
cp
f
85.0084 284.818 mo
73.3848 284.818 li
64.8584 279.896 li
64.8584 272.456 li
73.3848 267.538 li
85.0084 267.538 li
93.5301 272.456 li
93.5301 279.896 li
85.0084 284.818 li
.698039 .698039 .698039 rgb
f
119.504 213.311 mo
114.344 208.426 li
112.691 202.872 li
115.51 199.89 li
121.152 201.237 li
126.312 206.122 li
127.965 211.681 li
125.142 214.663 li
119.504 213.311 li
cp
.952941 .882353 .454902 rgb
f
114.344 208.426 mo
112.691 202.872 li
68.5828 249.432 li
70.2363 254.991 li
114.266 209.099 li
114.344 208.426 li
cp
.764706 .811765 .443137 rgb
f
119.504 213.311 mo
114.344 208.426 li
70.2363 254.991 li
75.3959 259.881 li
119.615 213.998 li
119.504 213.311 li
cp
.584314 .654902 .372549 rgb
f
125.142 214.663 mo
119.504 213.311 li
75.3959 259.881 li
81.0381 261.227 li
125.142 214.663 li
cp
.439216 .552941 .32549 rgb
f
133.445 197.652 mo
129.224 193.653 li
127.872 189.097 li
130.18 186.664 li
134.796 187.765 li
139.027 191.768 li
140.369 196.319 li
138.061 198.752 li
133.445 197.652 li
.980392 .968627 .952941 rgb
f
131.457 191.768 mo
127.872 189.098 li
114.321 203.406 li
115.673 207.961 li
129.158 194.192 li
131.457 191.768 li
cp
f
133.445 197.652 mo
129.224 193.653 li
115.673 207.961 li
119.894 211.96 li
133.547 198.209 li
133.445 197.652 li
cp
.909804 .890196 .866667 rgb
f
138.061 198.752 mo
133.445 197.652 li
119.894 211.959 li
124.505 213.065 li
138.061 198.752 li
.772549 .772549 .772549 rgb
f
133.84 196.793 mo
128.364 177.701 li
138.474 180.483 li
144.786 201.72 li
135.641 199.616 li
133.84 196.793 li
.764706 .811765 .443137 rgb
f
130.264 167.545 mo
135.851 152.61 li
144.725 154.7 li
138.474 180.483 li
129.697 178.361 li
130.264 167.545 li
.490196 .584314 .345098 rgb
f
135.851 152.61 mo
151.719 131.536 li
163.598 134.778 li
144.725 154.7 li
135.851 152.61 li
.439216 .552941 .32549 rgb
f
142.459 201.623 mo
140.953 200.838 li
142.459 201.184 li
142.459 201.623 li
142.459 193.89 mo
138.474 180.483 li
142.459 164.048 li
142.459 185.229 li
142.459 193.89 li
.732288 .889765 .921261 rgb
f
151.273 206.22 mo
142.459 201.623 li
142.459 201.184 li
144.786 201.72 li
142.459 193.89 li
142.459 185.229 li
142.459 185.234 li
161.006 195.942 li
151.273 206.22 li
.415686 .541176 .560784 rgb
f
161.006 195.942 mo
142.459 185.234 li
142.459 185.229 li
142.459 164.048 li
144.725 154.7 li
144.948 154.465 li
144.948 183.803 li
162.763 194.088 li
161.006 195.942 li
.686274 .835294 .854902 rgb
f
162.763 194.088 mo
144.948 183.803 li
144.948 154.465 li
146.23 153.112 li
146.23 183.051 li
163.675 193.125 li
162.763 194.088 li
.529412 .67451 .694118 rgb
f
163.675 193.125 mo
146.23 183.051 li
146.23 153.112 li
157.12 141.616 li
157.12 180.334 li
168.933 187.155 li
168.799 187.714 li
163.675 193.125 li
.490196 .768627 .796078 rgb
f
169.229 185.917 mo
164.295 183.068 li
164.295 176.957 li
170.397 180.48 li
170.397 181.034 li
169.229 185.917 li
164.137 182.977 mo
158.337 179.629 li
158.337 173.517 li
164.137 176.866 li
164.137 182.977 li
170.555 180.374 mo
170.555 176.002 li
171.444 176.656 li
170.555 180.374 li
170.397 180.299 mo
164.295 176.776 li
164.295 171.398 li
170.397 175.886 li
170.397 180.299 li
164.137 176.685 mo
158.337 173.336 li
158.337 167.016 li
164.137 171.282 li
164.137 176.685 li
.721569 .87451 .898039 rgb
f
170.397 181.034 mo
170.397 180.48 li
170.513 180.547 li
170.397 181.034 li
170.551 180.389 mo
170.397 180.299 li
170.397 175.886 li
170.555 176.002 li
170.555 180.374 li
170.551 180.389 li
.611765 .803922 .847059 rgb
f
164.295 183.068 mo
164.137 182.977 li
164.137 176.866 li
164.295 176.957 li
164.295 183.068 li
164.295 176.776 mo
164.137 176.685 li
164.137 171.282 li
164.295 171.398 li
164.295 176.776 li
f
170.513 180.547 mo
170.397 180.48 li
164.295 176.957 li
164.137 176.866 li
158.337 173.517 li
158.337 173.336 li
164.137 176.685 li
164.295 176.776 li
170.397 180.299 li
170.551 180.389 li
170.513 180.547 li
f
171.741 175.414 mo
170.555 174.541 li
170.555 173.34 li
172.032 174.193 li
171.741 175.414 li
170.397 174.425 mo
164.295 169.933 li
164.295 169.726 li
170.397 173.249 li
170.397 174.425 li
172.07 174.035 mo
170.555 173.16 li
170.555 166.11 li
173.552 167.84 li
172.07 174.035 li
170.397 173.069 mo
164.295 169.546 li
164.295 162.496 li
170.397 166.019 li
170.397 173.069 li
164.137 169.817 mo
162.988 168.972 li
164.137 169.635 li
164.137 169.817 li
164.137 169.455 mo
161.851 168.135 li
158.424 165.613 li
158.358 166.118 li
158.337 166.106 li
158.337 159.056 li
164.137 162.404 li
164.137 169.455 li
173.589 167.684 mo
170.555 165.933 li
170.555 161.158 li
174.775 162.723 li
173.589 167.684 li
170.397 165.842 mo
164.295 162.319 li
164.295 158.835 li
170.397 161.099 li
170.397 165.842 li
164.137 162.228 mo
158.337 158.879 li
158.337 155.893 li
158.443 156.664 li
164.137 158.777 li
164.137 162.228 li
.721569 .87451 .898039 rgb
f
170.555 174.541 mo
170.397 174.425 li
170.397 173.249 li
170.555 173.34 li
170.555 174.541 li
170.555 173.16 mo
170.397 173.069 li
170.397 166.019 li
170.555 166.11 li
170.555 173.16 li
170.555 165.933 mo
170.397 165.842 li
170.397 161.099 li
170.555 161.158 li
170.555 165.933 li
.611765 .803922 .847059 rgb
f
164.295 169.933 mo
164.137 169.817 li
164.137 169.635 li
164.295 169.726 li
164.295 169.933 li
164.295 169.546 mo
164.137 169.455 li
164.137 162.404 li
164.295 162.496 li
164.295 169.546 li
164.295 162.319 mo
164.137 162.228 li
164.137 158.777 li
164.295 158.835 li
164.295 162.319 li
f
173.552 167.84 mo
170.555 166.11 li
170.397 166.019 li
164.295 162.496 li
164.137 162.404 li
158.337 159.056 li
158.337 158.879 li
164.137 162.228 li
164.295 162.319 li
170.397 165.842 li
170.555 165.933 li
173.589 167.684 li
173.552 167.84 li
f
172.032 174.193 mo
170.555 173.34 li
170.397 173.249 li
164.295 169.726 li
164.137 169.635 li
162.988 168.972 li
161.851 168.135 li
164.137 169.455 li
164.295 169.546 li
170.397 173.069 li
170.555 173.16 li
172.07 174.035 li
172.032 174.193 li
158.337 166.28 mo
158.337 166.106 li
158.358 166.118 li
158.337 166.28 li
f
174.472 161.14 mo
170.555 159.688 li
170.555 158.879 li
174.472 161.14 li
174.695 161.088 mo
170.555 158.698 li
170.555 151.649 li
172.144 152.567 li
174.695 161.088 li
170.397 159.629 mo
164.295 157.367 li
164.295 155.265 li
170.397 158.788 li
170.397 159.629 li
170.397 158.607 mo
164.295 155.084 li
164.295 148.035 li
170.397 151.558 li
170.397 158.607 li
164.137 157.308 mo
158.337 155.158 li
158.337 151.825 li
164.137 155.174 li
164.137 157.308 li
164.137 154.993 mo
158.337 151.644 li
158.337 144.595 li
164.137 147.944 li
164.137 154.993 li
172.078 152.347 mo
170.555 151.467 li
170.555 147.653 li
170.714 147.788 li
172.078 152.347 li
170.397 151.376 mo
164.295 147.853 li
164.295 142.347 li
170.397 147.519 li
170.397 151.376 li
164.137 147.762 mo
158.337 144.413 li
158.337 140.332 li
159.931 138.648 li
164.137 142.213 li
164.137 147.762 li
.721569 .87451 .898039 rgb
f
170.555 159.688 mo
170.397 159.629 li
170.397 158.788 li
170.555 158.879 li
170.555 159.688 li
170.555 158.698 mo
170.397 158.607 li
170.397 151.558 li
170.555 151.649 li
170.555 158.698 li
170.555 151.467 mo
170.397 151.376 li
170.397 147.519 li
170.555 147.653 li
170.555 151.467 li
.611765 .803922 .847059 rgb
f
164.295 157.367 mo
164.137 157.308 li
164.137 155.174 li
164.295 155.265 li
164.295 157.367 li
164.295 155.084 mo
164.137 154.993 li
164.137 147.944 li
164.295 148.035 li
164.295 155.084 li
164.295 147.853 mo
164.137 147.762 li
164.137 142.213 li
164.295 142.347 li
164.295 147.853 li
f
172.144 152.567 mo
170.555 151.649 li
170.397 151.558 li
164.295 148.035 li
164.137 147.944 li
158.337 144.595 li
158.337 144.413 li
164.137 147.762 li
164.295 147.853 li
170.397 151.376 li
170.555 151.467 li
172.078 152.347 li
172.144 152.567 li
f
174.741 161.24 mo
174.472 161.14 li
170.555 158.879 li
170.397 158.788 li
164.295 155.265 li
164.137 155.174 li
158.337 151.825 li
158.337 151.644 li
164.137 154.993 li
164.295 155.084 li
170.397 158.607 li
170.555 158.698 li
174.695 161.088 li
174.741 161.24 li
f
170.118 145.799 mo
164.295 140.86 li
164.295 140.808 li
169.529 143.83 li
170.118 145.799 li
169.462 143.606 mo
164.295 140.623 li
164.295 137.895 li
167.773 137.963 li
169.462 143.606 li
164.137 140.726 mo
164.102 140.697 li
164.137 140.717 li
164.137 140.726 li
164.137 140.532 mo
163.417 140.116 li
160.714 137.824 li
164.137 137.891 li
164.137 140.532 li
.721569 .87451 .898039 rgb
f
164.295 140.86 mo
164.137 140.726 li
164.137 140.717 li
164.295 140.808 li
164.295 140.86 li
164.295 140.623 mo
164.137 140.532 li
164.137 137.891 li
164.295 137.895 li
164.295 140.623 li
.611765 .803922 .847059 rgb
f
169.529 143.83 mo
164.295 140.808 li
164.137 140.717 li
164.102 140.697 li
163.417 140.116 li
164.137 140.532 li
164.295 140.623 li
169.462 143.606 li
169.529 143.83 li
f
168.933 187.155 mo
157.12 180.334 li
157.12 141.616 li
158.337 140.332 li
158.337 144.413 li
158.337 144.595 li
158.337 151.644 li
158.337 151.825 li
158.337 155.158 li
158.23 155.118 li
158.337 155.893 li
158.337 158.879 li
158.337 159.056 li
158.337 166.106 li
158.337 166.28 li
158.248 166.951 li
158.337 167.016 li
158.337 173.336 li
158.337 173.517 li
158.337 179.629 li
164.137 182.977 li
164.295 183.068 li
169.229 185.917 li
168.933 187.155 li
.356863 .643137 .729412 rgb
f
171.444 176.656 mo
170.555 176.002 li
170.397 175.886 li
164.295 171.398 li
164.137 171.282 li
158.337 167.016 li
158.248 166.951 li
158.337 166.28 li
158.358 166.118 li
158.424 165.613 li
161.851 168.135 li
162.988 168.972 li
164.137 169.817 li
164.295 169.933 li
170.397 174.425 li
170.555 174.541 li
171.741 175.414 li
171.444 176.656 li
.705882 .717647 .576471 rgb
f
174.775 162.723 mo
170.555 161.158 li
170.397 161.099 li
164.295 158.835 li
164.137 158.777 li
158.443 156.664 li
158.337 155.893 li
158.23 155.118 li
158.337 155.158 li
164.137 157.308 li
164.295 157.367 li
170.397 159.629 li
170.555 159.688 li
174.472 161.14 li
174.741 161.24 li
174.957 161.963 li
174.775 162.723 li
.698039 .564706 .576471 rgb
f
170.714 147.788 mo
170.555 147.653 li
170.397 147.519 li
164.295 142.347 li
164.137 142.213 li
159.931 138.648 li
160.712 137.824 li
160.714 137.824 li
163.417 140.116 li
164.102 140.697 li
164.137 140.726 li
164.295 140.86 li
170.118 145.799 li
170.714 147.788 li
.407843 .682353 .737255 rgb
f
144.786 201.72 mo
142.459 201.184 li
140.953 200.838 li
139.064 199.853 li
132.913 179.138 li
139.064 199.853 li
142.905 200.777 li
136.742 180.065 li
138.474 180.483 li
142.459 193.89 li
144.786 201.72 li
.615686 .796078 .643137 rgb
f
138.474 180.483 mo
136.742 180.064 li
142.9 154.31 li
142.931 154.277 li
144.725 154.7 li
142.459 164.048 li
138.474 180.483 li
.478431 .682353 .596078 rgb
f
144.725 154.7 mo
144.725 154.7 li
142.931 154.277 li
157.77 138.618 li
153.929 137.689 li
160.712 137.824 li
159.931 138.648 li
158.337 140.332 li
157.12 141.616 li
146.23 153.112 li
144.948 154.465 li
144.725 154.7 li
.454902 .666667 .584314 rgb
f
142.905 200.777 mo
139.064 199.853 li
132.913 179.138 li
136.742 180.064 li
136.742 180.065 li
142.905 200.777 li
.505882 .698039 .690196 rgb
f
136.742 180.064 mo
132.913 179.138 li
132.911 179.132 li
139.069 153.385 li
139.082 153.371 li
142.931 154.277 li
142.9 154.31 li
136.742 180.065 li
.439216 .643137 .666667 rgb
f
142.931 154.277 mo
139.082 153.371 li
153.929 137.689 li
157.77 138.618 li
142.931 154.277 li
.427451 .635294 .662745 rgb
f
150.72 202.639 mo
135.851 199.077 li
129.697 178.361 li
135.851 152.61 li
150.716 136.919 li
165.586 140.476 li
171.739 161.192 li
165.586 186.943 li
150.72 202.639 li
cp
177.409 158.884 mo
169.589 132.581 li
150.716 128.063 li
131.843 147.99 li
124.036 180.673 li
131.852 206.982 li
150.72 211.495 li
169.589 191.573 li
177.409 158.884 li
cp
.584314 .654902 .372549 rgb
f
177.409 158.884 mo
169.589 132.581 li
179.568 134.949 li
187.393 161.252 li
179.471 161.415 li
177.409 158.884 li
cp
.764706 .811765 .443137 rgb
f
169.589 191.573 mo
177.409 158.884 li
187.393 161.252 li
179.568 193.941 li
170.857 194.717 li
169.589 191.573 li
cp
.490196 .584314 .345098 rgb
f
150.72 211.495 mo
169.589 191.573 li
179.568 193.941 li
160.696 213.873 li
150.72 211.495 li
cp
.439216 .552941 .32549 rgb
f
179.383 359.01 mo
178.491 358.499 li
176.731 357.487 li
176.476 357.529 li
175.5 356.962 li
116.499 322.898 li
110.964 317.396 li
120.567 320.549 li
179.564 354.617 li
180.539 355.179 li
180.474 355.327 li
182.225 356.335 li
183.116 356.855 li
182.657 357.849 li
181.106 358.745 li
179.383 359.01 li
.698039 .698039 .698039 rgb
f
113.165 316.439 mo
113.578 315.96 li
110.964 315.278 li
113.165 316.439 li
cp
.466667 .392157 .372549 rgb
f
112.877 317.177 mo
113.1 316.578 li
110.964 315.278 li
112.877 317.177 li
cp
.203922 .168627 .156863 rgb
f
112.877 316.704 mo
113.118 316.704 li
113.165 316.198 li
110.964 315.278 li
112.877 316.704 li
cp
.360784 .301961 .278431 rgb
f
117.335 321.631 mo
119.629 319.899 li
119.694 317.567 li
117.242 317.154 li
113.165 316.198 li
112.877 316.704 li
115.951 319.448 li
117.335 321.631 li
cp
.890196 .733333 .517647 rgb
f
117.335 321.631 mo
117.335 320.047 li
112.877 316.704 li
112.877 317.177 li
117.335 321.631 li
cp
.733333 .580392 .337255 rgb
f
118.31 318.357 mo
119.694 317.567 li
113.578 315.96 li
113.165 316.198 li
118.31 318.357 li
cp
.921569 .854902 .698039 rgb
f
170.546 350.804 mo
171.516 349.118 li
172.89 348.329 li
173.866 348.891 li
173.866 350.475 li
172.89 352.16 li
171.516 352.954 li
170.546 352.397 li
170.546 350.804 li
cp
.423529 .321569 .301961 rgb
f
171.516 349.118 mo
172.89 348.329 li
119.694 317.567 li
118.31 318.357 li
171.33 349.142 li
171.516 349.118 li
cp
.596078 .478431 .458824 rgb
f
170.546 350.804 mo
171.516 349.118 li
118.31 318.357 li
117.335 320.047 li
170.369 350.883 li
170.546 350.804 li
cp
.443137 .301961 .290196 rgb
f
170.546 352.397 mo
170.546 350.804 li
117.335 320.047 li
117.335 321.631 li
170.546 352.397 li
cp
.294118 .2 .192157 rgb
f
176.304 354.129 mo
177.279 352.443 li
178.644 351.649 li
179.62 352.211 li
179.62 353.8 li
178.644 355.485 li
177.279 356.279 li
176.304 355.717 li
176.304 354.129 li
cp
.8 .772549 .741176 rgb
f
177.279 352.443 mo
178.644 351.649 li
172.89 348.329 li
171.516 349.118 li
177.088 352.467 li
177.279 352.443 li
cp
.854902 .835294 .819608 rgb
f
176.304 354.129 mo
177.279 352.443 li
171.516 349.118 li
170.546 350.804 li
176.127 354.208 li
176.304 354.129 li
cp
.772549 .772549 .772549 rgb
f
176.304 355.717 mo
176.304 354.129 li
170.546 350.804 li
170.546 352.397 li
176.304 355.717 li
cp
.592157 .564706 .545098 rgb
f
179.211 355.717 mo
180.107 354.176 li
181.375 353.442 li
182.271 353.957 li
182.271 355.415 li
181.375 356.967 li
180.107 357.696 li
179.211 357.18 li
179.211 355.717 li
cp
.603922 .262745 .337255 rgb
f
180.107 354.176 mo
181.375 353.442 li
178.728 351.923 li
177.46 352.648 li
179.94 354.19 li
180.107 354.176 li
cp
.941176 .615686 .533333 rgb
f
179.211 355.717 mo
180.107 354.176 li
177.46 352.648 li
176.569 354.199 li
179.053 355.792 li
179.211 355.717 li
cp
.788235 .45098 .415686 rgb
f
179.211 357.18 mo
179.211 355.717 li
176.569 354.199 li
176.569 355.657 li
179.211 357.18 li
cp
.713726 .392157 .345098 rgb
f
166.57 346.267 mo
167.95 345.473 li
165.827 344.247 li
164.452 345.046 li
166.385 346.29 li
166.57 346.267 li
cp
.937255 .866667 .45098 rgb
f
165.599 347.948 mo
166.57 346.267 li
164.452 345.046 li
163.482 346.727 li
165.423 348.032 li
165.599 347.948 li
cp
.843137 .701961 .34902 rgb
f
165.599 349.536 mo
165.599 347.948 li
163.482 346.727 li
163.482 348.319 li
165.599 349.536 li
cp
.752941 .541176 .282353 rgb
f
140.207 350.312 mo
139.31 349.801 li
137.55 348.784 li
137.295 348.826 li
136.32 348.269 li
77.3275 314.2 li
71.7827 308.698 li
81.391 311.846 li
140.388 345.914 li
141.358 346.476 li
141.288 346.629 li
143.048 347.637 li
143.945 348.153 li
143.485 349.151 li
141.934 350.042 li
140.207 350.312 li
.698039 .698039 .698039 rgb
f
73.984 307.732 mo
74.3925 307.262 li
71.7827 306.575 li
73.984 307.732 li
cp
.466667 .392157 .372549 rgb
f
73.6958 308.475 mo
73.9141 307.88 li
71.7827 306.575 li
73.6958 308.475 li
cp
.203922 .168627 .156863 rgb
f
73.6958 308.006 mo
73.9326 308.006 li
73.984 307.504 li
71.7827 306.575 li
73.6958 308.006 li
cp
.360784 .301961 .278431 rgb
f
78.1588 312.933 mo
80.4485 311.201 li
80.5041 308.865 li
78.066 308.456 li
73.984 307.504 li
73.6958 308.006 li
76.7702 310.746 li
78.1588 312.933 li
cp
.890196 .733333 .517647 rgb
f
78.1588 312.933 mo
78.1588 311.344 li
73.6958 308.006 li
73.6958 308.475 li
78.1588 312.933 li
cp
.733333 .580392 .337255 rgb
f
79.1293 309.663 mo
80.5041 308.865 li
74.3925 307.262 li
73.984 307.504 li
79.1293 309.663 li
cp
.921569 .854902 .698039 rgb
f
131.364 342.106 mo
132.335 340.42 li
133.714 339.631 li
134.689 340.193 li
134.689 341.777 li
133.714 343.462 li
132.335 344.256 li
131.364 343.694 li
131.364 342.106 li
cp
.423529 .321569 .301961 rgb
f
132.335 340.42 mo
133.714 339.631 li
80.5041 308.865 li
79.1293 309.663 li
132.159 340.444 li
132.335 340.42 li
cp
.811765 .780392 .266667 rgb
f
131.364 342.106 mo
132.335 340.42 li
79.1293 309.663 li
78.1588 311.344 li
131.188 342.185 li
131.364 342.106 li
cp
.627451 .603922 .121569 rgb
f
131.364 343.694 mo
131.364 342.106 li
78.1588 311.344 li
78.1588 312.933 li
131.364 343.694 li
cp
.478431 .466667 .137255 rgb
f
137.123 345.431 mo
138.093 343.745 li
139.468 342.951 li
140.443 343.513 li
140.443 345.102 li
139.468 346.783 li
138.093 347.581 li
137.123 347.019 li
137.123 345.431 li
cp
.8 .772549 .741176 rgb
f
138.093 343.745 mo
139.468 342.951 li
133.714 339.631 li
132.335 340.42 li
137.908 343.768 li
138.093 343.745 li
cp
.854902 .835294 .819608 rgb
f
137.123 345.431 mo
138.093 343.745 li
132.335 340.42 li
131.364 342.101 li
136.946 345.505 li
137.123 345.431 li
cp
.772549 .772549 .772549 rgb
f
137.123 347.019 mo
137.123 345.431 li
131.364 342.101 li
131.364 343.694 li
137.123 347.019 li
cp
.592157 .564706 .545098 rgb
f
140.034 347.019 mo
140.926 345.473 li
142.203 344.739 li
143.086 345.259 li
143.086 346.722 li
142.203 348.269 li
140.926 348.998 li
140.034 348.482 li
140.034 347.019 li
cp
.603922 .262745 .337255 rgb
f
140.926 345.473 mo
142.203 344.739 li
139.552 343.221 li
138.279 343.95 li
140.764 345.501 li
140.926 345.473 li
cp
.941176 .615686 .533333 rgb
f
140.034 347.019 mo
140.926 345.473 li
138.279 343.95 li
137.392 345.501 li
139.877 347.094 li
140.034 347.019 li
cp
.788235 .45098 .415686 rgb
f
140.034 348.482 mo
140.034 347.019 li
137.392 345.501 li
137.392 346.964 li
140.034 348.482 li
cp
.713726 .392157 .345098 rgb
f
127.394 337.569 mo
128.764 336.78 li
126.651 335.554 li
125.271 336.343 li
127.213 337.587 li
127.394 337.569 li
cp
.694118 .905882 .952941 rgb
f
126.419 339.255 mo
127.394 337.569 li
125.271 336.343 li
124.301 338.029 li
126.242 339.329 li
126.419 339.255 li
cp
.203922 .552941 .54902 rgb
f
126.419 340.847 mo
126.419 339.255 li
124.301 338.029 li
124.301 339.617 li
126.419 340.847 li
cp
.215686 .352941 .364706 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (MSI) ()
%%Title: (2002.i109.009.P.m004.c33.marketing strategy concept icons icomstric-05.eps)
%%CreationDate: 4/24/2021 6:46 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KlWY==mdU,L4O=!;l%PE=#\22>B*N$B+GA00Tg8&_)Nk,!Ebd;>g[jCu\%e(Z1S.7&But6*:<oH>TK'5fbH`D:o"r7EX5C#0
%R[76\^XmKqDM=I4OgAm!agI*mrj/iu]QWXc8%'nU.fG+ZllC4P'u/MZDUhs^mTON*B=XEl-ssh=jkL*U?>oe-gT$SjfC5?JSpaY>
%ebrCHdjXs2/8oL#H,dVsV@28_"Sad.4(imL!1inu*Y8C_H,%D3>C)W,*<*GBl*Eb!B?+VV*K.eL(AqrtFrV_*[IK</5C[s3BF9)[
%FF3#VbFN[WenRNACH2Ir/]*:RU46&.f6`+@>hBC4loiK7MP]*:)^/Md/I"TSrgtA6'>G,<!3#ou#l[&)QM_&=VE$GFM11JFMV&.K
%%2_hCHq`W<8>63>/92s1k]U.s7_*Tr9q=gkEU#L:olACAP>/$I\"TAOi4kE3<-+EohK6`1H,ec@bHpd]bLokmc>5"L=L*&t./ohr
%s0&icF2(uQ4&R+,S_cs*^G,+IOsMQ_c]7mF^[n=*lN,Cl_`TYZ#Hb"5LVX82?E0@&E+iats->63bFM;@#85jmpMmXmEiu*"He!'$
%Q[ei[[mYC[f_1f4XgahI'gco-/1X6^Pi[_gg,WVEAe'<A0&SZT[Ad2?&I2cA\/h*Y,7rtS:@5@<>[)26!#R"[b',qTC+/-Qc+2ge
%c:-U?rcm^h,SjMNp&(\]T$Xh2")YRcq1B@IHDap%DDcAC](kTW%n+2OWjaVBVr9<,1I0?+93sU9lr=G-:hq975Q:7HI-."@ebejp
%DPu$'mklb%J,Era:i2d#\[R$afBU/Q<ca&Zhr0nl\OF5sF/PRL"`V9G6(<84ep]FW+n41TF5g-n0)nrMS)sOOQ9jVc#R#7Iq57S<
%[5Gms>o&Ahol@CoamflCK_r/AiKH$U;hu&*qRuWkE.Y=$@9>K)hBmu,8-A7S/7%YpRL'ZJ<poVZC3?\!_WpfC[g+ste]I]<qkGj:
%>l24W<?.oir\i?&Epj@D&&297#,<;i%7_7*?,3ab^0RnnCR:T4ql3]=D0>^2X5%Ei<=c=3HlhpUJ&X^iDe>G@>c+(S@8lZZlr>s"
%G6lnsHtS=`$bhnW'7;c4]r6M8WRa="#;!`cD,1'[K>?s-c8,deaj7tPX'Y*M!phu/#aS2e;YNt9G'eZbX`RJ"`2/GjoV5fa,l!]q
%l(@AIVsU50"</M.d]`?AE,E$%D)=n,-WfE<cUUO64:+m=B<\/q44_QsaM!NLikpth]3q<*coP;=Ia5(3Dsn51?\.IXIkK;%BM"FM
%5=^+.Sm2-);/a=,.kgsog3LHrK-FNSL4rC#*,ecdWn"-j^WB^,h!,qs,f,92=77NB%3I28_cV/J><N"_c-'dq5Ki`6D"Ul3g:J9M
%XBBFs<^;1O[li3b>kteNX'Q!J<5V;4PD,F>1[sr/FL1Hm!t.=@a$P\gSsgT[R\L8)gpu%!J[\298T@nc48TErh.P1p5F[]+fjsTm
%1=!sSDJRc29OadYC^a",MX:!tkMSce/,nb;&DnBd)?KDc0LSG&dHie%/%tMGIMMt8)c)?hB'Z6o",gkMCL,d,6P!=EMmT&iF!uU7
%)=.(RIQblgVA`3G;ofpOBQh\E?,+nZJ+R12A_A8:m5$5]5obtp*/r_Sr6nM86R.$S4A<#ueXD+i8OW5]X%CDO\dbFeBXN708BAS>
%fQ:""S[A6aMSCZn#?doPdgSru]l9=>bFQ!KbN0h?JfA0o$!8eU(V04LB/atWbWWT&@U\]X9sJ>Dbrr[s:)WtqqQ!Z!HWtm0%'r"h
%mH2.=5Npj5L`"BB]=D]9GO=Oqh;#E-)m5qE=,P!I(p.Je)WGDaL>OG-BKH9/6R,(Y6X*[']V-RbaCLdFT4L],:i%@h)d0*930P5U
%[@L/V^>h.UIqGqCJ^\qR!NAlAJf6IY\cLo"B%$[ah5"0;[d1>5L3]b_lP7XabeR*.FAbetl[P1LAsagI`-^T@7[m\jS.nUA8(OZ%
%,<#I:jP\?Fr!`V.@l!=_:AKrR1lZ603Cbi_1mTYWI\Vs<bSaO2)c+`jY5/sBk$SQI,*d#[gai*)=N"Ct8[/IFeB:u)hTOGa%?ji!
%9Nf_a;I#48STVYGc`];5UR@%KT9r*iZAV^=8RYWAhrJ%0EjO?<U^a3JgHVkP*9:6204eX+lE,<ikniXPX7CN6r/#CQA-pI\MuK>+
%IdnjcA6*V4iV:B0\_lf*b0@')Z8^T#TV;KAL]'MSHkpk@08Ia5&^;b)f=*Ms3R(_M6R6J[e3F4EY0@B&@&"UE#GtgiAXS`59O(AT
%LC@&2lTqH9&K\$qnPJZ'H<1QjQXtZ:WJr4Ij9u[<aQ/H)naL=+g&KhS3K"+S^UV>0b+'OJSP(%0F-7o\Jr9@Ao)&oAP%ViRmS6K)
%oP&c/S2)Ma1ZSS,9_]#6:QWa;JdCs(jN3u:F/=JdaOF><W*ncN`q+93InZ?Xc].,N`Y3Nck3'`_'-s0A)\7u^bg29h^%cN^\T,$#
%ERE*Q1N$gS5\?%R?5$itT[E.N0#.ZP!I#oL"V>N7jbeB<<Ek49YE[#n<YIU)AsUu2pr4"h-WYOofo*5/'N[MEOm18peZj8t1g$_b
%*T7F^`P7LS?^eFj?lgJ\8''g)ZCC-GouiBa2qMK1o@Id&C@/=7rb&?5pNu3H^Ui:ePa_ac\`TTlH0B&c3r<2/R:4RY"n=Bq*^?,$
%@u4bVs7#@D>K4a=eokN.j_!GMr81\QT;ePecuR!3RUV8';u>6?LFrOiKQ-['?YZU/'RP3h!k.7:mCI!s1'kVRr"o;,jB!\;D.I9u
%kO1=]FMGb%pm%gjE#p[%T[>bJi&VC]bQBNi^rnk0E\h>K_^m#$,,6hSr\>"sbQBNi^rnk01(V%)DGB&c5/`MSV$$^B!,3K>qF*_G
%Uq8dN+AH,El*ame^3,\jIS&m<jkf-9(TaReHMe65>GMJ/>[*io=r#_3.&UF3AXSU)SVhn?k]C%p<+IG21@936k%3eTG]TBVEgj/e
%nJCT6WS\l^Q(6tujMWEYg3:X)T$%)gjuA:^mD#m7cH:O[.l]-\ESDs&&c4ILn=#3%R<d_5L"q8-?F)@@J)ka@lC?O$Q7laBU`%`D
%ZPe.(=eYm7ei0q6p_W7efs2H`1WZp!bsTr_h"^&$01JY#D2UVQKV&ZKoZkWd9X6G9`C8DI+o*.nRdnIBAorW4mM9Ji%'-=q`P/?I
%d(mf@6Pf9n3^NZ.G!5A73,Ek6\(\El[oudoA[utj03>=.Ersj+QRfK#cSZr>C$5;[mIlHO2^t`LQqTOsC,mM'j#4^QWF]$q_4/PH
%FK7A#mT$gOqJ1HUZ8OL;2$54D[k>'@X)=C='4J?@#3IfAVH9J9mjLtSgh'mADt[rBrH4CiVVqL>c#V+LD0XK^h87oEAqp7lITu(A
%KZqX,9W(=G@4Rf6C-01,:1tuTmE?$mWA\;M7a_,<q:m<cgI+V"ju:AZegR!E+J83Yp\Y6ke7jO1%J#'tb\rThDii<6a3DE.1;?+=
%h]1gKj88uSXDX-k$fpmgEoN9=m2P-a!r8t05lQ+uM6eqA^NPfgg1KL@/[SZmffs<dER?4:HKG"(<\6s46@<^I>Qj8gp3aF(D]Ai9
%IqG]lY;`$e;pElbYL]`_3nB-m@DR,b[<a1V,-<63ghFNEhQQh$/CiWj`Z*)?)%PuXb?_m4nUL1^q(,V'@dPN^dC<alqa`0+DGAt9
%"1ep&*G.Wnn%uQG6]tqk;'GjpQCI^r)Nlo;Iq_+NOO9SuLLN_nWu=agZ`CPr#K,-HFK:7&HFN>bgQAB+B)K;2`WR+*iGH:U]5ej*
%9<;YX^8J]T`9du,c#AdO%-uoKTIG)C<rDEbZPb`L]6-,W^YfjOMDCRd,Q_6nA@P,h1CE*mo\@rcdj1RI9$Z4bT'SdiJ)PTD[E`Ur
%q+OUn:YQ<Pb3)o^@4%_41md0WM)5&fCNM)THG\C3e8JBJB2X`E-6^Po3?rb&`GB`NAs3udEr2-TejP]h\;PtudSDsdB(mLm$Ofr^
%o>lUkZJRDVm?b0NkAcPSaBj&Y?lo1>2s,dk]G9`)Imt*qU5/?@)KJm>FOj>@ruh_ee`07$6dNU\7m7/fa]Dj=8XKo5mqmRAAY/]Z
%chs>Yk&9?>SXLBuNYuFcj#>.L9moU3aon<CS2Re4nJeSp1FRY'^^&QdZ$j>MjX]bndqWFPKK#A7-hUZl05%5d="2`O#FTCJXm)XK
%.bF\MruAB^75]IrgrZMS7E`eES<LckC1T,b>*H<BRMf'i\PhZNqXnlp#XtQZUtD\)X8YPiRAmi/a)Ck:?89WK\__L-X8rY#EgE0s
%j_D3SWt!SJOXU[,:5Z)'`fSK8lMVI\@Pi_bp64LacCb6>R09eKcX']FT*^.7S$b^4L%*Cl@V5S5f"@7+PTMhpno\OiGl)93%.hj1
%B^+G@7>al4iu^bo(*3"Qaf'GZg9U6'C/ZrsVKc_ls&d9DL8u&u4mk;EgGE8Ys6?&ri3;&224%_Wk%ekKjp&"L>Y:#"ef$?_6(2Wq
%CN!$L_>g2T<ilf;Pg$-Rr!ug\SHqFtjKqjgf(rOpcW%dglb8!PVg[*q[k9HV-I"F*fJOb?CVI@ARfUd#5u-U3mse[8&^+8n/LZ,!
%WgV][P3jSBo%BD@o!:J@'Ju<o4"E,q4'Cih9X63>-76%Z`Cqs%7b@rR(YD]_(-9$4?jjT_ER$ss6@IcoB3EYYDRm$6m1$n"8bngA
%S\!'SU1mgo@:AP-["N<a[Ab]>9RF%Dn\=KQagF=M7AcgJaKB*%Y.!*^RI)G3d;Di[L@;b0Y*UU#cZRR+l]1R[9:tOA7>GBl2N/%W
%4RISR0f$!gjdn9<s-_O7D[&-!4)l5"W)]>%>!9>&`Y08XVg2%>aN]Ug1YW'ZjpuJBjC?UKEm>ceN6TE@1!Z9E$_0H$3F[$kY>nBc
%juA8on?3fObfYUa?fIU;q=mIZR-+Rrb=);L50#ccj1"$g1ZOGMY#LAh=&e@^)H1'ah80uFjs_8@P`>4:q=17sbi2Cp43D#5Ap(Q<
%Zs+FWRJUa.cW@_aG;mb#Fa&Jj);(AR*0`!J9R-ibs)(57bQV6adE\1N1o<7,Ol;&[4JFQ?:<Ld3-2/0C1pZU)O(c`^)Uk];An>$+
%&WN3NP^,Z,-6aAJD2N";@V03r)Rl@T`@\#VnNRf6i.X>!ecl^NgL_;]?qf)2Eh%D4_Z)1\7[6Nr?`W,B)EA]:nnE5ajtD&bEK;Pn
%faB+q('Ou&]^`0fmPRQTHN('6@L&9-\GOlX_Q8!Po9U3SrncGfS,7PRIrEd7?3\=6[ekE\n1j)7$+b2=Dsm/oK-"A($(O))F,+]%
%nBDufjC4N=Hl7;WEgn&_>?5Y@2In@ORZb5-2`3dk/aDSqT83GMQHW[Thrcr((N36lAJUKs(T)6t4P\q_O)@Tk3QYpDpMe;_5+4Ae
%G+53/=o=c")Oo1RAZi].b3PB1Hj2ZSG-okgNTpgqH+2blbO(.Mc1'14\*t4d_r9hW(esQZ'ut"N=n_brfjKai(<k#6dAD)]VLJ-\
%A-'oq`\ZYqRHGIU/^2GUcbdoU09/AR_h7?WEjP#^:].e2alXNi^G78;N\d3pr&T>LY=u?YT)QBQEU2hF0TeXCFL+07(;-\+ak`gr
%laH-@MVmom]n:?P-F]L7):2qS:n.hfk<)*O@!;7i%*VEDrgCk6R!-G[jOA[i`/c27j(N'#O'+SBeSrAdDAurU4W(%AVH^g+B8D#\
%N_1.0T)80F[:r\K=e>Qi(J9regM4@aq#5b!`(_n"om4'ZV"t5ErZF)##Hn!J9X6/&9sM37FBXYT;o5"uMN<(cl'F2j#6X^nEmVs,
%$:nqn.Ak8\^WJbsa;XD/]lGL\4saB-MPUaY<3MS+SS1`XLM!TT6'IQaQ%#Jm,^Vjj7rLL=[Q6VH=Yk"tXk%g+5;VgE1n>=^))b]i
%2:_LQcGXDqU?s>:W\PuZC6mSJU=DXpMfQ/TaL#WHs!\:m5sa)ED9>8g_T^Lk2_2A3"RGG8&=dC-9N->)A-e:A;c/-s^_ET=<,Pbe
%b.glkCMIKslF5)52Sb8f4Yr[f;RoN4-s;q*qSb287@EOJPY<!AqK#NRXeVf%R-ZpOjklYo>Et+E\P9U_=dYWRrA0WL0^Xa56itLn
%(M/Ks>NId)U1@\EqGkBp(F@V-\ZO3?c!jFBVM-oQ0p1.<3%Ir(h0^P]YI)469Z0.f`?ZnB<E0KR.5TEgV5nkZ1M?\D;)g[eB<\nl
%C9a1Vn57/=]rZA"bKe<Hh9?X>L=a*$MJfT\-EZJeM!80lr<nL#Ts.%GZ^k\c:j<sl,O"JoX*FhMH@T[?7DcP'8qm8d+9-W:k+B3D
%Z_Mggr]]D^F&?"=>N^HQX4-NDjUTGXng16a_bLq[*;*`8I(EUdf5$^>n7C(t<i`qAJ+kHp.3G`Wb2jp8^dOEWIt4p-oH=Hl.)aFc
%C.t`L0b"$ds.^cq4FZianQDR746c^Fqd!;50:T)YRf#*L&rWAI*6S5+mgDYrAm=jAF&He\l[I4%a;s8I.aj=V]e:Vk)#hZ>[R#JB
%4EEXIRf!DC;ICsB)2)/`C[VZ+"epJCM8-`ST=tEo0,TN#6132<,?OgG5!6im!.@gtPbU"<K^u,NY(oB<0f=9!NllLZfCK.b8*ARi
%?MsHKU#`N^S#p0tpt(+ImE^e[`4n501%8fm6"KK`IrSGoJ*E$o**(qC<ld]pl`X%NI]_@_9PAIF7$HMm-.!G*_ip^Po2Zl/rBFSG
%`1Va/O@0mhPs-7[(<\k&UkQ-T"[I@N?R*/p!48jXjl=22*uYC\s5-.!VHsJo'+8G?GM%VU`<XZUfq7A$GCAOY$]X\/Odg2Q9fMq7
%bR[^N>=[&ChPsiX,L'jrM/'Ua'b$\cGSU,'LDJ5PAELi!A\"VS.FO]H;^cNI-pp_.KsPS_;(J8Oa;dZ)ZHVsZ"TalTV;L[J)ZQI6
%QjPHq:%bXeR@Queqb*+OO,E.)[u>JKm\-ipZV0SuZ#3<+hZEV_l+((m\U3kuoPa3IYY;Y$>35IVEU%jVhKF^A><V]'oc\]qHGkY=
%&jG>4(&ZHAnN8^m^MN@"EDj01SL2[V:%QjlS<<`/bde?C9F4cNe2(7a1mg@fZ&qm=:<(U/@13js<i\*:TCZ(oN2h=+U3G7hALL?k
%M+N/1C?u;10LaW^^O\6_L'?pf;aEpkn!0q]EK,Mdn&E<$X3.Y<-CN=dF-*)]l;la8X!imE2<9FYXskeNm&Bd(G.IE]\U.6ODdn,/
%p'Ab\Fo8E"q:!Z\qLA6[44RN<HsWl*H>5;N2o#^$K:i`WBDm!k^YHKgQS8<m;6/Mk.ipnqpsiQ_OZW9KXa2'*rtg[L1d%TqX<#(?
%G6Bq>SE?OY45d]SkN*3OmT&\bh!Op.g4+DIS^rl"MJ5JmEnKigqn5j68gl0LKsP*&fCH54,sdes]q]l]G.r.1=q,+:%!&,u]oEVN
%\)$>ggQh(^c'0aFjU1rm/"kRV2s6s7Ua(*>CfRWB^uK"((!M<]f#tJED&D)HN>GY&R3$m^#%LU"q)L.HGq:/l#V?sPK9n*4HKVDN
%VjaYohJnQBpO9>I7Q*H^,^3WXfmqbaBb*[&,!D!'g^/Qq,F`F9NasP+9=8BF::]%pQTKHf(!*IV@2=Ij9NnK:^nQr=Nb&i8)3!9q
%c?e+`^;Fb`f;+-mU2BO2JQ=,(W9q+I88k=Z$*n3XHM+;r]RKn+HhY\QhAs@ONpWTn-C`7lX2fpmqt>]C_,4uU\)'/!f8olR^YXsk
%RARJh>A[Ya76`n(b>8/jG(TuhI](ro.p,AU(ImtS\)$kl(M_#7NDWtNg?QOnj=UKS":GOZB]XQ5&Q>,RX_G?!X6!aRQIX\p,[MP9
%@;Tte$[\_!]rj3K>G)>C"[5XXa(\LpH_&`1?rC*qA4`n[]tEd";.o(crBL7,lEG/Go0jbQV!LOpPnUq3]\EV#pKNo'*Aql(2b5lF
%K%<2Yhq9MLg?P<&U2uB$O5RcNYI.eQ@D(Z>=B_%>Dt5DR\7?gkl#:LMngD2lQif&oo=Mt/]4n>EYP"gNC#dT2W.naY.]lIrYGM_1
%DY7#1(]Bl(A\Sat'Vop)/#J,a*H$Bt[D2Z$M!B[9NlWkl\WK%<cl?jD]6Mhc?Rn(9Eml#>9o<lVUVm2tr*.r#8:2rA(Wl%aSc!eH
%ibKEX;d43g0c0VG7khh0'C=hLX`-IF[3h4bq(?eZ)hegC0Y8U1&ob`X>u3dl&FPpse8^H%.+R'MWfJB&SS3?u28DdO!uQZZSVHE%
%?Qd"@YTm3+MNtF]?Q#!7L[g([`Lt-5bW]4_HIQm?S/K@?1`eefd<5U]9JjmOA.iC"bXUh(Kjci\)HX\_cLW#I\R&@WKu+W9GPiD[
%-(#R:IVdQQgOc77eCGSoWWS_]VsCg:G/nQB]@XIa3K22TLj"ZXOkd;uYsdV_4`F>=-,4,amklb%3GnX12:-uC4KnDrAQ8X8I3Xu@
%hS+Ek\B^`,0&!nHaGW<61*?h1Dj3?8h*h.I!K*W?GC<<`I*W9=i+J6]hB:!i2An^NCk[p81\ea@`$<VkZ&n4.;sss(hrfWg]2pEa
%FaNe/<?rm[M$q6E*A9=;m54Q[8DA<q!Np=RR@T4YFX1"-;AQ]7S+q0=,MNZs%VR-b<CWftk=qC+e'M,+`jur-HNRJAU71>0#-DVL
%=9J@[=KC+Yp0-iWFGeWiNJ-9?MY7YH>m*/UZ#`;sX(@4`a73LN7K0Km^IOk/%<uBI;$-bqd82.-g=?7D72hVW*@+3h,sD?^>E'\O
%JZL.*U5_JUDjQP1hMcf2,P5j'n('+\\m%pbWR5c)iZ!c=[qo@"lD'TWd*,dh%S*P^k^4XYY'9HHZpusP[$n5:oIp\/N"9_C=E1Rg
%<3D!6mSre[%N;&&'_='9ncI$mX&eDuU%b#0N8':92@%Y"AU_,lb!tYQRMZ-rnS/pB[ZM%!*5Q?ud]QZ#%T.GE;5Mqd.a-2;=0%+B
%g0cOA_Wp6+L>e4'LG?Sg7_ad$j&!.Dc+98q2cP<Q1SOfUKe]AT8:7Vl$^X\]g&ng2fJ1aMN9R&[Hi9m4PtnACWXW-)2)'hU[6s]!
%$`[mYaq4M\2!_g0kmj2uW6$f8YDT^Tl$SJ*XD_/XCb:X0%';lh1,RQ28R"\$c!J+f+//X$UNYgpeJtUcY[+_f*iqphD77$kDA_e5
%2.a@,kFuZQCsorkVLM_YW`'FEKg%?GbM<acKFMAUBo]u0-]"rG0UT$+TOISp%"=!sCp^F3hntgV'BfhE,8FReR?ONFs)."pdA-1^
%+P*WXn/ut',d$<BR^8.-:i;=tpb?W'_hK@%32.j<Gf+mI:hD`QNXogVC0-.(*8[DOD#/F8C4D&E""h+_2A`j;Y%g,7'cnuU2CXKO
%T4i-5TC#lsC0I'cl55t,b'tJn,!isg9H8#Y],A%&hX$uoX:1:^d7?`$]#.g%hR8B:pX.5T\i>t0DPf"'\&pl'QV3+G`s'r8I9t\j
%3Qr)X/8'[>;8]V%58rT\2Sajmc-3Q:KLY/FesaLpR:?l'fLk2e:eNHXg$2iH^1fE%:f-QP=Fh4o3[t*n++T,JCY/MO/CpPf7`D+*
%m;b!Z\>(5YMkB_.ofh8V>Fh:-CEp0(T#NqaGZ65bST\b-"5KA$ZonIH@4u(:,\9i\<<k@KgMZ6ci\2jBrC`^>1a,[i\)gXhkR=jL
%,'4f?qt&h3'aR@5h!oG.+Z\f3k?sLhM[eLt?WV\4f.I#ZdnjrEE1S-@n#=u,M9_Bupn>2Y"Pj4$U\W]7/k6>"GK';#Ljul0\Midq
%\Q1NLj1>iK$^)Zp?C#BO>cfHhQd\?53<pQ0#b&P,Y1LhdRWZ.ZO(+Gsos4AL:H[tq\(gRZ73#ranbNk0][n]TD_a^-HC"NG#kii7
%ejW,+XdeW8YORWMIXl6D?l4Y:0NU<Cp4s/O9hMD?mCi,;hq%_?1<d7!BW)@L,c\:=YVcLt]HYp-`0sD99?!'G&Il,D!"(8@&i)_=
%=ZH.C]6"$Z:;KN*goQ)S)JXCC`!<DVX)ca)2>eXlT#`HXT%4>7:#nb$H!Rb#,d]N\T;*/mQ*M6*c(eW-FrRNKU__S5^lDMLgZ>lb
%6E0duGJt/qW(i*Yi$&ktE!Z1llr?#`"m0d(D\0u6NrkSS(-kt"e`pCpW\Y%K"n;*.bJ!lF:VRQ-iZ15GgS$M(ZIZ*hicMY.r],YZ
%i>NR<8aB:r3<.P@l'aZVZu3@A<??nJX2=M[/o!b7-*eU;Vd&HNK9]P@lk]k!S"L@+BrQtH39D$tC?`9+d;NX?PHooQ!6X$JQ:47H
%-q=d')B?8C.N0Y*Bt@+[p#.\I;ZO^qY2c:I/[]C3jX=_N>$"q'%[o.aQjfH*WET%b(!tV'q&*puMW5kes%^IZaT:99RU@pfh8RB3
%(P#rO_N)D43kaf;cC<p!4c;l`(ZhW^gm,^m!5"AS`2OeMV=l=/n;.N9JTIbmE7-s@Z"Q"Aa!crc75/l;Ud^hr'-6R4E^^4p2'TME
%3<+AG`WfiGVK"/=SNfUaEb\W,QlLM87`>+hG,D?&B^.:4[(7!#\na8J(*.T0hs%%Fi$-'O@Md]-*6sXhi>fm:D,-P9_9hWj[Y%:]
%n+Q=;<kkW]_-Q`Ik&h.eTZ;G%l$VZM-.5"3_#c_BQ0=kl;pP`u/.';NJD;;l::`G[<`Z\EMVQ(jp>2BV(P1Ws0:T1R4Ze&\BkcV`
%PDAJcpWG56#DXg6S"8BTe_4U+cAU,Aji*#0[;s!.T=oNa_sXXD^=dp\?p.`Ks8;@oZdZ*;V&am?/eH4;B,KIapYt;?EIW'.C]<kd
%`cA]'fmQFnTps="rAu%Ml:#XWo(hVMbmhi\frdJ`=t/V*%keTEm8lM;LJG+]Yi^>gm1mBcfs3fE//K5,rGH'4Uj'6=PhkYlMUq`M
%>Mn`Wha'3?$ff3O.^o57GN$2_rTSC^F?BMGE3FT"[4e!gf;1-iCYaAJWOTUf0.lTm0;'7J?DVSE"H""&hDng5c2.=FMlj&:p6G63
%6q67lK49Q$s4H+Op@+V<"@RIC^KuA+_+tSj'_eVSGICQ-n+R2;/,,KaM"g"G+1h!V0.p7J.e`2Im47L=IA=#S5$6Nb[JXlUF8Opc
%d^J%_r:KB7HWTNu9)0BTW\*UClsGUPM6U6-3jnkBenSQ!<4D-#cQ962Q9P$Nq^2o'+9RZ_f3_dNcja3/qdm+\X?:;M4ZQVOFW-mE
%e/W,/HXR[NPs)Ep]g`'fQ/[_i>8TB`U$oWMNTs\aHaO9G9FdXFXt9HSFm#\HGkeMXYdqHVEUV`/Z=d[\MrNS@G42E:h>4^in[A:.
%NLo&)_XTg,/c\O?g#IE=/YCZWp:?)JolTNr&R1A!qR3tRO>$><MQ>iu#GjLT+$8*a_[jJ%/A):2A";H4ZhQ1H:J2YtVi>m^01Gd*
%jdg;k)uW%r5_@l492D2J/CWUbb9mqM]-eQ`eaK]Uo%=F"#(221[d"'#D7p3Gp_&`T(7uRV/)T>?qp&74N"7j\Z"FjLaM(^_VoA*t
%`J`955Bb32L\J:1q4#tTc\lF3$`@'k?K(*sje-Qb9b`/1oB!kQpepeFcMMP+qS=QdiJgCofBX!;>L.MbX%E38.UJY3<;DUWhX[G<
%Vt\d"M-30hd*9iR=aI\k]mio5lu]De=DJ01T(,s(m95:]$pJ!(g1kn?j.dK'>p"AM<+9k['m-droVB6(.b;_-n\SUb^NPU*5kL;3
%[l2i6HZojq07*TXBZ=X_)gXC=mlP_)G)A?J8%r#[%orY^o1OuPg5i\Gf^["QF(=6MdI21C%KGY6H9d<(O^L0BG7/%:#a`)]Q#@sR
%Z7kgg^$e^!C&p&im`CO0bJN5iXb5'q`=(9?0@-\qm:tY`f;'keYe*nJ:YpfH=`=>^a0"O&pR]<ZJ8TlIs00"[^#27bY;];2R)[,!
%]2k*OGe4=\[+sDQh`^_HV02*(CeWFS\ugnX>.;M]l<O.,6m(7>HQMacm]Sce^m[H9KL0jdo]4!3(TQ*1c_/`\piKsEnS[fsg*iJ=
%HVn%M4]s<B";_T@ZbkrmlZ2Ual!Cp-j1]sQh/"V[4.h-;C%!U^?I@1'[e:ah^@1GgY(&Q14n+/'0+0Z9i7#Sld$7BJ(67_Ja*PAL
%jl`9D+'Qt[e`2&9jbK$HFJEPle_k98e9Q#C^&R,W7(/2t%uM0WLL291_JuPsp?9d:B*8ofdtac2T>s,q,(L-*,<Lt[ouF;=m^@;)
%:Ff4K+CDm9-3!oCdaKSfjI[2_Q8b;f[G'pr13WtmS/,JGI(iM4fWcOg:H:A#O.2mBl+uN!<rI`7a8,QG0%BRWm/;[Hq=]3d3I:\`
%)#nma;Z5[Uq;BQs!rhi9nBXbR*.-f2PWl\Y]uWG"J$J.tmP/g9i,/H$I*!djh^%Alb?G$P@Dgi20!UJq=5r1GlMt-<Z'0T^KR^Z>
%/75m.me2)1^@l/s/2(mNf5$3(9`_g+g($ji]Zs@Y5Da8;JV'terMQj<#Kr$\Ru$efmgu`ejk(-p$1B&4FFuN'DQpr5<9ql[3#K8:
%#[hIDZ'uD;j>HC\Spboe!i"S1ris?B2Vu@n%`;-N#',nd_>OR&j4O.ZfKZO*%tg!kWqn3Z&r]'d"l<\?5Ba^Rp;#qRh[$s)!Sq93
%^OS^7O,V\SVr@:<*q1i^h4q32&qLmL".@&phWLL<=[Ktbb)gb+!+:jo7]#PV]>7hW97[dt7#H#9E\loKI%=3XEU\-D"J7da&8[-7
%68qI(&T8T](&>EPXcT"d8JgHC;Yi4T>)F7O2qi;h)%k=1M!QdsO`5l)_^n6L'HQ7ISEE.J"e2dMfAoBK,R6:)%5A,\TZ($-5Qt%F
%GR+NDIuG@b"N%A\W1@R!"9]$F;ACakV\)X8PVaG#p=2+_#U?TEHjofVMn.NujIai+O6n.S-L<(DTKj]mEcOE`FGo)p%MEe*Q9qL+
%5s>b>>Y&fV6).NN:/j,oI=PKl/^IkZ=FQ*&+!3.r2n#a]Y=]0bHKhZCq$Yh\^70LW`bpT6BGQU]/mj2:r3@?td0cdi?T%om\_^WE
%4TgPF(R\l#oj9@gPg4TQO#P[MUH;+1Dr3c\>OBT3d,[L56aL(XNh,$k].q1B![D,Fo-K4urmf1Dp(0pI8"\5B5NmicjfEse0,;^s
%q_,J:&nPd64#Cj@L#MC"/72MuQd:+_H8f&@Ic7e^ntpBSgM?.,mB8-35HR:3V+km%Xh:=e8"mgKHJ&+:qP/#>]lb#+JW7b'JCfb"
%@['s=+EH$`DiV@unG1%CnO;X2[ko'.qtZSl_TR/,5>'Yd/6qXe&,hMF;>8`Z=;IP#JZ"]-o5r?b#qYkQSdo4NS2XgQQc4m7h36CC
%d3k%(SKHV'2_aLP:GM$l)c..H/X,e'"B@-'iWAQVLSa#)GA#[<mqd.FU9SYDQM=qkA+K72/l1Z?g-PjB6:4N%gaDbJ8Sl0%#=1:O
%?(mb_6%!RU\O+FL@ZQ.$`m`r/b+iUDLY(\;DdZ?^52<kUqQRY:Hhq8Ic52EQ3ecNh7@^8k=9/.pkeBVWmcZ['!pJ1ILI$uL+o"r#
%2+iN0"Pk?:TEe8H`.q"Ek^!,DkcI6Y'l?RVC]EKSYZ+mXI62f@'mDl%(L,LPFsuW4\n`>)n\2a/k]<1oV0`+6\p3aWM/-t\%B;L!
%.<=kqG=,/>YceuVY5("qGp\lF;u6@Pn\*@GZi?";GR^!t^rGsDePE>Hfmg:"qIgPPq9X@4itD;$$\d39:>V:oO/hJt;!(sm$l%pk
%rqV\]s73fCqY'Gu$2o*sDu8hkS[G;l]4YbK^:rZ:%eD?_Xq-i6%lq3,([i7HM8!k5djKA7#>1YA&;IGjD:B$MC0okdIiKH-q3A+Z
%)\qgiB\-u&\+?eiT"Q`U:d(=0S*M^lg]`c5l;!QsgcZ#m]@H@(2buJVo?A:/S;/JMIHmTc?&0#_?$6$lVS1TS?_JFkE9dn0h4:l1
%3T"(ko.[Aepo%K5]7/-lqHc.0;uV:d_8ac(h'd^.1kDCa.tOj`#@G,iWHBpd09`&7Y`*^(kce](a_&%5N`a;c'cn(8/cR)$`a%2m
%Y%3M/>fi>)8ro"tl_U?SOY/fqnE"X&jcJC'`]@[Y6GpF=XlQV_ZR[o/0D`ZcEHPi6mFCss@*^lFG>$1t);G?,>\X4OeV^Erf/M6A
%5/c`nX&o;PD`Fb&8`4LVM,^DAT%LRKe#gXK;`eHH]X"sUqrUBclf7EYdURHo`?.J36YU$(n,72[gqEFL7rA4aq>'.7gAB<ML.uIj
%,3[sUo.>?"q#buhO_^GsChG<e<:!opk4%DWd;L,pEs%'NgZRl,_6j".o\aUXK(HFbIgV\&Zhlgs7e9:Cij<s8ZeRV*([TD`Vk(t-
%rDCdrP/5\lKko&<hHd%kqW_qVFFOr?UW4nC-HP(Hh!D+erPHtPlBep4=8)bCrnV)?j:Rm1P>r0_rPr<PI"#!T>JF@$pI_(WBYZH3
%hSDMTnZ:`*TAc%-$gr<;1/FLV?'[13C%q9!O-S.&bBjs#J=Q)sd1AUJh]g%C<jq9&j+>V%X6Yi5l.Y*Oc1SM8P0D%F]Ue)sDET&t
%A?B#urt0#jf$27#U>^NJ=PEK%FlB]0-<kWeSnl^7+19A$_q0#[5uQA]A;MD:4K6!n"H01&:cLYpr"0SRdETAmG4!C;GB9mn:hJ&+
%qq^X@gM`\fQD5.PNEYFBENaD1Zt6qG]u98e]ls^)''"+Kn\qh_n+l-E:Kke)\GJi=`9ejTIsJeJ;7sR9`H'P`q/*@"C6'%\0)QIl
%hPZ?'pD;+Oa>\:f=$O-gLFn*3p[l<#PLA-t#O"_]P=qNl^4,NNGT\k(n@QB)o<$&kCBmMpVo%]_K0'ZjH+"OIh3TiS.3&.NGm)p8
%XaV<6.*q@I[L6HXI,*M(?Rd\#g-O4ed-FsRG"rF*GC8XXhmOH=k*D.\KU_8R$FbaFqGNATR`hU[g%N>e2sT)hk/PmD]<-D.G`[Np
%hn"9hHa..1\GPFaPL%gt1gVIe&U(#L(I>Eqs1D@HhKoF?a\GK9J8DQGqr8'Cf.Oio2Xc4onBhUUX:b3P/)8\sI5pL,?@F"sD31C&
%HrVb!)r>Ug[RF$hLY%ld2ARdQp$KoQQ>CLS,BWD&X4DKte%?Liiq_WgK"(c^ZV`4%Rs0-W2^UK]HueW)p?Li#bEj0K_LSDb:KC(L
%jC5C$<]IgoVY&[gC]pZ:lq+2GFGh`XD13C'XtM'-;>o\j%+(>N<35oTbItOBZ":;IgctX3g,++g0_*EZd[eG%"T7%6p^N;$$8TB4
%@XR<mQ4<S:*\T\i%]FI6HrUDlRgUYPF1nrjf-klFT3pD)'ori"8dfJDoZTDsEmrh?BSD@BRRTW:6dpr89bs7_HeS`!o6bUh-3#Bi
%)f5(Q(Lu<oTui=_>\Wr8$eF=gS"7Odq%m!Y,]\bmpbKG(+8J%7,$t(!TUV/D/c+\jPiG:_MMEjbkZGSN[&sl\F4VlQkif%+/_M;*
%4X0j@0u>;eTRl]'Mrg/YcffU)m!`q?DQ`k?qqced$])U\I;Ye#_cO9l:s:"fD.pf`PV'@:Nuor00TE.;n2*&hr!7H$pF:+CYp+Pb
%-L):7_A1C1BmoepMQ<B)a4o.&dc/GU:S25OYHL1J_[l%f\34b;#bR9c]9c`]]C'mfJD,D-Q:isfDg450b`/p7rqc,_E705'P88u1
%.IK'.?.d*()X%l9Y3W1]m9maLC_[qmD&dI9<;5jXcabef>d(P=ff<t6?\u/uekOfhoYJ-m46:C-GIJJ`%oW,f^`[prl9.gb9hS-8
%TaFjCG*?;M2jfLZR*4ZRIt0u%pI`o1h`DA+QQGeRrg)*l!bVWUEm8ai9cApBW71Z>II$e)UWqe)oeep>:jfOX=Mba.4`M6<W0\IY
%@bU'0fXmoi::4m3du7LFiHFWh;>QRdY90B::d]/&)FRZP0D[hAn'g\og<'E%V/j0@lK``1o^+/GTVRuAWk_,1R\':YiRa_A^>d+>
%//[!2@(UZu=M/n*^;kOQHV[7Hp&(i@:$q9;--SpSZ*X.Hkl_O,QJusq5&-No,Zs/[p$cD5,O\s5j&'c>]04As!*aBFr-l!Lkl'>s
%b84N7'`F#pG9`=Fc%8+UU(*RPo.!s+5CARc]>B*pk(*X.r-@P.pLU2.q9V?cShYsHRW9=,@(4ut\T4C]jk\aRmcio*o@(RgihcUH
%(2C-OK>gNE5]mC8-)Y=0cNla<h7i`mnY9&Cg2*r5FSi1R.$:bV`&fSP[`d:Aa0jHTZXN:s4!--LG#/<@8<^MDJ[Ku*_X4@.E*)US
%0lXEKPh8oXo[,\tp3a8IlkfG2lYA1A*j-2Mc,'MJW2G]bY1GU5Us0Oga(([,T^PYPVq!Ia-%bmah(AM$Bm$>b<kQp]Vu62ZSfD?&
%HuBA4Xo32)l&S?dTks4c%?C)3_i=VcjY'h^i9R`^T'Z%<JdqNs%DMZ57Ig;hIgjNgl1<^ABC0VB@0Xng^sL8h&\cH0i8PEskUWKV
%XRl;a1U)_-J\lm3@nZRj?SD+LW]&M!UZs<[ff.*N"gSEjp$:Z"ieol77^@"QG>Ir+a$kPt&uC;1B5J4NId+\hb@^:=ojrsbRSj7F
%;Y+h;(fEQRmH<52$SO_.E[)cY8Ic8T.fHtdh8AF<WFmiu=>-3s^Klb>(a(lqBdNIm*QtqZbH'&Y4OWEKUuH'oh*UEtG86<D%Z=\/
%+7<k7'rZ_l(Zi+2+o`-eq_]51#Gm3f$`3$rhZSBAGYmkskDM!Zmb)p<p"oY<b5$&m]p`RHf!tSWBE&CB\;a%0r/7nlrcP&E38Jc'
%^b`*E(V[J4\K$<(_(UKF$:O#c@=<4qbF:)]\T^Z'?S9+?_F]/s<FH!CEE%XG=PEh1,:;\Nl+ue:43Y@[hg+-g/dGl>C7":/jhjU"
%F(]'"or;.HhtJb\Fb&?3=J]nnCtJ*&HFU<R\FQD.gg=dd/`4:KrKr,Md'sJ/^mjq$%(@i#oDbD:WJ&[c^EP?).am_GD,Dc8IU\EP
%`sT"li=5gQpf>'(Q]<bg8NQJN@A.!lnM.:(\/_lIOsd4lMA1D=B)uB%_5i<?BWq=&lQP8E,pH],_S7*E8#VoP[LL"(#i.`Fj$/I7
%FcJT,m5K:l,g_iX'E-0^0t3G^Xj<ZJ(eN`rR_K/defg`"p]_C]%-mduJ,H4js%dZh[X)O8:E@ab'(Wu7e<8-3jdB`nikc39EuB,i
%OX?P!9Kkk0q->Gu"g?#l/@RqS_o`&c/([$?bu96$0Zu89k!5>3#J0G!-b&)<1iH77&Pt:P;3sY$*bl@AVBH05`Lnqi1l]/as-HYK
%BJQp%<N*]$Sm;)&FZF$\aP54O4YPLT\.tu@U..03=?nCNCh:6&[;aK#Jj&8d*Z;<S,L^c0N!"DRN$o1D8PI1c"044Hm(DR#G'pZQ
%P;aIN`=SgSidcSO6Ts](U=;(P/pRr7E%$N84T#6A%YfhXi]kB$M%C&*!i.&%:5#ja"`pq5AFrb),RsF"a%7i5]]Bura\[X!cX_&"
%k&&"Z?-:+l(MIoaVFX6fn1kBE2U/jokmSTF1sm9&+KbS,-jdisKB"_BY:j?F(,Pc2\BJu=a2FbNiAo7u(:J4=_tZ9h(+qp.ArM5k
%KlQTE@$1fCZ<\;^QQ_T%+^UjqC^)Z<37Q6+mjaWlD<5W(&cqYFf8`5S4L<i\"rKmo[lhPA@+?9J@5]P3\?FB$>J$J87DT#H':oZD
%_;m%"5qK8[C1.!%,OZ7W>5\=fpsERU:5fSHg;$`9CcW%>duYR=`o$lAneM7;$;`6k;F?8CmH#@i.`'lVJ?+6TjW]e4b`31A5.;=p
%6P19()CTWeDiQO6Q3Sm*ck"'80ld`P6i&6as8@rpV,>B+*ipA3jMdG=$*[U-Ta.?(RmX(q[0%TMM+-^^Sn%BB!/PV,(lXo2LUU"U
%+5aJ6'd/R1Q9@1H74<,75s5^N=91Ddics;k8HtpHr:(j^\+hBGrgd0=;NbFcYQuj]6VpKNfC9]M#>:#e2@lt)S=R<JFr#73k*bO+
%%N(.].EK@Z.'gY>?j7:'fn;u;-qG']NG*.E1/<?oTZA6Q*!""O:ZWeNH?A)'VX.0T%n4>Y$*Y\%>1U&j>IGAoQkS's;1m7p)j7oG
%V2TS-n7^QiMn266>_>p3+>uos6pXL(#:seg9M*I2_N?mm(VdSCrh9r5+OriYFeqk->d\<O:m2r_\D<8&o_HOO;f1gZ:fGuC>e?Gh
%3>>UOL]M:ACJpj'K/Kc8R40?3(tdq8Z8F<a/LJ`dFE&A7Y,R>j#"G(#YYk!6>h:*g4,4-U,UNR^;Y_M)(t"ik#<I&p%:b/G#`^>J
%X^cp(;Ho;s;CYYB6dUIYP"4.W`+XejA%80I@lCY'G4LUG?5s8;FWabkeg1?^#5ejJ80Hlkac1ofh,CVp%E!f](=f?lUK%_['c8]n
%kh$NSUc&\7KZ""^@KD<G8Ig2ZaP_\M=]?sQl:T55#)G%dQ?*+.K;1ohjBJ:mm7=E.ID3ZIDLc]"r-7-dG]ljKkEMG\^mQQ.Gib7m
%2n4$\8%&U5bWmPe6jf%[X&l_&^d=<rWTV[f@Y'Eg!_WdoE1qK>o)\cV1qH5>!F5/LK53]fLm#To^s3-^*.eLbhJusrQg`Raf7-go
%++suWj][Q[ge':p"18qX;/YK%9)KiS<JZ40HP,u;mU*Q;PD4A,WtI6>Zb[7LeQ$>"V"5nrJF?rg.udE2%GP-4;4<a]3*cE_WHZ_m
%!KK:tSIJZqJ7*s?TtX54B<\B=rsB18!qp`uW@:k-#Zu8SEoUP]H9/^SYphG1a$bq#V;.p.Jd2+F@o+d(`.RlM$cKiofi4^L+7ULC
%$Q3;p&riS@)@'1XC*o3SLkA%OQ@ai3;B%&!:lRLD"N3l`-.*Bt(3%Cd+KaECU>Y@IdMmf.+Fo9#*RJA\!Ec3IPoL53*d,CD&2Z1J
%.`%eQS-0\Kf9"0^6XmpHis86-H8KWrYsaWkI/kTdUSj2:l&i?'(IeM8-l&3+66jis,c0"2`7UHeZcJ8N_3Ue3\M+mR>[)frpG1c:
%^^YBgE?qELGDHB;?%N9#?!DEM'*sK7G*?<*pV_h"(+CJ#SfBTIpeZS#:pHY/WhPM(lno0`&p/4-%*foVG)$7tg^tkWJ74hX";m[4
%gJ/l2@6b6X7-i8'$WojuF94TZ9VenicopWe"IIB@KI73)a_$8]p_X8:F-tHFQHOlAJ8GZ!),q]:)\&Mabct\oO;onS#2>X[Q9YMG
%D9Gb5hPHRJjA)Q#kFtE*-GYf2$'->8CW0^M/N1u?N,R<#!R@[m>;Aa*!CKNTR4sZ*=X_8PRT/hB./>_dJr![NYS!=A+H`8f5!bR_
%,ZCBGRn=R)i(#j7D&=*W'a"XuX-a8&S8aG3$U&C\ddr#BD.Y<#8gP2F7[RO0#pHGl0]UiPOqm*cV`ATV-9O^O8+nYJ3u\Y?0r*2F
%_OLfdH1VsSKEhh"S[OAmB2CZDd\mC<:G!Un!HK`PDiZrDlOZQ(%Q7ldqW"6'*Ar9u,@9/Pf>0(iKoj)NM^"h,FG!07gu^C]*7D7M
%37NXB(NP^+nV!h%nJgFc:kMum[UZhU/Ij7qmslhF?cp'X^rT1>f?a`C!s&PmjC#h]\3/('3d>TVfNXY7GhA2_k=FPgGqS;rdj'L#
%/Tl^o3L1N8K.Yso+`0Skb-9SKN=Mj2iq4GD_?1B.F&EPgqC$?])8'j\QGC<>[p0*-!1OW*HQIL+_a\sfX:Pfc>)pDVWpTp:GAS@)
%Bi9Y:LMj%gNp2I7^f$Z#nFK$G,16ZfP4?G1%nNJdfYg$`1ZcDt0XX76E%@`i/XY3:%V9le&bmXRK8=5>C$c)[M(h,Ua+H(`[N.b$
%)%k_:#f\k*,MS+8#Y:QZBYI&OH'L*]jQHFNoCs2\$,]?E0CF>ma8JVF)*A<[:DEU:N/0/BEEjb5Ycoj/@`*:md'NulVC-3DY)"4Z
%:<R2+=9mm;kc2.tL;U;q_&W./[0c?J]kolRiYs1RSjg>k2?AMJnf.rdg_nKr[VW5'frtTB2,`3ti*>!/13'MRO+Ld?AR&8'_8)U@
%!SA+1P96a\=1^A8*sQ)E2Hn52oF&Lm73rb0BB`fYI^1=pZOdB5nmIj4(fXq8r&B9'cOX_`f:oFici.l>jhml&//B3UMiakud"IhM
%CWQcTYO[f@Lhr#n!>sTB\M*8F#NX?uVR2)q1%X>^H?$/U4o'YL%<UY#N#b8lHrO@?nbB=sRs`ngj&8lj.MGUk^#7tsnO.I&e;t!M
%$dT;'1a9el@,AE0JZ+/]i&.Hl,Rk!u(C`;5<LB]*Z<&d!)s_h<_%=eT?BF9)Zd00kVFb_XNd`$*0rX*j+X3[<$KY"oG[S?J'PsmV
%4Mbnl9Xt8h?k^O^A-o'Z0hp\VK5<6'2-5)[QrW+$2,.NV1M'P)_?3Ve7RPs9mQf8n!fY#AG)6J;$d@2[Zmk4d_\dE5GS:4u]f[hN
%OoW*<.N(`#ae!Soa2X\'i;Pla/JcKJHmE.N&p7<N%2l<a_,gc`6WHm/,]+b7M.p7ATKXo@.bY^Q2gI@_9NDO2+)s!3(V+N*MX2c)
%mEg5KLP'XGi4uAUWG%=.[s-J5$+!T3/^L[*Q(qpDRO4W.nT.Lci"<@Zo)b-0Z!:Q#`:`\e2"q95YUq+1S1Rt?6j.Xi"M6X(14L\U
%olu8\GE_iO>9uZnPUSE,3X5jTg"Jhb[I%A7`oKr50&f^hU,0rQ3PeYt;nsXbY_*$0h#&G_TgQ<[YAF(!!:YV@;#[%G'Xf]g`m#`N
%54!U*>D37]hlK^G$Di=neV&0te)nZE"p>5g`Kip^^r[m-PY>2ZY%o@R#n6tKrL_BOqs@>H'IFcO`eb6hF61QkZ\%E6+PBC0^53>!
%4It[0f.(oVhKJ[^-S]&-FICdqH!V1D-4-',QJ,UQ#9?6AI+rqj\/,6>0l4a-)s3=q\_2%ngdB8A?m*<$Rnd.RP;h$1Y\K@hKd0-6
%S<J"c$mA_?7M,N3Z&rE0NZgad"(ktF[anE9rO;N'YYJ#Rq&!N9KB!OeM&<F<`C9m_/Q(I_=KIfZ2rQiMSHN_DR'1aC_eUbD%"E@R
%\\dDO/9d@)+_&qY>N5D=-+Z0I9GCM-T41JHJDL@N_DEeRp<^3%6d%eCNZaUYJ9p-p)!Z@4aAe6Xe<@9kKHIuM3bI-T,Hh4-/J!M2
%RnF/Y2:%<iJrE&9IZirZ)H1&$\p,h@)_]r6mI$shWGCu*8ashe.E^jQqWJD+Yd?#14H:mC)`DOSCk9>AY1^YUiH_dWj%4[o"(n:l
%nHGq(VPT5=A$D2O:trrC(lOGdAE6[EGUbI"J(M]e"Mpb@kB\C#H[&d'@RHpNjWSQ6Lh_WZe\a1JLY+<n$SYA&WW%?7i0REsJC,;i
%,#bGhDS.-gNBh!Xr']/63F&>U&+3t&/PFoF2-h.W_Z3"_AJiqg#Z$hs4YXEl:le`hcPa*ln6QNl8=%Nf8r>W+SiE%__)C.LOs>]f
%FV)</AVsXsp.Pif.o/.h(.26bK8s"F9cA_C&>77f80MJM?$#ecI*iKOVKb';CQ*<Mp68<Q3X]YhpX?8LoZ*UQ@Hr@lVUA`MNC^%!
%D1`q2M+EcOHI\Yk&*O18!=I/mW1CG$P(n4uo%Y="[+[ur?_jO0:*,I!''&-8.J&9(S=;H3ZtXO</5$-1U/9!#2NZc;pr@XT,7[ab
%9R)f$N<r4?,Zk'a0P^qJ-rriiR4[)!TpTj#<kJJa*!!DU`GH7\Uq*o"4S(t6e]$8T_Ce3[D2L4;iaNVr;KXZ?8pK>X84R.IZ*]=+
%Vr=4(]3q(3VBEuhW$$fH".87W$*ZielDkDLmEJI)"Utd8\2\(%XDgt*>thYg,Z2dG&_qsB-^%\a$6N#u@_s9%)0e1L"&gqNKI8KM
%RTI]J-\<Q)iUnB<aZO]HY_?034A,l4'ptm.ab^I'+ODp@FJg7Q33T"!/Rb)&Rg2,V+:&BA7tSS<&Rl`1n_,gbHCElu"g`HA=q*b1
%o;%d#(*<L6]FI&KVIGGg0MIJI@R.UVbc255R<OV44NIL-66/C&ck,fERDo&+1iRjpbbAg-=J"]sr!q@d/TG2H"Ck%Dk+i?__SMr:
%``X5BM)1%rG%1Ad$a7JU0a9=6i[PV\1$(-#!;9gl1gOga"?6sm;U<fG:HBi\@?QJf2h+L?1&0%H:s5$7&hl+1Jl;sK*"T,6OY[TD
%5UcE)/.)gt:RY9"mlq,9/-gtU4F2QdE0[@)>Fs#>T`ATf[g1Y7ObXu$%YTGq7&/*?o>I%S0e8c4&!dOF;-Y.g/d3b,,d[YU?(2/:
%*hH*I=E93"U!+2Or%uW]AesM1VFlrg6[nUaOJ,,082,2);*tW/g_Z$/#YKojKC.0Mf*0SV:RkRHHO>p00GcF/faqQ?'?lodTX]=]
%Jj%aG9ql"s"2ZTVgj;]34)%_5m$aLk#tnNB7KJ>(''8bD4,P1\^H*8W5cE_"&fF9JPMU<+_mdRu5Y[nG'U7$n<c7O8o,nCJ4J@F<
%.+AF*1sAn:XGL;mA%^e%WZaat&ZA(Y2B'PBb*:To`7)XSchDWn]Q+6V3,1LX*X7hP"B2P437;h@_)t01@VF/#,gIrq;VZLV#,&o2
%#pBKeY$n/X3T_c"(,MGZ8G^ffnhBOLEam5oe08KkM?/E>g1arTH((,>/2,&&1+R6L:cfGBj'\/e=MR3?,:R#\HA]4DY`[p.TK'Dg
%+P=,li"jX.]`brt`:=a<!H[$p`%I@e1gDQV0#?jFb_i_7@$ibuc5.UCP+.M!4[n/;i7NiNS'Dc8Ou?`TS65j0NsW7"6X5S0K*CNH
%1]&NC0qgn@<;<s!a+%3Y[W4?naF,nE,;O9\k5MTPHF+\$>V^H!61@\^TU:Q%Gu:Nmj@q/W&"+^r?FqiH[]gBPfHs=Tq3ORkKI<UG
%UC/=]YKl&l#O4t+XsYDOJW?c]0-js8)7c)92E9P;nqP3Q%[$:%'DEi=$dB*B\K:jA5nsVF$-\GR$en(\`/S'BgbnqQ&KES-Q=Ncp
%'4;O1ZV3s*B?RqPYbi6Yb-(67?,W&nj!N>j(&-<s/<_D:9<f[p3*F4^O;#X8("C'q2(sskb7AojN+@\a@Sm/?p1`#2XJ=q2ENgX5
%dc6/Xp+[Rj`'-F2Lk@--#t%/?7BkH=ilFA;Q@ojZ6S+*`\;6%26FWhL.@=Nt2uk`s$MP0(n=kQb!Etg<eukk/j8jZM7b>lf=HYi3
%Oi5-WILfY%Mtoe(mYCm3EL:C,iq.G%`"EBZF"rgn'tY$nMr0PnVuWqoWFBuu<_e_tPE#`@aCP'(m*Na.Ande$jEYu_a@^t/eWUI^
%Ga'$)jBID!\]Z1h_ujo)**j.XOGG2MH=41l6>T>I]Z;dn"+-[l'S5DWAL>2.(14?[8FXd3N3qeS\lcg>FK#q0k<*>X.`n:S8Fh;6
%XYsUGL_A"OEFF2*Go+uHlX%I!a.dTJh!r7e1ToA3#d9ZZWqm^"3\1<oh,nYB0^djHaI#u[V28&>>6_2d!lGG.'XB+"\G:7X:MF^q
%@H&7<p)$kCio@c4aZUG&5>MuQ6Qa[@<A/<,Q\A2-YsjgPL.C!!$jH&W%L^^d<IYEqbcBr)80-`V#E+3Ld?>VAKAu/oTm!j"&.^h/
%4gfH,98NnBRH!Wq?8I`c#b$IsP-kFtQBr3Yl+DPa$I8ob1?B?mfWn23(Xu[-*dQs=8=o.H,9Da<,#Zg?V(;f`@rF.$)Uf4%Glu$=
%<PjPIX[$ERZFE"e<<9I++V\-uUS9JcjW+F'F15;rOlK"p)0IZ2-V_O"K+=:m'L#^E[`h"2I&A*-:fW`6D6,,RdR<PPgpkEH_2sU<
%_^(W"/)>VM`i^o]SRZ8njg]'VKdf]s^n!aPcg/E([^Nhn)$.?_n9IkFP[!EHl$h/'`?HJ&ln0QD'$M/&ENl0_ip5%OL"&,Z0&P*e
%mDA@!%$Nc)@EZh8=F\j:\I4WDV0]u3Od/WiQISp926`![8)d'ad_F"Sd^h:2qZ7C%8>"!Sh7I[2,^[rAC%?!MJJGs;;gsS^GZ:rE
%ib)YO3*p"*K^K30_2+=.1gXF4>u1dD(Q%]l1aM!A'=n&6/n&QiRCAk'#X1f;hB_?WoMB!@W2hHUilUN)i/VbP=Qjg!AdX1N!:.fO
%;A)s66Agi<TO0'M@tj5.(iL<B*N^L$UfpE'")(uWfJp/:S5,[[iu;b$(tFfk8'MGrnH,Ab+e[L$gi/P])&aPU]XAeMbt9]FEhjoY
%)AmZql1frl9T1Poa$fBXf9::9<_@%"V\)(+CRXF]R\FsD_kO1t*1]t\8DGH\5T7gdag__p]EGVg@(qIO!sfqR8]TPH%oNZX)j[h,
%Je"I=4?3b%\j6ITQ^/>l!CL]R>692hT\Q(eCWP5BRYG#"L+;+l8[Cojl7se-D%,0^Qa(?8KU@W^(!f6'b*35A$_E.>Mc(d=S<tiD
%!BZf!,:dIQ3,KGQ:$^j*JkNY(DT,ZrbWBL%pe&@:BLepiC<Hr&K7_\jTr3h[>MV<k<\,"U-R?F[E&Ugq<Z6*oKubgD'VZtW[BQ7(
%B<(<;g[TqgJt%rK$@3<u*,\]0i@l/rMbMTmjr62*l4W)JYb[IFg!IPd8EABBi.`[jU0<V&-e:23=sj?!??"8X7eWWJP$l;BgbFLf
%Mc<2?1GP+^>&K_mBJMY/,#UGc0WL/C$Z5CmaDMXW"deLr,[_/;VRgC\FpXo..b#AbR)gN`A5^L?oFBe6_;^>3/[XUW3EF7p_O`^5
%9U6hMF:,7fjpEd+n!NYU#j=`MXl/RS7m()k!Mc(LRW0SUc"&V$g/D:O]Mf]gdKh+#pW[2fYbHKm6]%'_8ME,3365o"?F3DV-\]gp
%;;ibhi<:'h7CeiW7g6g=)mHH5@=jkuJf$P'R6UcSXMB.;/rl;-#\rE\R%U%$8tm[rNgRp[7Jt`PqtR<R'#g@!9N3hK0U6&Mgjh\b
%<8N@>"p^t?`ZmkT;6!O?4FEKNA&(#;KclfY^'U"@_CUrXNGc)'FJ2-6N#O!i6l7f.Ju[0V2cBc")L`%/b"TX?p9o!f/6(eme46[Q
%=?q+mKuhi".ml]%G.acmBjd>i=0WA[Ua`T2dVApA1bqDf64m_D9hS^'UOiZ8^naqA^IMk7#04Y&:E#\OEFM0@hpue!&kr^cKrO([
%Pej(Z1cVJ>eVsP<Cth5_-H38k6m)O-`V*8.(Hf`WW9hqfKlY\Z=E@f_Tqs!MlJ;`-(!j[5[@&e2_)N*6V@:P!V*L7c*^c4&jNoi[
%%,1mm29U!TlGT8DZ/sXom9^)sCi'V![6\<H%md-T+EUW>'b-,&?ek_3ORT#o.>n9r-=+EaAJKtNpP)Z]ob#5LAlV;P>]l"_MN4lE
%L1(TG^2P+"4QKYQL;JZC;H\D$\DeM7=mmjB`WJRaZ0#;W[q)`RI>("S]UDS(bchqrE/l0D+'KL:rh@L:_t]-Yj!#lVA1H0tn(1do
%f)skTG1D0Rq=jB?gdnLOI3o0C><#g]*%eE.X.GZs[h:2i;)7+H2/Z7\2iZ!M'TCX0jD,"bJi-(+[?8<V#_WU*^]D>9/]rs0mE.An
%0@KZQ_3;B\qHK!PV84EuM9KY]^tK6D*=#oUP%(&8HA[G2=a/fd25Ka'0hMoJ.$eAb;ApGj+!`Y=mt0(Egu*c=28fq+E$Plk]SNIO
%>qAUag_^A-WqqW_5gN;QW*4C+3/-Lgdkom7pgTYQKYL;1'$'cQ+upei(orln(C!Bcf?"TTO$gk%1j\ldAr[)W8Z%4Y6_QeGIo-VV
%_k"nb?WqY73/-KDR#p4.015NP%FQr<o#+Od!q6,ej@J:OglW._o/\()V;RQ+NZ&L*?AI&"gA"()/?4F@dcF[lkhZj_dRp9D5BnE9
%#T4k#kOB`reA69_]V,ZAb7')C<2XjLCk:$0bTS^8pn>#b^dOAl^<3=\eOUTDkl>l[`_t53KkfPb"jJ^.I5pRGJ#7e9Ak7PhZ^K*H
%q@IX99PR^hO1<;:?Cq[&7`?nF0(ZUC*B[J!PlX2HCR8L2&s@j@B&HOda@sOm[Um/Z^8knW.O,Z*-nZp>#u`/<[kV27LJnG$)foSV
%:P^3;JC<*i,ctdDIA+@=Ja88?HqdIM\NH#T,J]oddMJDe4QJ)c[21#Z5Zn<`6,.egpFoZLVA2[9N'e.Rq6!:Mh\qE3":kn(/4RG>
%UE;h?ma<MLZ@RXZ"gk7Rhoj$W2h!Xq5Z>B#LAAP=[btSC%8DDblGgJ%O8q>IcR8iO<[C`29S7)%Bc(=/$<FCf[qVn-+i>#j&1^8^
%+t3l,^*PMoodn!S6>]X@;CDq[W(BFhY)^?WD]j%uelr9W;&3P1dOQ3/q#1:mmQW07T`JGOW2DM//%7djl\=FHTdC5?i@ngmHk^>;
%Vgb?W^kPji:$YN+C6Sl=P4V@90L.*spE63gDMrWMC'&o@6eG$QhS8as:jtXWdkN,@MDbop.ieDag5/-R_EnBFC*ag$F\Lk_?u&Q&
%Dh@*=;-0kadun3W@8u#V6E*I;*CC6mCK6c#3X/\P<(%u'hDD0#R>)kVY@Ic4418mAMlI%hp_!lc/5qC_!f$#DqmOE:FP3'VSHP2=
%jf,c`r=GiKUjZO1[%Bg#YehD*PT25u,Z_G:MZ!aPY0?LRhW44&%`L80e'g#sTXLq('#e7)6uepnVEm)^1^nAM,pNo6o5;_^$s>(d
%RsW"^^c?QIV'\#IQlD&`5@tHU1-MJKQt]b2T]`2"4TksPBj[3+mAJA^RDA!%7%As>9L:kGLMo!d<+Y9^Y2%_"\Miu6M%0un:^Eek
%@80I9-D>kFk3p\)2&Gs$KdsZU$qY192Jd+Y%7+83=4EpGS5.qr`b2m"Rjt9ecf+B5JNWshJ\fV#&kFj`lnOM'+%DGo3:ngjE!k-I
%*AkMZZ.&c"VS"7+-\9KA1SF1#n4osNJ7<36UcOM]fG4]3)@C<oo_p&m#^$0*,g@Jk@+F"(^"B3h4DA+FLTQb$J`Z-AQBM<<GtLaN
%7074%0+EW@Dkd3p:lRFT8"=21NJSgc?sbhRQ".Iq@[Kamo>g#//I&IY^p\)`3g(a*g]a!/!g]+J8CtG3Ji*Ts,Y>SD4oH]9Rf0+q
%(HUmW5,Kp7rb7t;K'rZ=^Rp*\q*VpcFf,f%LkI-<IR_GkqN[^B3lC"J63iIS*Y?_t*Y9^pNDXl8M'F(>cLAc_Nbe6N1#cYW)#b):
%d&J0=&QXn?c#4fZ1!u)ukjW#"hlu.J%=eWg35H)2[cJ_CEm)LgGkgPW5G>CXe$EK4=1rq&p`$Rpfa,^MKE+XRaXb"BeFE#X9O'D@
%H;jY$jEd,Gr[-2u1GH_n^aFQK_mh$q\srdgPQg5c;8/;7T!tL+YV#noaZ<P!q%j8rH.Ckt,EaZcBc!of4unT=pOIKpqHoU(-?p,S
%7b:!$8ib7Q4Df-[]]Cc8Rdr19(\:^[Wd^u;5tYM]1E8HoZC@_nT!K^%0F1<^&TMTA^TAf@p@RlK*=`lcPp`f10.(MnA7(NB\_l,?
%1e(^\b8SA)c/m8OLd=ZUb-[:Mi*3M,RYs+um!)I^fAm0R*"1:QKW,PdW;)U`N/E>TeA_>aTf']0l=+j$"AcCIWfZYHFuAf@PLe-@
%GOa`JLetDE1;tr42p>]H%@,:jV(+p"Rg+$)ok(3.;IR@RC#m5W9fK@?Q$(-q'kXHu8=0!+WRdsUbIEI',[jcarA!9<V@(1"-[1O4
%Si;.hNo+1f4:6Zt!":@E$$9mlP>3Z8IpQ7@=C8l+?6UEt]<XskFn,6uS,&F+$dP6c5YRoDoK!lUgN7Zt`oD9Un.MZg%9]:T_b8Wq
%P[GiHmDuc+q"'7<8cW18K]/YFY_V>[/Q[p;*;?8LmO#BXJ?cs9CIXSVR>sg(e"CsKf!Br6!#)VVI#c6(A`auO15m7rD0,taI/#BO
%T$"XjdlFGCrG5aHQ]6R6L\L#N)F^]0(8)KePj-(E?*Di8m&<C*n8f_DSF"@Tba9C7fE.$%=*_Es`qZQY?4H6P6U"@>n_m&<]MF=O
%UO'3GFUIP.%irV=C*Mi1Ll0@7%O)S`":(\['_,=`n(2pW9i2_ECVb(4Y%`aD'F.p@*[Yl&S6r@A.8$pSaUuBPOi5AG(dUEe/+;j[
%%kG)UOtY"eK-X$MIK!7YVPH6Cb$>A>8[F=.9U_h1CcoVr\WAFP3*4na!;SS#h/J"8=J<>mq2'[aaiS-oQCZ'*@RLV3VV;7h/VLKe
%o$'kM]-Uf6FSLK@nlf92n"du172=CY-YM-Y1@Gn:9V.bg?4iI$ARL@8&%I]a954PoiYpgY,aX%-E<C/"pVclMpfl^;'Of=Ol'RiS
%.C'!\\j@ma'#;:"OfLhbiPAc2i^k/AgP4[cAIq?pBm'`Z"TGjC7sJlJA.gCn=IuTF*!#N:;H_bkijr*b96ti&c]!M(3fs_G=AM]W
%9Z$BH6oIW22\gqV_-9NO=rY>92l+5.:0n^5)9@@u.h<Y&0j;I\8.3)d@-h`X=\$/2m&94Gr5b!J@tEiPQn^-<Wk_='RN.8#Lf\kA
%:urjT%cuH3j=/dB(hQ$#b0M&AJdn8WMKp^W]+DVeD@bbOM0\HO!4pPla$'3@Qt6O2'8qB&0$dAu6X&,(q_9dS.oI.j`Ir*W;,\el
%p#oerM'e:k;L6"O,j7eh;-)FGYbBP3iU$\FcAa1bTa#IuJpR@$i*n`/mfIG-$K$\"=<EM=1VagmR&=]hCLD,5jV;7#'@sgsVT`XI
%!fT(L4ip]ua"^7SLbjG2E?MgMeX?!-7_HY!OeH#*:lg#7**\]0+snWp&kTe^C)2Z('2<bQ-N\IAHs*n;@4m=;aS:deX=P(e40Z!4
%U\^3-Da"OI;T_Wedf^a2_%,%n(A\</J2Gg*!9nm,i#_bX\@g+bn8>LcJp>!A9bpMS:98$i84%GQ_;daKV^$(m+e?9)6k#%IJ=,+q
%;L6"O2!@IbP?"4%&"j^JCFV.e?JI6j@;Ma4*rdcNW\b's/P]iM,qRAR9$N4=@'H;;<rfY5IW'1tRkT<e)lJY9#IG^`$fCK;>U=_:
%_^oIl0l1Yd#rZmW@IH(P/LST4ZF]$<5*EFr4q7;2QRFXV/:uE!j9n?a$QdqUXCfR)4ZXDfC/S-I?fPUMN%G?YM+nUjpsDtC'TubY
%HldC*^cnT72KX7./H&%D3BNP.X>brp,jKBq!l]g=X>#<5J<,?u&S:?4,0h/^p-pS\W"9nuZ(aN\Pto%<M.G=p]JcF8n`#Xh%]ArD
%j%5%L2.6JZQ=*(Tf7D2,#&g7U"rY9I)X?k=!jB*\](YW1@p)6]-VADG/LU"UniF)e"rBtDnHKS$U<#@d/3<mP+q<L8D=K7!0F\pu
%fTZj"8arDeCgr&mc&O#)nH\WI`'*g>!5HL9l4@_U;7RULA;!pR2W!tD_FbFRN"r3q3uD,@["t/.Fg"^KisCu%@[>I(c0%A_MH-(g
%3#aoli8!p:cG]'ONo^[Z,DgaEZ[c&'K`H)47Fn(2UKQ*e6gp-M8Yu^2&?[Q>5^:O08'Mm7--C>6a_P2gE3dA9b^kMu_BRAYc@o"H
%_ph'a`S$?,0a;W[`'!`R^cKaV5=H`_Nbhg<%U<rdKoY5\"ltlC)O(JmAas!;'-q`YS2"Wc#r'8cjMAI*nK)U4#oZ]8&B/u+EAhoj
%@0'P29odC2AHV]uiZ@tR@!t2;$Q1VFk,;HqYW["'N8`;"=ghH<j/J.l$ApLV)Ib#QUfm7b<s.Js8l.#pg#^KA5t?fdXi$TDW<D5n
%.DJr7dplVU:d.cr-g)X!_Kl=='fJtL#tbK<1*GH!dD8r9=e8sj8',!J(rJ+dde;8./9F;Mh.GDQ1+;0#VG(>fG'S/`22,H!K9rJO
%KON8"RE%@E%?4\#E'-F(3#(EG+Sb>:VF"\gm2%bj0&^@NEMP^$SKXJ)A&6Z!mu,OIJB9K!hDl"S;Q-RSO\Zj:j"F9!Z,Sh(a./rO
%//&ojN2?655Rq0s@fu@n,m-Aa#YsA#qc(Erk#kBsC+-KBisH>R2%*)Y,"Cn;@ZjR@RY)K0fe>*\oQDOi)K'qi9Kc58@%f>/d96Wf
%\5VV*q./cTnT4ac(^&F>>N7k?QK2O@CPdE)PK?@%g]g3!4;E)'GH4,/%T)45<C2HinWGEU>11Mc*t86tioR*:-uQ-*WTkle%/UVa
%hHC/"\<CHa@4F.30`j^I-.f-OBl*:5NcZ,O.CdD_Pn(fk>Y,N+iHrRO@oUk3?n:0i0;3^XI;pS7@!`_-n(l,gLlRs5Kl-Y*#S8?.
%SFjf><5Y4mp!'C4UC5:9?GNNpQoU]F9Z/5EktRlnqb0$d53FLAX1#N<.uuAX8"<T;lW*5D%#,'g;A*R,I;uR/9X.\)JMGJ;er8*t
%@tpKk^<M3jF/$&Heo7P6IIk#!\L(F7:gE<'^n0C$`l1c0<<EM%iZ@u-@eCa./4ktZ=6\d3Lr4gi0KlE,*F9rFem!2LIsf`b!le^D
%KK+inL"jIt=S4;XRHOCXZ.9gqa.5Qk(a`2A)IJPe"^qY@VssfQ8m]jd6uWM$nP:JIIMPNV-t83a;Uu#f\)k\?SPggpdBP*.HL$!!
%b[M0h?jD67XOSV9BW)q.nDuBYLP>N:G[h2_@8<Nmk#85kL2!s%."OR<3LpUceC>R3E"_otVp[BmU'(K8CF82,b9InZ@Oe&8W.IAh
%Q;3cOajuVMf,+^7o7j/<77,4+]N^,:Adi%0OE72+f"`3h,geQC8=a=>Sr9%0VGh`g)rk_!Z9ZYWEg*HB5EDC\G(#(bis].\4[>-B
%W_'E7\YjckUiuC=*(o]5Ps#OLn<!iLnL?8G4`&25#(-E+3Af;fL['\Z,`c@P6\b+n983ZUYnln\74$LS8NO6c`+'=K@6o%U9;!Cj
%:2m(^eg"2bG&ZC#:ue;Zbgfp=3l.T^aAB)M?C;frD\V,Q1%/-aB]'U=Z&(kPCZ#bJ)Vm?Da9Z@%du$`APfd=.2<Gq&o[,r--ZP2q
%19jflbUpX$!n:968e)Tu"M0_]/?B.&-nB\G`fa$AOlMl?`NnAr0K0=pk/ocK<FUlAD.9ViE/6PHo,-Ueiu$:++g]&kn>7qV$_*8%
%e>?Ups"*.C!^b\Xfd8JAc/01YjHusG':q"Jioq`=G$gb>R8TRaJ>-[.h^/XA1OP6M5/0Ai8;c&Cou9$p_jmCpk&[KklgQ+c@MI6N
%$X(88DWOlk!OO3CNdUsX(?:aFJm5cUe<uUS2[!_:HMKZ.5.`=JP-$%$%[1B`!6d-W-/\%=E+=G;)B:b7;]#b%ef%Z.SO3(qk>A,c
%?^<L#f29uKdp$=%-Y#-P8_df7E_MRD;3[$3-t%$T*rO'VC;LBW8(s2pgdctOA_rl./Hjfq_#+KSZ#+6S.=ZDDKQb/;Ea?_F2\)NB
%jqOh6DWg4GK;b03;SjR=F>gAgYT0?&"=J2MIk!U/GsMR[1"AbUVrEV>Ah^GT+t>dd-M%4:CItJ"&gIX3[3Sfo[f_g@NFDIYREOTl
%Fg-lf8bX&K1SbH*J#G?u*QXhl#Gr`fQV@YrSA[SaagCgVR#[u`_a<`"6'4YX(%)OZ=YVYT%FSC)CJLg\n$P-m^fmb>L7:C8-Ts0Q
%EYpSGM7#BH_js-gbpQHQ)E\<n*#oJu:N)4a:!=MJE"_ot-PPs;fVU)H@[I><-e$!!+6'LjbDO9ZHY$fXC<aRsU/AGa"2J*WXbI`9
%._!sEO,X\433gIA<6(LqobaQ(j-ej.(7)PZPKKE8#0rDoPi*82j.FKP%78R;eFV`%J;s"QWd$2*=$u1+Qg1\!TjA:J:P3CB]/jQ*
%r^u8Q#sgUc]X87#:o@-<o;U4f_hnK!m4##0@8:HfiH7aJPhm\NZ-O\!>,KZ7->"CB@a3g@(ikDYPB3ugTC(p'3>=hY15U)Q=NgTl
%:g4d'p>k<Abj%#VU9t3VE2SeGo;U6-2DGS1Sku;jVt5I2>3a=L!5V7^A"QC!%n_Nmi@R;rAH&<_D7RNhcuXRP^[YatXX0[$'sNr1
%`q3\BDc4I^H_*T9^,*K0,O[8KX`^k&4,*)W9W#fe^7Qp:63a]mnU[*71/VW`_'un75FE!^,8Gi_%m_sr_$:*MD@p'H0V7bFMgB\b
%:8iqUB,EU%6B:!D=/"_U5("Q0aKa,rlX10G$JdY59V!p?]:LB'rhZs![s"taSMuek,jqp5-=5%WUsuqWA4IU?JD<4i[^!Dcjp&q=
%Z8%-gH"i#/"2c[%*NtIq\lj!n@]1dkH><s0@STgKo3'T=[IT>01I+huds8`-AEb0H+?#($lr/_,M*,cN$Vqnp3=$0Ae$$,pA\nh8
%\Q!Jul1AZ)<%9k$K[s"1<G+784]4D!'PXU628gq#O're+ZLHqq<#>95YSQe[q5rrS/X>$8ipfeg%&>E:"j@m1M&Y?aP^A"Jl\oI<
%-?5F(QrD+FX-4^R0T0,TN!2-#Y)`feNgn,#NdsLH8XaQ]LH<J[F&8:sOj9HQfG1T4%&#S9H/,aIY;/*n#p"0h.Pn"4,I!oM<,"JI
%E=A&pXX0[b'2a_i?p+s'_[WIj_'>4nEP+UXdn6tW_&D_u\o0]r&[(q^J4.M$$@<@K.$gO%6O?NI*rfdA_VV/caJH`g7Z(Gr'T^S-
%=RoHb"2rA?4h^O&\0kj4!F)O2/!"!(a&"jbNua`fWJcO8@i_RZ:/X60W=0*nmfLQS5(f6OfRW3bmsY`j3/N"K;b:uFMhG9S^m>$A
%FX3]s%-rJf]*\bVQi@#c]=)%hDVP(1+TGkV!i/,1UALd89$e>%0L1PnGn,e_\H(G\0QC=XhcCmgC2kmuWug_P@+WC8B4r;<;UgDr
%Gk"IVPjXeD>+4(gpI7nk"454&[C`4'C\$J;Y=i:im\<"`3R3#g_iE\b8o$%9]bX%Er0^kK'=U2;U_o/5')a9A$*9ZEQ6pm1lUsT`
%%>Hm]/mi.[3$WG&LATT+55G$i[31jn+kk72SfpQi_hJUpDgiA[F?L?t9*+^9pq)B0,Z1qOl%S@?AO_8uOA(6k-oIHL7k^*'YJ@)9
%+c/&]DH$utgu-;LI`%9"0j9,CmYU3J`2Iom=8cXTSE<-uhfn/,\8N0/g_[e?a7>u=Pg'b+:1cVFe7=^\b[e.NG4nXGW(39G+W8,_
%EJXCPGS5T7kKt3Lgti^h2onj9>^E4:A'^WR!]@3BPbA8g$dA?<&RCLXiDjL5PM@$F_X>D(J-X.c'D,r>)h?`Z\>ebUXa#O=WCL*=
%iMa[-j*A!9CYU`%YDZ;"h97OA7Y9-Q4Z0en)uYrV)>3C&7,Fo$_bk7'!,^:VOKu0*657IU8.MN\d7e69$Y'9.`JkuH6jN.17")53
%JR1AqQ>,slf!lN<^Fi1(2%&Q-FhQd0ZN8Ca,bJo:SP\2rb,3i>CW)VYN6RM,<Uu5<ESLjL6HeI2`M3`uAu3m]JHM?=NAmM])pNZF
%GY`";q"&/.<k&rfh]U'o1>I(2p(MViT&Kj4G8ICf?JrP)R(4Z'nSfuT,)IQtou"/]Cuj4SUh]Yt%q@<@M+1K&?\+9t*u[$%01\]G
%e$oio.!i6)/)1N<?^IU$RTc1.8W[,\Vai8Pqi9SPp[,91aE]I8Nb-Lt8o]O@2qqtERB'RC=Z_ogU")VV!N$2JIY^L5UQU6KM+,.f
%bC1L[J2QTqfrrRs1CZ"NXQgO=RL)sVj9aP&HcCHF*)$0E0bU?'EfQ;N@Y0``qbfr?1iKH:92Gj>4'mKmJi*C9XYJiR6Y^C^KRf["
%/#^=tT_Sd8._;RuMr[;YGuK@SH'c1--+PhoqkXQ?EI)XXEs>5*7O%;22'XV$EG94U>XnPO)CM/`#.I7"ZAkr),El,J+Y1X+7r,?G
%]qG7F8SYCkMIB^ldOY#J+5-b1+aD"T].hWB2K9_Cks;tP(fd(<J$$o"k1])MSPU1u?t@9qF9OjCTkN6F\l)$n;,$+W39:IJ:bTn=
%?'^pnGjN$j2p>tgi.?1GP26N<rK=7A)07crfd*`2WRG?`CGM[C?H<Q;d0-legcMn0^o8mj:8l^Q/,C[#T,tstH@Db1r<1]]B=`!m
%V4nCW**e#)a.=3?7rcU%_)(MkKaIdhB0-]cB:hYN<8njkc"r8_Ue$chD"20cZt*[M^_@PBSq@/i7ZlmqSeeief[Ja\H=1&VrN[iD
%GX`ol1D6K!bWTrsU+'""D,'JXqY"dj$K>L5LZl&0VhtO;eA:5?52-M)&1)Y26rmDH\/cY2L[U>EPU2,Y$4j8Qq"f_KcqEaAF46.=
%)42h?aW!,p_$JA";eS<12g`=lcDU(;EkU-CMkPf1ccRIBT7^/b-0tatR_U=Tg%1PS?oT:P?u+\T]0EN$(/<!-1g5MHmKMFU#ZE-m
%Lm@.6mN$Y3O/CQLjkh)p$f(Ia1F%lUHpLb[DQ*6T,Bk&C4p6=UBT'#KSNN;'X=,UWY.tphifWfKVuu23ND`_MkKN,*)QZagW.&$:
%MJ%^;CL5S-k1!eWi1"[WmY(CZ3E"WOfA*Ju%A(p?#+*<LCW8^ZHGa`)EZJ/&FE5\3*)JhT9a6:jXfGo=0]FFmSOO]/NI*tcl]Tb&
%UMh<F<?(Wg+4MgY>nT9[^0R,NgrtnU*t^BUOWTC;ZX[Sd;GLVV-m9/pBEI5)Zs0q"0`:gr77?+S@fQbsUZ&[4kJ8(<:bTo(6'_aa
%9ajo>Em("_"%>t1MDbSjE8N=lN69T.$EDYGUII$XbRd.GP/(Oh?Bk(q-8_P2W4N2M^X$hR$9**YiKqPr6s2aK:WI,X<k&rf^Fi4)
%[7:f;0+3-GT'!qLI$ZG$1[a"OR637b`$LYdl\<@LRO.sae1uFC-@2R['=dG*jPgmk%fSN!(#6kKZ''6[*5-e95E/]OKmQ,[lb_.V
%j/h=n`XR9`%g8KJCodjLlMG/GG.cl!6!QaAdg4[=k=[#9#qt[@!pU([4ds1-mjT&LBYS`ONss5I3Oeo'JAa,0c_E@"URnI!6'@*\
%"Nm&`aUN<+E7<=4&'9R])>!6Ib\2^NCC$'_Q<h9s\`;-@55<@NNJ>e"cHN&Od)%fH4"s+BZ8;Eoh6n(`"k4d8<Y&2<Km5oUlZ1K+
%#<W\:=jehW1_UXI)=f)i1[a!D=WH-]95&"!T)0qP>EZr;BN<_@kAntF#olDfXrS?SI`W1!\FCcYS_h^jdW"ub)Qgg_pO_fPKR$CK
%oL@.[NB?hJ+35Lg%%fDn$f(Ia'/uUtJuIWe\UZ-j:+!Cp4'l;?[n&t%pdjc)JMS:cm,UBMB06KFp<OpKD]Z$s)YZYnl_;m&,>aVs
%)L'u9d>5s.VoBaj1[a!d=X.Ob:C;]p\O%&Xh!qbka:Geg9oI+nN?p':h8Aeh6?+QS0I4Pl;&>E8[b6Pf]Ug8<2#%&$bVR5A92Y4P
%`M/9d#q\,8/0JJ!Wk,<HSabJf5ZC+nr;>*jnJ$>km1U=>54%5#BOqs(E0V?]7qth0WRuGj:MR1mP&tYN5V^L(Y8.Kq?C&`c#;2HF
%CD?MgZ:?(>_4!_W]9/[0D:-^H\CRnIp^'GVoA5nG0phWP6e#i@7]IEWbbhTK)q83YOth1mPSsV;L,0Mae@;kUq[5`G`6%*d7Utu)
%f=0.Z>iNVp]6SUDU/`iOVQ[PWo]#[eU@st0S"Cg.8)-=6"8=pcZtdOsk9K/d;O+&N#;bn<4.GTP&`j-U!+)?gbuU.5UFJ@g_$[1r
%08R>.N/Fc]O7ct)>Mdlf4Bb[%aIP'C01Joip6+R/ck5]nkp`H$L;,QO->,Nr#H6#Q2?<V)n54d;j44B<;'F\JF<7R#)YZr"l]Tb&
%UOdCHB=/1qMN<M4bL=7]i#2:V_F0c3)bLefYqoS*MfC&!F"_lCEu!$I<f\SH!r)hC<+4=EFj3rHfIbF.*j*3bon)J\7B(Q%oHQ:p
%=>Ql.#YejoRbeqTm?.l+mi."")U7LfSYD?;$Gl7b!ZkHg0?@OuZRndn"\(4INXImElb]bIFH>-iYQcW-$`\-,jM<XH^61&3-#^h+
%V"r/cbF7,knblA09gPe9kt.-rCBBp#imY6nnSX,UGJWOk6mfPXeR*i,)-2_9Y'r*nn/tTkd0csp0BdjjNgf9iXIgVL7P"0h+3iT)
%VF3LtBABs('4k'7?U]qu?au.J$?:hUZah,oJ$S#gd6*j(c$$Jo>CqoNXA?>rkuN+k-oFbP'j./9OSuaA'k)(Qk;XAhXglhr;"nmX
%8aq]9G$-/f,I2DfIp)>XnllDdMW0A2e>T\::T$Yq(iBVNfaSdP=ZK/EiMIg%Hmdo:,1!#A=Q*T5I=j3gf++35UM7u94Z/\6/b9^n
%$f(Ia',cX,8e,CRU.oS;1.C<L*aO7^/QE<.3oQ-uq#[Y_Z>.mhMJJ8a$[!A9J2Q`ufrrRs1S(b2P%5N6f[G4E-h;XVn;R6f=X*I.
%4#On0S@Gh,2X'tW'3g>9:F_k@+_-qaC0\:N;mSOYruRQNaP=Uq7%T/T:ka*Zn`sX`<5J9iIPkodeDR3u8W/-/[1hQs79E'L?T=IM
%VakXKO6M]sHI]A[`=9+u0L7:ZVYUZKU39Xo;4+a=$SN*kf*0Tt2-?QDBYHceMIYONg)bUt'GG/4*o.R=1ZmGg=Ao$$OV`[_mVjVR
%[[(_7-Zmb"pBEDlXNG3'1mK+BYld'e"!'OM"F#U(bE$:l7Z!U(/$Qn(T_ik/C9Gs*O!@^altJY8ABSfRSPe8r9Bt0Fe__eFW/RVB
%!mW2X0X>.]%%4)U:8FPul0qnW6n%ao-T'U5@C5kpJ+7)!/EhNSH-L`E@;AFc_1iCnYJX"O4O\XN`N;Hl,q0o]pm5/"5+\IA/LFfY
%VO9?Y8pFZ^XC'W,oIVQoGEH+Y5Cp]k=4g`)n+D*:d*AFZ8VkkqJ27k=)l%#>*-m-/C0-d@5LL+GDiJi`UU"p$B5fQ"d5X8>0pkg0
%;=n*C]op<Ld.CRm#(+K"kb;4-noZCS)fHPs'ABI1B0OhST(kQJ)"EZj$!uQ(>n.Wn?]s><j*d5lrrEU"]b*ZWq^@<=<JiRTe3?In
%@ZBkH%7[OCc4+-.noZscICSq&X$)@0bfB7U-U,\HVJHNEi4`J,%T+9:r(U%gef7Kn2*?2cL=-a8ctP-BmFaKE.[_!IHig))@i;"'
%IIMA&GU1s4E<Nk;rL&T(;bp(`LWXR)mK3([[VNg]&B-*-3LA7]!EQDd):^G:0g2:?_2)#&qXI62M$+a`nDhSa5C`5>K;IW`Ku*9%
%_tmS5I)OFWAOl4kp\dPh]O^tAb4)9L]U/n%j\@]Xls'>ud9hu>mRIhD$VZ'7Q2T%eoN%\(VU,(%2oq[:CnG@%StXGG*1qOd"-[?^
%-+suWqi))=mI\b'6q]KlYG&e^EgVIl/9Z)91@pW?KhP)T6m_Ll7Op08Ih2_Jr5BW!"]S`KA"+C^'4$+RM%/`NiNDC8;9r-"8`W>+
%!RLO)M]lA#=8Eod1ui+JHC)-=;Z_MFO!ZP)gg%Jl__]-Zbqs;XBYC(.CC5o2Q\HQ_^`)ltm+4rCbr!QToEDhf:9f@6m+d\>6gt0O
%m?V.DNcS\D94;>W+%l!gKu5f<mRl#Y3S:9#",ulrcq>GH^^*uI<^]&hk>>+Ygbrp0d0cso0Bg,9Qj71:K-h&@f'I*7@T.F%dbPKt
%j1\fd('cTbAYIU_ZpK7(X!J</E-$bGf/,W76p7!SG\mcd$B/U(QC>Zrn;&4slB!Ptj*A!9CYU`%Y7"9M9hmK^ZaX@=NCGUeXM,.[
%1[a"OM5k+CaZ>;B>QI>`jeMoV9'SSbL]/_G(H%MO#1.Gm%K1_Nis@GF,2=`3P3M,V)QZb2,eks$72Pl[a9$kXGuIC)49`YRC1kcb
%$P>D$amo54hA!LM9=EgkPgE6^$@[ACn6c<m1g;o_G@4C6-p`k86&c>q;%-hjfj82UO4I]mHU7?W=63g.0r)G<i0HM`]!c**].8IL
%\DQ>HoVTYod-Eq<=(TTAFStj1b#MS,K6];G*6!\T!@AiB%rFjVUN<l/SrjbPP\Kajf!lN<hf;^,Y4;/9+/F)HBg2Ha.5"s?4QF.]
%R*C)hS7;]jFmdSM%M:XF*-^**KHnUl(Hn.Y$*N<1"\--A?agAb':O,-#B9W\9$u+$"]i,LAA9`ibqq:0lc&'Hm-2p**N"31mKfD(
%hg`_A.^t[S,g?<S^J!BmQ;NWqoeQ_>]+jmN^)!JbHRLdUm$0sqAo(+`-@o794^7Sm"b&d$;glQ#WH^mDp?ofP0rN[n8<:<YG=MN`
%f4F>EIlrA&*Zg)XU8Dok;GBs$0-/*`b%SL+gRiEgNZ`&+5m)=Fb&KW59+H3qUGZ04?I4,DI5r^N[-hp@0%j0u&R$:4'u::5n*Mtd
%#R.?!5"_&+H@%eL1K'I;pLe*"%9-VU=5ZH!$?^3D`WRo'L!\//cgoXp217:.Y<.@Nb8rr*,@bQ3gVH;T!Z,"n:qOMj^PN8@ZM".W
%Js)%.<J``mjQM:k]K4`I#87p\BZXV4$c:tq(nQ>jag&/7)pK^E9R.PY^^Bgfll.KL`A@b1oaSK@:\2sZ@'8ab;;WuuK:(LnR%P"s
%(\19?]8>:`Th(``*@c\U`AJ+Mq0W?hDmg&T$g+n6UG88Z7M3;2YmPa6?'5&r(cB48^c9AEc.WgESBu=Cmu7,B*D,5&Uj,n,;H<NQ
%A6*4$hD'b:OS)^&1NR$o%NO62S!>A"j/?WS4Y2tt%)lqb!\;b.U2S_G65\uq8l3^"3AhWgdHrg%'B]&'/L*CU?7tGPHbn3dUeNFV
%fhHtW+;Ta.JY(7>K*`HX8"6Zs%L('Y;a4*f,<WsE,ifN/bq0P#BFS"P(M)E2T.$QmC>F"1I`J&>""Cg/?Yg!Si4e+"9IL>tk(4%*
%2q8']]G,U&@rbS><Q=atKef*FCW7E8<@]c3SS)@\gt8G#@"L`2e[]D$!\<%6\o/.WU'rZ;?LWHbSfWl..W_s?GfG0H0\b769C*En
%V0$N)K=WIt^9-`*69p`G0TRP7g4]+l#!4NmQ,ti6J\.YefatFM?tVW)K,*YTff*$&MWq"#-?`7)Qr@6dDmu-ook6gC^Tm%\8mu;*
%SaSI=+lC;2nD<;-(6NZLW8'.s^ekMn%CEAV`N+;mXpG]m@TO@`FS@UoJJI;Nd5T-DZ!:+gPZuclH.-"$,QQOkH=ta:$drUNQskRb
%VciBIR_*1fju!u.Zp4rTrJZicFMl]h(K`cVJ.ii]=Rd[kDA5MtNg3X`d(2E27r,?G4d1;HcTj4%hb_>TZ"HfB/oRn5F2&a+'C+<U
%)9Z6d7?2Mi:$Ek=Mhf04/ScKR0!YlpUY',S2?G>o'f_1^T22EO.*1Y972<7Q*j*6spIt;HP15_)XQR.HYbstR\(%$7[e.kDmh]QI
%W/?dK*CVcOH5jfTFcgNKZm=qE.<m7VW<%:THYA+9P=<'A(DgUoRhaa`\bP@:?j/_JcNN,J_h25O!V/Tr?#ZZC5Z]'$")MYAn@j\'
%)G;'j3Bus8,aUoer_h0h%CW.kpcOpD;eo(@J5Snb+DQF7Y1-?kBVppHU-+E9huiXGo.B7mi4/DW(QU.dRYc2Fk2`\DSM@m7ZKb%8
%EE84-C59)56amlZiPMiOjH7":SK?$WGVR0EJ_T#LrD;8d2m,Uh_Vj!Vem$X;%9BtTFPigp%^%DF)*BO];hLS%BB=t_:%+&;IVgqb
%@j3Zo.1]_=o:;DF;b,58P@Le9+3R8jRhWVk6=.C3a($6hRSGaN9;Hc^HQF\6NH_8o(-P[-NU8*_6qptVV&6GHj2(u!'AE=`eC:@R
%GD1b:X2fdaRkL+>_QI9J@O%ToRCR)-f!ZW&"@@Hk14"Ib^PsSf#Uq$,L,D"/21uf5/_0YQe2:f#EZ!P)n`p8+r3ku+H4e=@CBkBk
%"\Rm.g'-KjAXKEVK]jjZiTi,,jPEeuq0Jtu=S_*:[>D$h4dpMs.PE_"0X<e8e5Ws46#BlQO`b?4SZA5L/$Qn(T_ik'C9@Y22Mn<F
%i_Hgg7u?af]bB].[8UV9B!J)*1W.RqhMF*d4W"&afp%qr*mIkji<T9$\D7qe5#A2Ohf&g*nCig/Ii>D^)Y6Yq/U#.l\b%LsNsk(a
%)bjPpDB)l4BADraBZN'[2L^mELa%%1bD_kd$,P%t0:7\6X+F",mD(]P__<tc2br0%a,-g&;p<^("]i-GZ>VHV#1F=o`GX<I$h!ZN
%G3DQAV&d6*me<qGg*n[i9<M_W_2HW#(GZuq#jSeV$00EB?W:&HQXC(N\iB=X`_BO/:W)Ni4lGXOoDh,7?I4+YiA%j&LltQOn5uom
%q/FEdG*`?X\DP3r#_d$LdbAbP?VXP8E_J6p\X8N$@@W='1k?ZR"oK)PC*jnn)L'1q4CfFXDkj5X)Q[m2ke>%.@*7tN8rX?&([NS7
%:r(MD.tSSIho#3pOUQV6<!'[QaO=K(c`Bc'Mtp4k/UB7SF)@60'c9Zc_U(mY[l&+^#daF[n2sg(($YtU[hp9@C%NUU_ca_5:62Pr
%2T]sG+aD!ibOVK8M9u7Mf+;9_r-1dB0!H<_3[4Q<."*V=:bZZ4aJ8$gq-YZJ,6goYLgEZ9N.ndgDDU!sS(Pm*<-";<RS0$aW@_`P
%pIo,lBkbcEjYgas.$rra:2MNV,1.?MB-`-sHTd[f*`.%]77duL<mc_gNuucd\]")Q%6dV7,i>8V+*9AGbGUqY^>hpB!>dt57'*@n
%@"&X@.WM<YMI+Cn9WMq*RsgdUj8s\kJ_1\pQo#M1DRach`H!k&'NW4I3ZOK3Jjn+0T/)C,huiXGo.=S)i#$aX]l`au2a&"SWiEb,
%G/jG$AsJESe.!o!`b(KHP<a]Zl<uBIMR[GI[+J/ckbSY@WFS!u]8CSmq(r^aRQ_6'ctCQYe[LoGK4cI:o8ULp:2uu?)B4!8eFuTK
%7=%U=K%eU6bc5:GM%H[INosMH\`V:U5K-mm't@reQ?*-cmY6dTXMCrp_+pa?=Q*T5I>_CMPYo@<f7r(cVtl,sLS$1*SoN)n>[=mL
%%*78in=#Fl02Zl8]=7.eaRr_AkL[Oe5GR>*A(0*qT[4K4m)9LTdEL0"`rS!Nrl#R\NkPAhY<W!uRU*7@%$(n,kJO'6*Z'A=BVP_'
%'Y/Z/ZFmd"X+BL.g0\"t!fPK04Z$#a9L7VQnA_%RB^#6DK%`CU5Pm<V1m:a6&ka]3V%Z'Mo`n*[3L5i%pVhr6$>lCmZ1XNiC0oU<
%5QQW5-%h,f#J*c`Ug>h*TPUC`@LX)E#F;$-o]/U_[N,YW`%$jpV%-?>'JF$l7:Y?)J$sd#&3-?t!LGF]Duk3XU8\/^lL)Hm8iBl-
%pUL(pK4gAEh#-4l5QA^#DuS^V^]!;UJ,9#b:Oi?4GC]YA[lL1450+7aoASlIqW?6K^]+1eTDnDJ^\I27s6K3U5CE.cVn`&s\+C%<
%a%TG3k@+DaVf09PEZY&NpeR[J__;!_B4&e6B+bNY%Rs8^A#f1=089*YL]kgN&L%P<2Y3c3,F[fmZ((2MANa]6/(,+n'_Ps`%fpU(
%<iou`j_D7Hc!Wpi*A32[QLDd4[dTS[_RH'K/@ZN@joEB%8ts4papcX2Lr'4JN%'\>,5'L>G-!=Do^*IWRe_nDNLmXoYVKc^C,[\)
%@LAn*%ZBVY-R;$f"8f5t:M?g4WYa)1UhR^Mo75>=$V6KklrC$\Gr%Q@FK[\X(0WSd1_f;KrP^+qO7cju0ms'c)!qI@/ZL1(K6Q,Z
%AXedd68@$qem@FK7oW366<FXW=0d#P7o[TpBl9#&=1L8aLPjRD+5)R/RoE3e\^\G5S"D3J+bDcJ:KjQdEn,;b$^$`#=r:AErC$V@
%#ZuD;l,P[35D8&-7DtWQi&#51rNouT455fSKZ_8RQ)%)SLP`MRm-%a""Z6`g$L-S5J+;YaCN@m0Bl2t?SZj2UaYa0P(72"SFPYAe
%O%L?P[=@ak=^2o[/JNfP[pnG8*9sdBQuBWWPk*WG`b/)f$V`paV>StD]]%R%h:ITqgIMD"Eg-Fj&$K'!"U*o_ReX82eaZCeVhB*C
%%H9L0*>9,BF`_<[+r[%mZfTQGWHS4k>OG=DjNV'7CNCJ_YkmA@/:R[p]m0.NcOb_h-nlu%1#uh%e8j,dR\@1cBbFsO%E5$/%`mf$
%dt6I'b+Wk]krTQ*ornWY-o#`6'Zn%kSnT*1ijb0-A>(PPIuZBCbGNA6J,80lZgt-EY[F(B7Pp6WpnAsJ>^@3\Hp0[/[D45Xe)`tL
%VtEO9`slrOqu^)NU$4)!A=rA<Bon0M'-5@F,r0L'e43[jc0Bj/oTl^sr%JDO2LKHa-""W1M-Lu=:$6jh3eL`W=W4[nOPkCq[&lCc
%[oYrJ)lCXpl.1AH*sI3G1.A<eA>fET*`,gQk.Z",8*NqYCQbkfPd.V1$ZC"_8].>-eb<DM?W^KJT<V##JD/P(J8_An(<V'[9?89q
%G=0+]l1(nA@mqDN0ForSR".cl/8$?6)82Q+GnS^bSh_prgn?SG/ST!r/?#FD!mI2Kn;:A(->39j%=b8OH^;Qr>ZL:)n-49nTKDri
%:l)6sd@`=Fi*r5_>V1%'\K8U[PALjBf^>AhJgKC\5TD*CNij,%4GTM94DWgC&,Du$003H`H.?@7bg)$Md<%HV+[QC4Q8)$Rn;69L
%_VWa8+</b\E5)1IM+r/[QeD504Joh<\F[7VH:6OEFqA\T1[d4a1A,9!m%AN1L$-9_,#rLqYbLu@T$<m5DP>Cg^M[utIEi<g>oZhT
%U!((=F!Y;NHk5%`5[6F/nqNa"%<.D\\=^7?^D@o/YqI1\dP&-!;ai$8Q.i<=FHXL'@:O>!e]gDL_p\&jB@u8($sU'1g0%SU-:L.[
%m-VdfGU*7WEGJk>KF?$#=$078r=K*:4CcN3M`N'3i?9uHr;e:=$[H*oD1o+jWag)fD,*Fk''eI^*^+))$h=AZ4mT#EZ=HmAE/E?t
%)V'4FlE?K:Nl=H"$Y@k1,j9Br85Pn`G^ceM$pu<[lZjn$La=_n1n)RC"5!+:U1u^2pZ/01$?$lDmRJWS3u[cMKMp=)<5*H*r-2QE
%o_?Q\Tb__G;*m/$'FqNq1'h@U,,/7DjO%]&U[b81;R+j;R+a&D#Tr5=7]@!c99F\8;>MsiW3JSL57ns!c-`4@NfX*WR!`+H['F./
%@1PKg3(t550%-J8:o1G\XS=^.22re6h0G%TK$70Dc:9P[)(liX4t2UK48L9<6=,TdL*DY\P3M1&%V8baM]$2H1ps'M>TUpGc#^mU
%5#Kq_Mim-0=K=S#7)8CVfucM-s-)XK"VKQ#YY#^)1YGWT+.K<6%qH:o0"e&6qJKnK>gB*I"Dt(jVug`)-B%%M\\:`N>ZPFCLrM"8
%`'l<3%j\<mL$CQg46BR[^e7d>0.DRokb/:A1NgQU@hltsZ)!Lq#_aKiZ,8$CNkt5'Yh3Q(7:1)<^^X@Qc#Q2EC)u]@hOWGoXo;2O
%C97)Lgq="!Y!G-KdoW_G`HGMrLB>"*MV'hDSelXGb%Q0S*!6ZXhl_[X3O)]q1[a^WWm5#pj-4]IR;!I>TYme#&%EGfE.IEijd>Qn
%Rs[Cj",CJu8dl0Z:ZH>(dIncl#[$$*n:!53M+dQj0dEG'q@QrLD2SlP:l!9`0aA2GJk9eN*+&iY*\BDWH*2!5?M+]+Dmj.>=$1Nh
%23Y&emEt>_,a<rOm-1fkQ_(Tj6o_11J'n(.-lK%U;dCU=e3EY*^K^*KoaBR3F(S[r'4a/K]pAB\`!+OG03%kc\^kq!%CB!%P!YHK
%)c6Cjl"Bm;=CE/c2l@b/\YM!"Msko&4E(>oQci>[*\PeTO\E`k_`6CB&!i`"FO,0=AE&6.ia_kfm;]g%JiCl#&aUeZY-Ir][GBYq
%C_Q!#66,j@qXbsG@-03L'Gi9Ng_TW4>B6koBMluO&DnK(G_Nk-)l]M@`AAUObAGP["@aRMH\O?i'[2K1'B&X2Q'"6+DjmA42g[5P
%@&Ef+ZJ2M%rZK7k7s$pmTabgHUG&a$".3CHgSQZ9GT+l6rj\?gc,%"PVK4h8MW>=6ae!,C&G5Etm%ErqMeYWKH5!"G\'#Dhc7uL!
%jaarq=)r$M'%%8u6**k(%%B/8['(mT7MJWp<8NYS&q"N1\YXXoCFtnII[B*&T$F.kKB\^pdk8`cgucu1+e6IrEQoU4nYAgPZ][0Z
%2^embCJtd'3=]!;B1X'Q_2_PVXqt@K\41'-$95nr(!\dH?)D$qNt5h^4ba2YOGDJ$@jgcp4FQ\q]cFA\.oku6-)Ee-.RZVWC-QI,
%Mnpn0ed`DmhAg4#o>c%"gF84)#Hh91\$NtXR"jmj!ZPP2d,[]KNYSbq>0>YT/"s/AG'Tmt)1j[#B523-(,H+L'!I$@cd:AA%L[&B
%GCj$m>VMK$nYd%tjNL/&m=%c+(n)Thg7=7Y(=XS-&EsCID!8gCfG.2B#/09aFnjU<F%<ZjU9J+@=Q-;/mUc_>g<g+1BQA<:(!gkQ
%o#b.S@A4dLE%CQoer&bKI:8g@G,UQtd.EAC%g0d^.:2"clAugQA?&NXaH%@L01#.Y>\.2hro.$^M>A"*p#)D,RRjTgeCq?QR<T9c
%0oNX,8"a[:J^do/i.WV%-dV@9>GA)%:]2EH4)&XTSCETR?C]9hpPrhHI&6M.=<fB"Gk,=N1H3^,SAd?*Aad5PrB'OIHb6o1mZUkT
%'c<rj%27E;FOIc2kC26RMSk=B06d`g:$*!X=%4B+Q&_B.NTJg[8tO*J?rr4ba%MHg6,uZu*RHDEG%6W?4G[9W,<nLmMPT`ZV,(C7
%>^It2Wn%s\klF4b9Tgp;)9!Rh6![F.&h5,H-c8S+X!F#S:fi8TTf<P=n.[f0R2\k04Xq:Sd<a5bK$r'f%="d$^%,_cGRUCQdtE0t
%B.kagWqC'q\--G%U?)ne!0,(Tkqf4d`qG<'I"+KPnLb&]6esSO_G_.h:Og.b/S.o>Mr!:"-11X-+)g_A5,1"_-6\?V*shL$6diC(
%gJBF,??Da44\b9WhoH#nrOi\:(qaS:;KJ^RRR/_SQ3etag`Woli%Jn("/kS?=u(U5M;7i+Jd'<DRBDT0q+TBkCT-VDm!Fn^CM-<2
%s%A,]7ROan,!/]A!7)$_[05&N_K$+0BYW_%H7)cC'p.]43DdT,=-Ko=DmE_>5epYf4j%IBWUZIj"FPkD&_0B11j&jEBfO'f&nDqS
%Ip_lfG/$GUN"gD:bX]G7'@B#U;p&O+acpquKc\\`:r8)"3/Plsd;)LtGu%B<fM;6SGq[c#&6gcT=imc`cP(b`\GI5(%m>rG,"8$O
%ggK5ua_YIH9<YP!cWs4[@b7Lsn63!j1"n0p(BNZQ1'MXf2@IkD#A=tp]B<AQe"U5Pj]bh<\B"#AS"k4R]P^d@h9JjHLiXfS4Eq?A
%/uYs$Q'u`TM"fWh-$6"6pCVpn8NjZ^BIV@)"?ss54s<Ko#?WtNPK9u96g#H]AQ\&C!dCr"+T(s<=6O,A+8\Xe*NeXK\/ABq99&A0
%aunjBQs]K=IborcPC)"Ger-5!6^$`"GZhU_$[;A3(X)9PqrF(0c'>Y@g$e/0%8\<;4>RYD0X3E;\O_=)ST6?2:*s_4ib`?eTV'"i
%V3!&MLMchY8^rsL"$?iW2^N)anC('Zn%8N%8*FF5+8]48.-Z-/flLur[p@OM\Ep6(5=\UY:1<K&:2+%Xq&W&ik:NeFfcHheDPGl1
%_nR."Wp]2%<SZO??*(ubp7#:''c=+S5$tD^AP%eRmjGK&"/Q,<@Yu1Ge_n.=_fKRlUX2r=8f8;_q72+N9r!Q64>j_BQD0M-F>8(O
%Cl@ka6"N6t8<nCBeE;jGGO=CJ+pc+-PJ\.>'5cVT_:>,,>C%.%E/)<KM`CX-NP<2c>eB+O,r8F\(SBKFNU.M2E>8$u.)NP'h5,pB
%q!s`\pu:5/I?N/V],D@MM<LG*'%fcBgVq9@pENqOh^`>_cs%r<E8:;Z>J_*lccmFKYeWCTX'^@G=OhHmlGm6i^b>[IroP<;rf<+I
%rq3<f?[U6$5P`naJ,e'6J,8_ss7t3C+91R!J,/ZM^\[H]f3dRNr9DVqIsq+jVm$*jc(@1Jp#.QRps]6CJmTG2n<9LBj1kN@O+6f:muINa~>
%AI9_PrivateDataEnd
